--
-- TQC_PORTAL_CURSOR030215  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY TQ_CRM."TQC_PORTAL_CURSOR030215" AS
/******************************************************************************
   NAME:       TQ_CRM.TQC_PORTAL_CURSOR
   PURPOSE:
getProductOption
   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        9/20/2012             1. Created this package body.
******************************************************************************/
PROCEDURE RAISE_ERROR(v_msg IN VARCHAR2,v_err_no IN NUMBER:=NULL) IS
    BEGIN
        IF v_err_no IS NULL THEN
            RAISE_APPLICATION_ERROR(-20033, v_msg||' - '||SQLERRM(SQLCODE));
        ELSE
            RAISE_APPLICATION_ERROR(v_err_no, v_msg||' - '||SQLERRM(SQLCODE));
        END IF;
    END RAISE_ERROR;

  FUNCTION  getProductCategories(v_sysCode  NUMBER) RETURN product_categories_ref IS
    v_cursor product_categories_ref;
  BEGIN
    OPEN v_cursor FOR
    SELECT TWPC_CODE, TWPC_SYS_CODE, TWPC_NAME, TWPC_DESCRIPTION
    FROM TQC_WEB_PRODUCT_CATEGORIES
    ORDER BY TWPC_NAME;
    RETURN v_cursor; 
  END;
  
 /* FUNCTION getProducts(v_twpcCode   NUMBER) RETURN products_ref IS
    v_cursor products_ref;
  BEGIN
    OPEN v_cursor FOR
    SELECT DISTINCT TWP_CODE,TWP_TWPC_CODE,TWP_PROD_CODE,
    PRO_DESC PROD_DESC,TWP_PROD_DESC
    FROM TQC_WEB_PRODUCTS,TQC_WEB_PRODUCT_CATEGORIES,GIN_PRODUCTS
    WHERE TWP_TWPC_CODE = TWPC_CODE
    AND TWP_PROD_CODE = PRO_CODE
    AND TWP_TWPC_CODE = v_twpcCode
    ORDER BY PROD_DESC;
    RETURN v_cursor; 
  END;*/
  FUNCTION getProducts(v_twpcCode   NUMBER,v_sysCode NUMBER DEFAULT NULL) RETURN products_ref IS
    v_cursor products_ref;
  BEGIN
  IF v_sysCode=26 
  THEN
    OPEN v_cursor FOR
    SELECT TWP_CODE,TWP_TWPC_CODE,TWP_PROD_CODE,PROD_DESC,TWP_PROD_DESC,NULL, NULL,NULL,NULL,NULL,NULL,NULL
    FROM TQC_WEB_PRODUCTS,LMS_PRODUCTS
    WHERE TWP_PROD_CODE = PROD_CODE
    AND TWP_TWPC_CODE = v_twpcCode
    ORDER BY PROD_DESC;
    RETURN v_cursor;
  ELSIF v_sysCode=37
    THEN 
    OPEN v_cursor FOR
     SELECT TWP_CODE,TWP_TWPC_CODE,TWP_PROD_CODE,PRO_DESC,TWP_PROD_DESC,BIND_NAME, TWP_BINDER,TWP_BIND_CODE,AGN_SHT_DESC,TWP_AGN_CODE,AGA_CODE, AGA_NAME
    FROM TQC_WEB_PRODUCTS,GIN_PRODUCTS,GIN_BINDERS,TQC_AGENCIES,TQC_AGENCY_ACCOUNTS
    WHERE TWP_PROD_CODE = PRO_CODE
    AND TWP_BIND_CODE=BIND_CODE(+)
    AND AGN_CODE(+)=TWP_AGN_CODE
   AND TWP_AGA_CODE=AGA_CODE(+)
    AND TWP_TWPC_CODE =v_twpcCode
    ORDER BY PRO_DESC;
    RETURN v_cursor;
    
  ELSIF  v_sysCode IS NULL OR  v_twpcCode IS NULL
  THEN
   OPEN v_cursor FOR
   SELECT DISTINCT TWP_CODE,TWP_TWPC_CODE,TWP_PROD_CODE,
    PRO_DESC PROD_DESC,TWP_PROD_DESC,BIND_NAME,  TWP_BINDER,TWP_BIND_CODE,AGN_SHT_DESC,TWP_AGN_CODE,AGA_CODE, AGA_NAME
    FROM TQC_WEB_PRODUCTS,TQC_WEB_PRODUCT_CATEGORIES,GIN_PRODUCTS,GIN_BINDERS,TQC_AGENCIES,TQC_AGENCY_ACCOUNTS
      WHERE TWP_PROD_CODE = PRO_CODE
    AND TWP_BIND_CODE=BIND_CODE(+)
    AND AGN_CODE(+)=TWP_AGN_CODE
   AND TWP_AGA_CODE=AGA_CODE(+)
    AND TWP_TWPC_CODE =v_twpcCode
    ORDER BY PROD_DESC;
    RETURN v_cursor;
  END IF;
 
  END;
  
  /*FUNCTION getProductOption(v_prodCode  NUMBER) RETURN product_options_ref IS
    v_cursor product_options_ref;
  BEGIN
    OPEN v_cursor FOR
    SELECT TWPO_CODE,TWPO_POP_CODE,TWPO_DESC,POP_DESC
    FROM TQC_WEB_PROD_OPTIONS,LMS_PROD_OPTIONS
    WHERE TWPO_POP_CODE = POP_CODE
    AND POP_PROD_CODE = v_prodCode
    ORDER BY TWPO_POP_CODE;
    RETURN v_cursor; 
  END;*/
  FUNCTION getProductOption(v_prodCode  NUMBER,v_sysCode NUMBER DEFAULT NULL) RETURN product_options_ref IS
    v_cursor product_options_ref;
  BEGIN
--  RAISE_ERROR('v_prodCode'||v_prodCode||'v_sysCode'||v_sysCode);
  IF v_sysCode=26
  THEN
   OPEN v_cursor FOR
    SELECT TWPO_CODE,TWPO_POP_CODE,TWPO_DESC,POP_DESC,NULL
    FROM TQC_WEB_PROD_OPTIONS,LMS_PROD_OPTIONS
    WHERE TWPO_POP_CODE = POP_CODE
    AND POP_PROD_CODE = v_prodCode
    ORDER BY TWPO_POP_CODE;
    RETURN v_cursor; 
   ELSIF v_sysCode=37
    THEN
     OPEN v_cursor FOR
     SELECT TWPO_CODE,TWPO_POP_CODE,TWPO_DESC,SCL_DESC,BIND_NAME
    FROM TQC_WEB_PROD_OPTIONS,GIN_PRODUCT_SUB_CLASSES,GIN_SUB_CLASSES,GIN_BINDERS
    WHERE TWPO_POP_CODE = CLP_CODE
   AND CLP_SCL_CODE = SCL_CODE
    AND BIND_CODE(+)=TWPO_BIND_CODE
    AND   CLP_PRO_CODE = v_prodCode
    ORDER BY TWPO_POP_CODE;
     RETURN v_cursor; 
    ELSIF v_prodCode IS NULL OR v_sysCode IS NULL
    THEN 
      OPEN v_cursor FOR
      SELECT TWPO_CODE,TWPO_POP_CODE,TWPO_DESC,POP_DESC,NULL
      FROM TQC_WEB_PROD_OPTIONS,LMS_PROD_OPTIONS
      WHERE TWPO_POP_CODE = POP_CODE
      AND POP_PROD_CODE = v_prodCode
      ORDER BY TWPO_POP_CODE;
      RETURN v_cursor; 
    END IF;
  END;
  
  PROCEDURE getLifeQuoteOutput(v_quoteCode      IN  NUMBER,
                               v_totPremium     OUT NUMBER,
                               v_totSA          OUT NUMBER) IS
  BEGIN
  
    SELECT TQUO_TOT_PREMIUM, TQUO_TOT_SA
    INTO v_totPremium,v_totSA
    FROM LMS_TEL_QUOTES
    WHERE TQUO_CODE = v_quoteCode;
  
  EXCEPTION WHEN OTHERS THEN
    RAISE_ERROR('Error Occured '||SQLERRM(SQLCODE));
  END getLifeQuoteOutput;
  
  FUNCTION getDynamicValues(v_mod   VARCHAR2,
                            v_pkid  NUMBER) RETURN dynamic_values_ref IS
      v_cursor dynamic_values_ref;
  BEGIN
        OPEN v_cursor FOR
        SELECT DISTINCT TSMSD_PROMPT,TSMSI_VALUE, TSMSI_MODE_CODE, TSMSI_ROW, TSMSI_COLUMN,TSMSI_CODE,
        TMSC_COLUMN_NAME, TMSC_TABLE_NAME 
        FROM TQC_SYS_MOD_SUBUNITS_DETAILS ,TQC_SYS_MOD_SUBUNITS,TQC_SYSTEM_MODULES,
        TQC_SYS_MOD_SUBUNITS_INPUTS,TQC_MOD_SYS_COLUMNS
        WHERE TSMSD_TSMS_CODE = TSMS_CODE
        AND TSMS_TSM_CODE = TSM_CODE 
        AND TSMSI_TSMSD_CODE = TSMSD_CODE
        AND TSMSD_TMSC_CODE = TMSC_CODE
        AND TSM_SHT_DESC = v_mod 
        --AND TSMS_ORDER = 1
        AND TSMSD_PARENT IS NULL 
        AND TSMSI_CODE = v_pkid;
        RETURN v_cursor;
  EXCEPTION WHEN OTHERS THEN
    RAISE_ERROR('Error Occured '||SQLERRM(SQLCODE));
  END;
  
  /*FUNCTION getLifeProducts RETURN sys_prod_ref IS
    v_cursor sys_prod_ref;
  BEGIN
    OPEN v_cursor FOR
    SELECT DISTINCT PROD_CODE,PROD_SHT_DESC,PROD_DESC
    FROM LMS_PRODUCTS,LMS_CLASSES,LMS_PROD_OPTIONS,LMS_PREMIUM_MASKS
    WHERE  PROD_CLA_CODE = CLA_CODE
    AND POP_PROD_CODE = PROD_CODE
    AND PMAS_PROD_CODE = PROD_CODE
    AND PROD_CODE NOT IN (SELECT TWP_PROD_CODE FROM TQC_WEB_PRODUCTS)
    AND PMAS_DEFAULT = 'Y'
    AND CLA_TYPE = 'O';
    RETURN v_cursor;
  EXCEPTION WHEN OTHERS THEN
    RAISE_ERROR('Error Occured '||SQLERRM(SQLCODE));
  END;*/
  FUNCTION getLifeProducts(v_syscode IN NUMBER DEFAULT NULL) RETURN sys_prod_ref IS
    v_cursor sys_prod_ref;
  BEGIN
  IF v_syscode=26
  THEN
    OPEN v_cursor FOR
    SELECT DISTINCT PROD_CODE,PROD_SHT_DESC,PROD_DESC
    FROM LMS_PRODUCTS,LMS_CLASSES,LMS_PROD_OPTIONS,LMS_PREMIUM_MASKS
    WHERE  PROD_CLA_CODE = CLA_CODE
    AND POP_PROD_CODE = PROD_CODE
    AND PMAS_PROD_CODE = PROD_CODE
    AND PROD_CODE NOT IN (SELECT TWP_PROD_CODE FROM TQC_WEB_PRODUCTS)
    AND PMAS_DEFAULT = 'Y'
    AND CLA_TYPE = 'O';
    RETURN v_cursor;
    ELSIF v_syscode=37
    THEN
    OPEN v_cursor FOR
    SELECT DISTINCT PRO_CODE,PRO_SHT_DESC,PRO_DESC
    FROM GIN_PRODUCTS,GIN_CLASSES
    WHERE PRO_CODE NOT IN (SELECT TWP_PROD_CODE FROM TQC_WEB_PRODUCTS);
   RETURN v_cursor;
  ELSE
  OPEN v_cursor FOR
    SELECT DISTINCT PROD_CODE,PROD_SHT_DESC,PROD_DESC
    FROM LMS_PRODUCTS,LMS_CLASSES,LMS_PROD_OPTIONS,LMS_PREMIUM_MASKS
    WHERE  PROD_CLA_CODE = CLA_CODE
    AND POP_PROD_CODE = PROD_CODE
    AND PMAS_PROD_CODE = PROD_CODE
    AND PROD_CODE NOT IN (SELECT TWP_PROD_CODE FROM TQC_WEB_PRODUCTS)
    AND PMAS_DEFAULT = 'Y'
    AND CLA_TYPE = 'O';
    RETURN v_cursor;
  END IF;
  END;
  /*FUNCTION getProdOptions(v_prodCode    NUMBER)RETURN sys_prod_options_ref IS
    v_cursor sys_prod_options_ref;
  BEGIN
    OPEN v_cursor FOR
    SELECT POP_CODE,POP_SHT_DESC,POP_DESC
    FROM LMS_PROD_OPTIONS
    WHERE POP_PROD_CODE = v_prodCode;
    RETURN v_cursor;
  EXCEPTION WHEN OTHERS THEN
    RAISE_ERROR('Error Occured '||SQLERRM(SQLCODE));
  END;*/
  FUNCTION getProdOptions(v_prodCode    NUMBER,v_sysCode NUMBER DEFAULT NULL)RETURN sys_prod_options_ref IS
    v_cursor sys_prod_options_ref;
  BEGIN
  IF v_sysCode=26
   THEN
    OPEN v_cursor FOR
     SELECT POP_CODE,POP_SHT_DESC,POP_DESC
     FROM LMS_PROD_OPTIONS
     WHERE POP_PROD_CODE = v_prodCode;
    RETURN v_cursor;
  ELSIF v_sysCode=37
    THEN
     OPEN v_cursor FOR
      SELECT CLP_CODE , CLP_SCL_CODE SCL_SHT_DESC, SCL_DESC
      FROM GIN_PRODUCT_SUB_CLASSES, GIN_SUB_CLASSES
      WHERE CLP_SCL_CODE = SCL_CODE
      AND CLP_PRO_CODE = v_prodCode;
    RETURN v_cursor;
  ELSE 
  OPEN v_cursor FOR
    SELECT POP_CODE,POP_SHT_DESC,POP_DESC
    FROM LMS_PROD_OPTIONS
    WHERE POP_PROD_CODE = v_prodCode;
    RETURN v_cursor;
  END IF;
  EXCEPTION WHEN OTHERS THEN
    RAISE_ERROR('Error Occured '||SQLERRM(SQLCODE));
  END;
  
  FUNCTION getClientPortfolio(v_clientCode  NUMBER,v_userCode   NUMBER)RETURN portfolio_ref IS
    v_cursor    portfolio_ref;
  BEGIN
    --RAISE_ERROR(' v_clientCode '||v_clientCode);
    OPEN v_cursor FOR
    SELECT POL_BATCH_NO, 37, POL_POLICY_NO, POL_QUOT_NO, PRO_DESC, POL_POLICY_COVER_FROM, POL_POLICY_COVER_TO,
    POL_TOTAL_SUM_INSURED,POL_CURRENT_STATUS,POL_PREPARED_BY,POL_INCEPTION_DT INITIATED_DATE,NULL QUOT_OK, NULL
    FROM GIN_POLICIES,GIN_PRODUCTS
    WHERE POL_PRO_CODE = PRO_CODE
    AND POL_PRP_CODE = v_clientCode
    AND (POL_TCB_CODE IN (SELECT TCUB_TCB_CODE FROM TQC_CLIENT_USR_BRANCHES
    WHERE TCUB_ACWA_CODE = v_userCode) OR POL_TCB_CODE IS NULL)
    AND POL_CURRENT_STATUS IN ('A') 
   UNION
    SELECT QUOT_CODE, 37, NULL, QUOT_NO, PRO_DESC, QP_WEF_DATE, QP_WET_DATE,
    QP_TOTAL_SI,QUOT_STATUS,QUOT_PREPARED_BY,QUOT_DATE INITIATED_DATE,QUOT_LOAN_DISBURSED QUOT_OK, NULL
    FROM GIN_QUOTATIONS,GIN_QUOT_PRODUCTS,GIN_PRODUCTS
    WHERE QUOT_CODE = QP_QUOT_CODE
    AND QP_PRO_CODE = PRO_CODE
    AND QUOT_PRP_CODE = v_clientCode
    AND QUOT_STATUS != 'Confirmed'
    AND (QUOT_TCB_CODE IN (SELECT TCUB_TCB_CODE FROM TQC_CLIENT_USR_BRANCHES
    WHERE TCUB_ACWA_CODE = v_userCode) OR QUOT_TCB_CODE IS NULL)
   
    --AND POL_CURRENT_STATUS IN ('A','D') 
    UNION
    SELECT POL_CODE,27,POL_POLICY_NO,TO_NUMBER(POL_PROPOSAL_NO),PROD_DESC,POL_EFFECTIVE_DATE, 
    POL_MATURITY_DATE,ENDR_TOT_SA,POL_STATUS,POL_PREPARED_BY,NULL INITIATED_DATE,NULL, PROD_TYPE
    FROM LMS_POLICIES,LMS_POLICY_ENDORSEMENTS,LMS_PROPOSERS,LMS_CLASSES,LMS_PRODUCTS
    WHERE ENDR_CODE = POL_CURRENT_ENDR_CODE
    AND POL_STATUS IN ('D','A','R','V')
    AND POL_CLIENT_PRP_CODE = PRP_CODE
    AND POL_CLA_CODE = CLA_CODE
    AND POL_PROD_CODE = PROD_CODE
    AND PRP_CLNT_CODE = v_clientCode
    AND CLA_TYPE = 'O'
    ORDER BY INITIATED_DATE DESC,2,3;
    RETURN v_cursor;
  EXCEPTION WHEN OTHERS THEN
    RAISE_ERROR('Error Occured '||SQLERRM(SQLCODE));
  END;
  
  FUNCTION getClientClaims(v_clientCode     NUMBER,v_userCode   NUMBER)RETURN claims_ref IS
    v_cursor    claims_ref;
  BEGIN
    OPEN v_cursor FOR
    SELECT DISTINCT WCB_POLICY_NO,
             WCB_IPU_PROPERTY_ID,
             WCB_LOSS_DATE,
             WCB_DATE_NOTIFIED,
             WCB_DESCRIPTION,
             WCB_GIS_CLAIM_NO,
             DECODE(WCB_GIS_STATUS, 'B', 'BOOKED', 'PENDING')
        FROM GIN_WEB_CLAIMS_BOOKINGS,GIN_POLICIES
       WHERE WCB_PRP_CODE = v_clientCode
         AND WCB_GIS_STATUS = 'P'
         AND WCB_POLICY_NO = POL_POLICY_NO
          AND (POL_TCB_CODE IN (SELECT TCUB_TCB_CODE FROM TQC_CLIENT_USR_BRANCHES
          WHERE TCUB_ACWA_CODE = v_userCode) OR POL_TCB_CODE IS NULL)
      UNION
      SELECT DISTINCT CMB_POL_POLICY_NO,
             CMB_IPU_PROPERTY_ID,
             CMB_LOSS_DATE_TIME,
             CMB_CLAIM_DATE,
             CMB_LOSS_DESC,
             CMB_CLAIM_NO,
             DECODE(CMB_CLAIM_STATUS,
                    'B',
                    'BOOKED',
                    'P',
                    'PENDING',
                    'J',
                    'REJECTED',
                    'N',
                    'CLOSED(NO CLAIM)',
                    'S',
                    'CLOSED(SETTLED)',
                    'R',
                    'REOPENED')
        FROM GIN_CLAIM_MASTER_BOOKINGS,GIN_POLICIES
       WHERE CMB_PRP_CODE = v_clientCode
       AND CMB_POL_POLICY_NO = POL_POLICY_NO
        AND (POL_TCB_CODE IN (SELECT TCUB_TCB_CODE FROM TQC_CLIENT_USR_BRANCHES
        WHERE TCUB_ACWA_CODE = v_userCode) OR POL_TCB_CODE IS NULL)
       UNION
       SELECT ENDR_POL_POLICY_NO,PRP_SURNAME||' '||PRP_OTHER_NAMES,
            NVL(CNOT_DEATH_DATE,CNOT_DISABILITY_DATE) CLM_DATE_DEATH_ACCIDENT, 
            CNOT_NOTIFICATION_DATE CLM_DATE_CLAIM_REPORTED,
            CAUS_DESC,LTR_CLM_NO,
            DECODE(CLM_STATUS,NULL,'PENDING','P','DRAFT','CN','CLOSED(NO CLAIM)','CS','CLOSED(SETTLED)','OS','OUTSTANDING') STATUS
            FROM LMS_CLAIM_NOTIFICATIONS,LMS_PROPOSERS,LMS_TRANSACTIONS,LMS_CAUSATIONS,
            LMS_POLICY_ENDORSEMENTS,LMS_CLAIMS 
            where PRP_CODE =  CNOT_CLIENT_PRP_CODE
            AND CNOT_CODE = LTR_CNOT_CODE
            AND LTR_ENDR_CODE = ENDR_CODE
            AND CNOT_CLM_NO = CLM_NO(+)
            AND PRP_CLNT_CODE = v_clientCode
            AND CAUS_CODE = CNOT_CAUS_CODE;
    RETURN v_cursor;
  EXCEPTION WHEN OTHERS THEN
    RAISE_ERROR('Error Occured '||SQLERRM(SQLCODE));
  END;
  
  FUNCTION  getSystems RETURN systems_ref IS
    v_cursor systems_ref;
  BEGIN
    OPEN v_cursor FOR
    SELECT SYS_CODE, SYS_NAME
    FROM TQC_SYSTEMS
    WHERE SYS_CODE IN (26,37);
    RETURN v_cursor; 
  END; 
  
FUNCTION getClientAllOpenRequests(v_clientCode     NUMBER,v_userCode    NUMBER) RETURN serv_requests_ref IS
    v_cursor    serv_requests_ref;
BEGIN
    OPEN v_cursor FOR
    SELECT TSR_CODE, TSR_TSRC_CODE, TSR_TYPE, TSR_ACC_TYPE, TSR_ACC_CODE, TSR_DATE, 
    TSR_ASSIGNEE, TSR_OWNER_TYPE, TSR_OWNER_CODE, TSR_STATUS, TSR_DUE_DATE, 
    TSR_RESOLUTION_DATE, TSR_SUMMARY, TSR_DESCRIPTION, TSR_SOLUTION,TSRC_NAME,
    DECODE(TSR_ACC_TYPE,'C','CLIENT','A','AGENT','SP','SERVICE PROVIDER')  ACC_TYPE,
    ASS.USR_USERNAME ASSIGNEE,CLNT_NAME||' '|| CLNT_OTHER_NAMES ACCOUNT_NAME,
    DECODE(TSR_OWNER_TYPE,'C','CLIENT','A','AGENT','SP','SERVICE PROVIDER','U','USER')  OWNER_TYPE,
    UOWN.USR_USERNAME OWNER 
    FROM TQC_SERV_REQUESTS,TQC_SERV_REQ_CAT,TQC_USERS ASS,TQC_CLIENTS,TQC_USERS UOWN
    WHERE TSR_TSRC_CODE = TSRC_CODE
    AND TSR_ASSIGNEE = ASS.USR_CODE
    AND TSR_ACC_CODE = CLNT_CODE(+)
    AND TSR_OWNER_CODE = UOWN.USR_CODE(+)
    AND TSR_ACC_TYPE = 'C'
    AND NVL(TSR_ACC_CODE,v_clientCode) = v_clientCode
    AND (TSR_TCB_CODE IN (SELECT TCUB_TCB_CODE FROM TQC_CLIENT_USR_BRANCHES
        WHERE TCUB_ACWA_CODE = v_userCode) OR TSR_TCB_CODE IS NULL)
    AND TSR_STATUS = 'Open';
    RETURN v_cursor;
END; 

FUNCTION getProdSettings(v_quoteCode     NUMBER,v_sysCode NUMBER,v_clientCode    NUMBER) RETURN web_prod_settings_ref IS
    v_cursor    web_prod_settings_ref;
BEGIN
    OPEN v_cursor FOR
    SELECT TWPD_CLNT_CODE,TWPD_USR_CODE,TWPD_USERNAME,TWPD_DR_LIMIT,TWPD_CR_LIMIT,
    CASE WHEN NVL(TWPD_DR_LIMIT,0) > QP_TOTAL_SI THEN 'Y' ELSE 'N' END AS AUTH
    FROM TQC_WEB_PRODUCT_DETAILS,TQC_WEB_PRODUCTS,TQC_WEB_PRODUCT_CATEGORIES,GIN_QUOT_PRODUCTS
    WHERE TWPD_TWP_CODE = TWP_CODE
    AND TWP_TWPC_CODE = TWPC_CODE
    AND TWP_PROD_CODE = QP_PRO_CODE
    AND QP_QUOT_CODE = v_quoteCode
    AND TWPC_SYS_CODE = v_sysCode
    AND TWPD_CLNT_CODE = v_clientCode;
    RETURN v_cursor;
END;
       
   FUNCTION getSystemActive(v_sysCode        NUMBER) RETURN VARCHAR2 IS
    v_active    VARCHAR2(1) := 'N';
  BEGIN
    SELECT SYS_ACTIVE INTO v_active
    FROM TQC_SYSTEMS
    WHERE SYS_CODE = v_sysCode;
    
    RETURN v_active;
    
  EXCEPTION WHEN NO_DATA_FOUND THEN
    RETURN v_active;
   WHEN OTHERS THEN
   RAISE_ERROR('Error Occured '||SQLERRM(SQLCODE));
  END;  
END TQC_PORTAL_CURSOR030215; 
/