package TurnQuest.view.client;

import TurnQuest.view.Base.ADFUtils;
import TurnQuest.view.Base.ChannelManager;
import TurnQuest.view.Base.GlobalCC;
import TurnQuest.view.Base.Rendering;
import TurnQuest.view.Base.Util;
import TurnQuest.view.Connect.Authorization;
import TurnQuest.view.Connect.DBConnector;
import TurnQuest.view.dao.EcmHelper;
import TurnQuest.view.models.UserSystem;
import TurnQuest.view.utilities.CSVtoADFTableProcessor;
import TurnQuest.view.utilities.ParameterFinder;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.math.BigDecimal;
import java.net.FileNameMap;
import java.net.URLConnection;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.faces.application.FacesMessage;
import javax.faces.component.UIComponent;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;
import javax.faces.validator.ValidatorException;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import oracle.adf.model.binding.DCIteratorBinding;
import oracle.adf.view.rich.component.rich.RichDialog;
import oracle.adf.view.rich.component.rich.RichPopup;
import oracle.adf.view.rich.component.rich.data.RichTable;
import oracle.adf.view.rich.component.rich.data.RichTree;
import oracle.adf.view.rich.component.rich.input.RichInputDate;
import oracle.adf.view.rich.component.rich.input.RichInputFile;
import oracle.adf.view.rich.component.rich.input.RichInputNumberSpinbox;
import oracle.adf.view.rich.component.rich.input.RichInputText;
import oracle.adf.view.rich.component.rich.input.RichSelectBooleanCheckbox;
import oracle.adf.view.rich.component.rich.input.RichSelectBooleanRadio;
import oracle.adf.view.rich.component.rich.input.RichSelectItem;
import oracle.adf.view.rich.component.rich.input.RichSelectOneChoice;
import oracle.adf.view.rich.component.rich.layout.RichPanelBox;
import oracle.adf.view.rich.component.rich.layout.RichPanelFormLayout;
import oracle.adf.view.rich.component.rich.layout.RichPanelGroupLayout;
import oracle.adf.view.rich.component.rich.layout.RichPanelLabelAndMessage;
import oracle.adf.view.rich.component.rich.layout.RichPanelTabbed;
import oracle.adf.view.rich.component.rich.layout.RichShowDetailItem;
import oracle.adf.view.rich.component.rich.nav.RichCommandButton;
import oracle.adf.view.rich.component.rich.output.RichImage;
import oracle.adf.view.rich.component.rich.output.RichOutputLabel;
import oracle.adf.view.rich.component.rich.output.RichOutputText;
import oracle.adf.view.rich.component.rich.output.RichPanelCollection;
import oracle.adf.view.rich.context.AdfFacesContext;
import oracle.adf.view.rich.event.DialogEvent;
import oracle.adf.view.rich.event.DialogEvent.Outcome;
import oracle.jbo.Row;
import oracle.jbo.uicli.binding.JUCtrlHierNodeBinding;
import oracle.jbo.uicli.binding.JUCtrlValueBinding;
import oracle.jdbc.OracleCallableStatement;
import oracle.jdbc.OracleConnection;
import oracle.jdbc.OracleResultSet;
import oracle.sql.ARRAY;
import oracle.sql.ArrayDescriptor;
import org.apache.chemistry.opencmis.client.api.Document;
import org.apache.chemistry.opencmis.client.api.Session;
import org.apache.chemistry.opencmis.commons.data.ContentStream;
import org.apache.commons.dbutils.DbUtils;
import org.apache.myfaces.trinidad.event.SelectionEvent;
import org.apache.myfaces.trinidad.model.RowKeySet;
import org.apache.myfaces.trinidad.model.RowKeySetImpl;
import org.apache.myfaces.trinidad.model.UploadedFile;
import org.apache.myfaces.trinidad.render.ExtendedRenderKitService;
import org.apache.myfaces.trinidad.util.Service;

public class BaseClientBacking
{
  HttpSession session;
  Rendering renderer;
  private RichTable tblClients;
  private RichPanelBox panelCreateClient;
  private RichSelectBooleanRadio sbrIndividual;
  private RichSelectBooleanRadio sbrCorporate;
  private RichInputDate txtDateCreated;
  private RichInputText txtCreatedBy;
  private RichSelectOneChoice txtDirectClient;
  private RichInputText txtAccountNum;
  private RichInputText txtId;
  private RichSelectOneChoice txtTitle;
  private RichInputText txtSurname;
  private RichInputText txtOtherNames;
  private RichInputText txtPhysicalAddress;
  private RichInputText txtPostalAddress;
  private RichInputText txtCountryCode;
  private RichInputText txtCountryName;
  private RichInputText txtTownCode;
  private RichInputText txtTownName;
  private RichInputDate txtDOB;
  private RichInputText txtBankAccNum;
  private RichInputText txtPIN;
  private RichInputText txtIdRegNum;
  private RichInputText txtEmail;
  private RichInputText txtPhone1;
  private RichInputText txtSms;
  private RichInputText txtFax;
  private RichSelectOneChoice txtProposer;
  private RichInputDate txtWef;
  private RichInputDate txtWet;
  private RichInputText txtRemarks;
  private RichInputText txtWithdrawalReason;
  private RichSelectOneChoice txtStatus;
  private RichSelectOneChoice txtRunOff;
  private RichSelectOneChoice txtSpecialTerms;
  private RichSelectOneChoice txtCancelledPolicy;
  private RichSelectOneChoice txtIncreasePremium;
  private RichSelectOneChoice txtDeclinedProposal;
  private RichInputText txtBranchCode;
  private RichInputText txtBranchName;
  private RichInputText txtDivisionCode;
  private RichInputText txtDivisionName;
  private RichInputText txtAccountManager;
  private RichInputText txtSectorCode;
  private RichInputText txtSectorName;
  private RichInputText txtDomicileCountriesCode;
  private RichInputText txtDomicileCountriesName;
  private RichTable tblCountryPop;
  private RichTable tblTownPop;
  private RichInputText txtClientCode;
  private RichInputText contactName1;
  private RichInputText contactPhone1;
  private RichInputText contactEmail1;
  private RichInputText contactName2;
  private RichInputText contactPhone2;
  private RichInputText contactEmail2;
  private RichCommandButton btnShowContactPersons;
  private RichInputText txtContactName1;
  private RichInputText txtContactPhone1;
  private RichInputText txtContactEmail1;
  private RichInputText txtContactName2;
  private RichInputText txtContactPhone2;
  private RichInputText txtContactEmail2;
  private RichTable tblSectorPop;
  private RichTable tblDomicileCountryPop;
  private RichTable tblAccountManagersPop;
  private RichInputText txtAccountManagerCode;
  private RichTable tblBankBranchPop;
  private RichTable tblBranchDivisionPop;
  private RichCommandButton btnCreateUpdateClient;
  private RichInputText txtAccUsername;
  private RichInputText txtAccFullNames;
  private RichInputText txtAccPassword;
  private RichInputText txtAccPersonelRank;
  private RichSelectOneChoice txtAccStatus;
  private RichSelectOneChoice txtAccAllowLogin;
  private RichInputText txtAccEmail;
  private RichInputText txtAccCode;
  private RichCommandButton btnSaveUpdateWebAccount;
  private RichTable tblwebAccounts;
  private RichPanelBox panelClientSystems;
  private RichTree treeAssignedClientSystems;
  private RichTree treeUnassignedClientSystems;
  private RichPanelBox panelDetailSystems;
  private RichInputText txtSelectedClientSystemCode;
  private RichCommandButton btnAddClientSystem;
  private RichCommandButton btnRemoveClientSystem;
  private RichTable tblRequiredDocs;
  private RichShowDetailItem tabDetailCreateClient;
  private RichShowDetailItem tabDetailSearchClients;
  private RichShowDetailItem tabClientInfo;
  private RichShowDetailItem tabClientSystems;
  private RichShowDetailItem tabClientWebAccounts;
  private RichShowDetailItem tabClientDocs;
  private RichPanelBox mainPanel;
  private RichCommandButton btnSaveRequiredDoc;
  private RichInputText txtDocCodePop;
  private RichInputText txtReqDocCodePop;
  private RichInputText txtReqDocNamePop;
  private RichInputText txtDocClientCodePop;
  private RichSelectOneChoice txtDocSubmittedPop;
  private RichInputDate txtDocDateSubmittedPop;
  private RichInputText txtDocRefNumPop;
  private RichInputText txtDocRemarkPop;
  private RichInputText txtDocUserReceivedPop;
  private RichTable tblReqDocsList;
  private RichPopup confirmationDialog;
  private RichOutputLabel clientCodeValue;
  private RichOutputLabel olConfirmMsgValue;
  private RichOutputText textToShow;
  private RichInputText txtClientTitle;
  private RichTable tblClientTitles;
  private RichInputText txtClientTitleCode;
  private RichInputText hiddenClientCode;
  private RichTable tblClientAccounts;
  private RichInputText txtAccountCode;
  private RichInputText txtAccShortDesc;
  private RichInputText txtAccName;
  private RichInputText txtAccClientCode;
  private RichInputText txtAccCreatedBy;
  private RichInputDate txtAccDateCreated;
  private RichSelectOneChoice txtClientAccStatus;
  private RichInputText txtAccRemarks;
  private RichInputDate txtAccWef;
  private RichInputDate txtAccWet;
  private RichCommandButton btnSaveUpdateClientAccount;
  private RichInputText txtPassportNo;
  private RichInputText txtBrnDivName;
  private RichTable brnDivLov;
  private RichInputText txtStateCode;
  private RichInputText txtStateName;
  private RichTable tblStates;
  private RichPanelLabelAndMessage clientTitlePan;
  private RichSelectBooleanRadio genAcSelectYes;
  private RichSelectBooleanRadio genAccNoSelect;
  private RichOutputLabel confirmDeleteAccMsg;
  private RichTable tbClientListingBasedOnNames;
  private RichDialog confirmSaveDialog;
  private RichCommandButton btnAuthorizeClient;
  private RichSelectItem selectStatusDraft;
  private RichSelectItem selectStatusInactive;
  private RichSelectItem selectStatusRejected;
  private RichSelectItem selectStatusActive;
  private RichCommandButton btnRejectClient;
  private RichImage clientImage;
  private RichInputFile uploadComponent;
  private RichInputFile uploadPhoto;
  private RichImage clientSignature;
  private RichImage clientPhoto;
  private RichInputFile uploadedPicture;
  private RichInputFile uploadSignature;
  private RichInputText txtWebsite;
  private RichInputText txtAuditors;
  private RichInputText txtDLNo;
  private RichInputDate txtDateOfEmployment;
  private RichInputText txtInsurer;
  private RichInputText txtParentCompany;
  private RichInputText txtProjectedBusiness;
  private BigDecimal clnt_code;
  private RichCommandButton addAgencyDirectors;
  private RichCommandButton editAgencyDirectors;
  private RichCommandButton deleteAgencyDirectors;
  private RichInputText agencyDirectorId;
  private RichInputDate directYr;
  private RichInputText directQualifications;
  private RichInputNumberSpinbox directshare;
  private RichCommandButton saveAgDirectorsAction;
  private RichShowDetailItem tabDirectors;
  private RichInputText directname;
  private RichCommandButton saveAgDirectorButton;
  private RichTable agentDirectorsTable;
  private RichShowDetailItem tabAuditors;
  private RichCommandButton addAgencyAuditors;
  private RichCommandButton editAgencyAuditors;
  private RichCommandButton deleteAgencyAuditors;
  private RichInputText agencyAuditorId;
  private RichCommandButton saveAgAuditorButton;
  private RichInputText directAuditorQualification;
  private RichInputText auditName;
  private RichInputText auditYr;
  private RichInputText auditYear;
  private RichInputDate auditYER;
  private RichInputText auditorTelephone;
  private RichTable agentAuditorsTable;
  private RichCommandButton addClientAuditors;
  private RichInputText txtParentCompanyCode;
  private RichPanelLabelAndMessage parentcompanyPan;
  private RichPopup tbParentCompanyPop;
  private RichTable tableParentComp;
  private RichInputNumberSpinbox txtProjectedBiz;
  private RichInputText txtRegBranchName;
  private RichInputText txtRegBranchCode;
  private RichCommandButton tblBranches;
  private RichTable tblRegBranches;
  private RichCommandButton btnAcceptBranch;
  private RichPopup branchPop;
  private RichInputText txtGrpName;
  private RichInputNumberSpinbox txtGrpMinimum;
  private RichInputNumberSpinbox txtGrpMax;
  private RichCommandButton btnsaveGrp;
  private RichInputText txtGrpCode;
  private RichTable tblClientGroup;
  private RichTable tblClientGrpMembers;
  private RichTable tblClientPop;
  private RichCommandButton btnRemoveClientFromGroup;
  private RichCommandButton btnActionEditGroupClient;
  private RichCommandButton btnActionDeleteGroupClient;
  private RichSelectOneChoice searchCriteria;
  private RichInputText txtSearchSectorName;
  private RichSelectBooleanCheckbox columnSelect;
  private RichInputText txtSearchSector;
  private RichInputText txtSrchSectorName;
  private RichInputText txtAccountOfficerCode;
  private RichInputText txtAccountOfficerName;
  private RichTable tblAccountOfficer;
  private RichPanelGroupLayout laySignature;
  private RichPanelGroupLayout layClientImage;
  private InputStream inputstream;
  private RichCommandButton btnDeleteClient;
  private RichPanelGroupLayout searchFormHolder;
  private RichPanelFormLayout SEARCHHOLDER;
  private RichPanelLabelAndMessage statusHolder;
  private RichPanelLabelAndMessage searchClientType;
  private RichShowDetailItem tabClientAccounts;
  private RichPanelTabbed clientTab;
  private RichPanelCollection panelCollSearch;
  private RichSelectOneChoice txtGender;
  private UploadedFile pictureFile;
  private UploadedFile signatureFile;
  private static InputStream fileStream;
  private String filename;
  private long filesize;
  private static String fileContent;
  private String filetype;
  private static InputStream fileStream2;
  private String filename2;
  private long filesize2;
  private static String fileContent2;
  private String filetype2;
  private RichInputText txtClientCellNos;
  private RichInputText txtCltBankTelNo;
  private RichInputText txtCltBankCellNo;
  private RichInputText txtCltEmployerTelNo;
  private RichInputText txtCltEmployerCellNo;
  private RichPanelGroupLayout grpEmploymentDetails;
  private RichInputText txtCltOccupation;
  private HtmlPanelGrid pgridPersonnalDetails;
  private RichShowDetailItem detailEmploymentDetails;
  private RichTable tblAdminRegions;
  private RichPanelLabelAndMessage panMsgRegionTypeName;
  private RichDialog dlgAdminRegionTypes;
  private RichInputText txtAdminRegionType;
  private RichInputText txtAdminRegionName;
  private RichInputText txtAdminRegionCode;
  private RichPanelLabelAndMessage pnMsgTownName;
  private RichDialog dlgNewEditAdminUnit;
  private RichPanelLabelAndMessage lbMsgState;
  private RichInputText txtAgencyName;
  private RichInputText txtAgencyCode;
  private RichTable tblAgenciesLOV;
  private RichPanelLabelAndMessage pnLabelAgency;
  private RichTable clntContacts;
  private RichInputText conCode;
  private RichInputText conName;
  private RichInputText conAddress;
  private RichInputText conPhysi;
  private RichInputText conSect;
  private RichTable sector;
  private RichInputText legacyShtDesc;
  private RichInputText txtZipCode;
  private RichInputDate txtAnniversary;
  private RichSelectOneChoice txtCreditRting;
  private RichInputText txtHoldingCompany;
  private RichTable holdingCompanyTbl;
  private RichSelectOneChoice txtClientCategory;
  private UISelectItems clientSelected;
  private RichSelectItem selectClientSelected;
  private RichSelectOneChoice txtClientTypes;
  private RichInputText txtDrvExperience;
  private RichPanelLabelAndMessage txtHoldingCompanyCont;
  private RichCommandButton txtCommandBtn;
  private RichSelectOneChoice txtSacco;
  private RichCommandButton txtSelectClientTitle;
  private RichDialog comfirmContinue;
  private RichInputText txtReasonForUpdate;
  private RichInputText webClientName;
  private RichInputText webClientShtDesc;
  private RichCommandButton saveShtDesc;
  private RichCommandButton addClientBranches;
  private RichCommandButton editClientBranches;
  private RichCommandButton deleteClientBranches;
  private RichTable clientBranch;
  private RichTable unAssignedBank;
  private RichSelectBooleanCheckbox unAssigned;
  private RichTable assignedBank;
  private RichSelectBooleanCheckbox assignedCheck;
  private RichInputText txtDefaultBranch;
  private RichTable defaultBranch;
  private RichInputNumberSpinbox txtDebitLimit;
  private RichInputNumberSpinbox txtCrLimits;
  private RichInputText txtWebProduct;
  private RichInputText txtUserName;
  private RichTable webProductTbl;
  private RichTable tblUser;
  private RichSelectBooleanCheckbox txtPolicyCheck;
  private RichSelectBooleanCheckbox txtEndorsCheck;
  private RichTable webProductsDetails;
  private RichCommandButton txtAgencies;
  private RichTable smsTbl;
  private RichTable emailTbl;
  private RichSelectOneChoice txtPrefix;
  private RichInputText txtClientAccount;
  private RichTable clientAccountTbl;
  private RichTable marketerTbl;
  private RichPanelLabelAndMessage labelAndMessage;
  private RichCommandButton relationShipPop;
  private RichInputText txtPrefixManager;
  private RichCommandButton prefixPop;
  private RichTable prefixTbl;
  private RichPanelFormLayout panelBinding;
  private RichSelectOneChoice txtCreditAllowed;
  private RichInputNumberSpinbox txtCreditLimit;
  private RichInputText txtNationality;
  private RichInputText txtSurburbs;
  private RichPanelLabelAndMessage txtSurburbsLbl;
  private RichTable locationTbl;
  private RichInputText txtSector;
  private RichInputText txtSmsPrefix;
  private RichSelectOneChoice txtBouncedCheque;
  private RichSelectOneChoice txtMaritalStatus;
  private RichSelectOneChoice txtModeOfComm;
  private RichInputText txtPayroll;
  private RichInputNumberSpinbox txtMinSalary;
  private RichInputNumberSpinbox txtMaxSalary;
  private RichSelectOneChoice txtType;
  private RichInputText txtBussinessPerson;
  private RichTable bussinesPersonTbl;
  private RichTable occupationTbl;
  private RichDialog confirmPin;
  private RichInputDate txtDlIssueDate;
  private RichInputText txtWorkPermit;
  private RichInputFile upFile;
  private UploadedFile uploadedFile;
  private RichTable docTbl;
  private RichTable debtor;
  private RichTable prefixTbl2;
  private RichInputText txtTelPayPrefix;
  private RichInputText txtPayTel;
  private List<SelectItem> clientType;
  private UploadedFile UploadedImageFile;

  public BaseClientBacking()
  {
    this.session = ((HttpSession)FacesContext.getCurrentInstance().getExternalContext().getSession(false));
    this.renderer = new Rendering();

    this.inputstream = null;

    this.clientType = new ArrayList();
  }

  public void setMainPanel(RichPanelBox mainPanel)
  {
    this.mainPanel = mainPanel;
  }

  public RichPanelBox getMainPanel()
  {
    return this.mainPanel;
  }

  public void setBtnSaveRequiredDoc(RichCommandButton btnSaveRequiredDoc)
  {
    this.btnSaveRequiredDoc = btnSaveRequiredDoc;
  }

  public RichCommandButton getBtnSaveRequiredDoc()
  {
    return this.btnSaveRequiredDoc;
  }

  public void setTxtDocCodePop(RichInputText txtDocCodePop)
  {
    this.txtDocCodePop = txtDocCodePop;
  }

  public RichInputText getTxtDocCodePop()
  {
    return this.txtDocCodePop;
  }

  public void setTxtReqDocCodePop(RichInputText txtReqDocCodePop)
  {
    this.txtReqDocCodePop = txtReqDocCodePop;
  }

  public RichInputText getTxtReqDocCodePop()
  {
    return this.txtReqDocCodePop;
  }

  public void setTxtReqDocNamePop(RichInputText txtReqDocNamePop)
  {
    this.txtReqDocNamePop = txtReqDocNamePop;
  }

  public RichInputText getTxtReqDocNamePop()
  {
    return this.txtReqDocNamePop;
  }

  public void setTxtDocClientCodePop(RichInputText txtDocClientCodePop)
  {
    this.txtDocClientCodePop = txtDocClientCodePop;
  }

  public RichInputText getTxtDocClientCodePop()
  {
    return this.txtDocClientCodePop;
  }

  public void setTxtDocSubmittedPop(RichSelectOneChoice txtDocSubmittedPop)
  {
    this.txtDocSubmittedPop = txtDocSubmittedPop;
  }

  public RichSelectOneChoice getTxtDocSubmittedPop()
  {
    return this.txtDocSubmittedPop;
  }

  public void setTxtDocDateSubmittedPop(RichInputDate txtDocDateSubmittedPop)
  {
    this.txtDocDateSubmittedPop = txtDocDateSubmittedPop;
  }

  public RichInputDate getTxtDocDateSubmittedPop()
  {
    return this.txtDocDateSubmittedPop;
  }

  public void setTxtDocRefNumPop(RichInputText txtDocRefNumPop)
  {
    this.txtDocRefNumPop = txtDocRefNumPop;
  }

  public RichInputText getTxtDocRefNumPop()
  {
    return this.txtDocRefNumPop;
  }

  public void setTxtDocRemarkPop(RichInputText txtDocRemarkPop)
  {
    this.txtDocRemarkPop = txtDocRemarkPop;
  }

  public RichInputText getTxtDocRemarkPop()
  {
    return this.txtDocRemarkPop;
  }

  public void setTxtDocUserReceivedPop(RichInputText txtDocUserReceivedPop)
  {
    this.txtDocUserReceivedPop = txtDocUserReceivedPop;
  }

  public RichInputText getTxtDocUserReceivedPop()
  {
    return this.txtDocUserReceivedPop;
  }

  public void setTblClients(RichTable tblClients)
  {
    this.tblClients = tblClients;
  }

  public RichTable getTblClients()
  {
    return this.tblClients;
  }

  public void setPanelCreateClient(RichPanelBox panelCreateClient)
  {
    this.panelCreateClient = panelCreateClient;
  }

  public RichPanelBox getPanelCreateClient()
  {
    return this.panelCreateClient;
  }

  public void setSbrIndividual(RichSelectBooleanRadio sbrIndividual)
  {
    this.sbrIndividual = sbrIndividual;
  }

  public RichSelectBooleanRadio getSbrIndividual()
  {
    return this.sbrIndividual;
  }

  public void setSbrCorporate(RichSelectBooleanRadio sbrCorporate)
  {
    this.sbrCorporate = sbrCorporate;
  }

  public RichSelectBooleanRadio getSbrCorporate()
  {
    return this.sbrCorporate;
  }

  public void setTxtDateCreated(RichInputDate txtDateCreated)
  {
    this.txtDateCreated = txtDateCreated;
  }

  public RichInputDate getTxtDateCreated()
  {
    return this.txtDateCreated;
  }

  public void setTxtCreatedBy(RichInputText txtCreatedBy)
  {
    this.txtCreatedBy = txtCreatedBy;
  }

  public RichInputText getTxtCreatedBy()
  {
    return this.txtCreatedBy;
  }

  public void setTxtDirectClient(RichSelectOneChoice txtDirectClient)
  {
    this.txtDirectClient = txtDirectClient;
  }

  public RichSelectOneChoice getTxtDirectClient()
  {
    return this.txtDirectClient;
  }

  public void setTxtAccountNum(RichInputText txtAccountNum)
  {
    this.txtAccountNum = txtAccountNum;
  }

  public RichInputText getTxtAccountNum()
  {
    return this.txtAccountNum;
  }

  public void setTxtId(RichInputText txtId)
  {
    this.txtId = txtId;
  }

  public RichInputText getTxtId()
  {
    return this.txtId;
  }

  public void setTxtTitle(RichSelectOneChoice txtTitle)
  {
    this.txtTitle = txtTitle;
  }

  public RichSelectOneChoice getTxtTitle()
  {
    return this.txtTitle;
  }

  public void setTxtSurname(RichInputText txtSurname)
  {
    this.txtSurname = txtSurname;
  }

  public RichInputText getTxtSurname()
  {
    return this.txtSurname;
  }

  public void setTxtOtherNames(RichInputText txtOtherNames)
  {
    this.txtOtherNames = txtOtherNames;
  }

  public RichInputText getTxtOtherNames()
  {
    return this.txtOtherNames;
  }

  public void setTxtPhysicalAddress(RichInputText txtPhysicalAddress)
  {
    this.txtPhysicalAddress = txtPhysicalAddress;
  }

  public RichInputText getTxtPhysicalAddress()
  {
    return this.txtPhysicalAddress;
  }

  public void setTxtPostalAddress(RichInputText txtPostalAddress)
  {
    this.txtPostalAddress = txtPostalAddress;
  }

  public RichInputText getTxtPostalAddress()
  {
    return this.txtPostalAddress;
  }

  public void setTxtCountryCode(RichInputText txtCountryCode)
  {
    this.txtCountryCode = txtCountryCode;
  }

  public RichInputText getTxtCountryCode()
  {
    return this.txtCountryCode;
  }

  public void setTxtCountryName(RichInputText txtCountryName)
  {
    this.txtCountryName = txtCountryName;
  }

  public RichInputText getTxtCountryName()
  {
    return this.txtCountryName;
  }

  public void setTxtTownCode(RichInputText txtTownCode)
  {
    this.txtTownCode = txtTownCode;
  }

  public RichInputText getTxtTownCode()
  {
    return this.txtTownCode;
  }

  public void setTxtTownName(RichInputText txtTownName)
  {
    this.txtTownName = txtTownName;
  }

  public RichInputText getTxtTownName()
  {
    return this.txtTownName;
  }

  public void setTxtDOB(RichInputDate txtDOB)
  {
    this.txtDOB = txtDOB;
  }

  public RichInputDate getTxtDOB()
  {
    return this.txtDOB;
  }

  public void setTxtBankAccNum(RichInputText txtBankAccNum)
  {
    this.txtBankAccNum = txtBankAccNum;
  }

  public RichInputText getTxtBankAccNum()
  {
    return this.txtBankAccNum;
  }

  public void setTxtPIN(RichInputText txtPIN)
  {
    this.txtPIN = txtPIN;
  }

  public RichInputText getTxtPIN()
  {
    return this.txtPIN;
  }

  public void setTxtIdRegNum(RichInputText txtIdRegNum)
  {
    this.txtIdRegNum = txtIdRegNum;
  }

  public RichInputText getTxtIdRegNum()
  {
    return this.txtIdRegNum;
  }

  public void setTxtEmail(RichInputText txtEmail)
  {
    this.txtEmail = txtEmail;
  }

  public RichInputText getTxtEmail()
  {
    return this.txtEmail;
  }

  public void setTxtPhone1(RichInputText txtPhone1)
  {
    this.txtPhone1 = txtPhone1;
  }

  public RichInputText getTxtPhone1()
  {
    return this.txtPhone1;
  }

  public void setTxtSms(RichInputText txtSms)
  {
    this.txtSms = txtSms;
  }

  public RichInputText getTxtSms()
  {
    return this.txtSms;
  }

  public void setTxtFax(RichInputText txtFax)
  {
    this.txtFax = txtFax;
  }

  public RichInputText getTxtFax()
  {
    return this.txtFax;
  }

  public void setTxtProposer(RichSelectOneChoice txtProposer)
  {
    this.txtProposer = txtProposer;
  }

  public RichSelectOneChoice getTxtProposer()
  {
    return this.txtProposer;
  }

  public void setTxtWef(RichInputDate txtWef)
  {
    this.txtWef = txtWef;
  }

  public RichInputDate getTxtWef()
  {
    return this.txtWef;
  }

  public void setTxtWet(RichInputDate txtWet)
  {
    this.txtWet = txtWet;
  }

  public RichInputDate getTxtWet()
  {
    return this.txtWet;
  }

  public void setTxtRemarks(RichInputText txtRemarks)
  {
    this.txtRemarks = txtRemarks;
  }

  public RichInputText getTxtRemarks()
  {
    return this.txtRemarks;
  }

  public void setTxtWithdrawalReason(RichInputText txtWithdrawalReason)
  {
    this.txtWithdrawalReason = txtWithdrawalReason;
  }

  public RichInputText getTxtWithdrawalReason()
  {
    return this.txtWithdrawalReason;
  }

  public void setTxtStatus(RichSelectOneChoice txtStatus)
  {
    this.txtStatus = txtStatus;
  }

  public RichSelectOneChoice getTxtStatus()
  {
    return this.txtStatus;
  }

  public void setTxtRunOff(RichSelectOneChoice txtRunOff)
  {
    this.txtRunOff = txtRunOff;
  }

  public RichSelectOneChoice getTxtRunOff()
  {
    return this.txtRunOff;
  }

  public void setTxtSpecialTerms(RichSelectOneChoice txtSpecialTerms)
  {
    this.txtSpecialTerms = txtSpecialTerms;
  }

  public RichSelectOneChoice getTxtSpecialTerms()
  {
    return this.txtSpecialTerms;
  }

  public void setTxtCancelledPolicy(RichSelectOneChoice txtCancelledPolicy)
  {
    this.txtCancelledPolicy = txtCancelledPolicy;
  }

  public RichSelectOneChoice getTxtCancelledPolicy()
  {
    return this.txtCancelledPolicy;
  }

  public void setTxtIncreasePremium(RichSelectOneChoice txtIncreasePremium)
  {
    this.txtIncreasePremium = txtIncreasePremium;
  }

  public RichSelectOneChoice getTxtIncreasePremium()
  {
    return this.txtIncreasePremium;
  }

  public void setTxtDeclinedProposal(RichSelectOneChoice txtDeclinedProposal)
  {
    this.txtDeclinedProposal = txtDeclinedProposal;
  }

  public RichSelectOneChoice getTxtDeclinedProposal()
  {
    return this.txtDeclinedProposal;
  }

  public void setTxtBranchCode(RichInputText txtBranchCode)
  {
    this.txtBranchCode = txtBranchCode;
  }

  public RichInputText getTxtBranchCode()
  {
    return this.txtBranchCode;
  }

  public void setTxtBranchName(RichInputText txtBranchName)
  {
    this.txtBranchName = txtBranchName;
  }

  public RichInputText getTxtBranchName()
  {
    return this.txtBranchName;
  }

  public void setTxtDivisionCode(RichInputText txtDivisionCode)
  {
    this.txtDivisionCode = txtDivisionCode;
  }

  public RichInputText getTxtDivisionCode()
  {
    return this.txtDivisionCode;
  }

  public void setTxtDivisionName(RichInputText txtDivisionName)
  {
    this.txtDivisionName = txtDivisionName;
  }

  public RichInputText getTxtDivisionName()
  {
    return this.txtDivisionName;
  }

  public void setTxtAccountManager(RichInputText txtAccountManager)
  {
    this.txtAccountManager = txtAccountManager;
  }

  public RichInputText getTxtAccountManager()
  {
    return this.txtAccountManager;
  }

  public void setTxtSectorCode(RichInputText txtSectorCode)
  {
    this.txtSectorCode = txtSectorCode;
  }

  public RichInputText getTxtSectorCode()
  {
    return this.txtSectorCode;
  }

  public void setTxtSectorName(RichInputText txtSectorName)
  {
    this.txtSectorName = txtSectorName;
  }

  public RichInputText getTxtSectorName()
  {
    return this.txtSectorName;
  }

  public void setTxtDomicileCountriesCode(RichInputText txtDomicileCountriesCode)
  {
    this.txtDomicileCountriesCode = txtDomicileCountriesCode;
  }

  public RichInputText getTxtDomicileCountriesCode()
  {
    return this.txtDomicileCountriesCode;
  }

  public void setTxtDomicileCountriesName(RichInputText txtDomicileCountriesName)
  {
    this.txtDomicileCountriesName = txtDomicileCountriesName;
  }

  public RichInputText getTxtDomicileCountriesName()
  {
    return this.txtDomicileCountriesName;
  }

  public void setTblCountryPop(RichTable tblCountryPop)
  {
    this.tblCountryPop = tblCountryPop;
  }

  public RichTable getTblCountryPop()
  {
    return this.tblCountryPop;
  }

  public void setTblTownPop(RichTable tblTownPop)
  {
    this.tblTownPop = tblTownPop;
  }

  public RichTable getTblTownPop()
  {
    return this.tblTownPop;
  }

  public void setTxtClientCode(RichInputText txtClientCode)
  {
    this.txtClientCode = txtClientCode;
  }

  public RichInputText getTxtClientCode()
  {
    return this.txtClientCode;
  }

  public void setContactName1(RichInputText contactName1)
  {
    this.contactName1 = contactName1;
  }

  public RichInputText getContactName1()
  {
    return this.contactName1;
  }

  public void setContactPhone1(RichInputText contactPhone1)
  {
    this.contactPhone1 = contactPhone1;
  }

  public RichInputText getContactPhone1()
  {
    return this.contactPhone1;
  }

  public void setContactEmail1(RichInputText contactEmail1)
  {
    this.contactEmail1 = contactEmail1;
  }

  public RichInputText getContactEmail1()
  {
    return this.contactEmail1;
  }

  public void setContactName2(RichInputText contactName2)
  {
    this.contactName2 = contactName2;
  }

  public RichInputText getContactName2()
  {
    return this.contactName2;
  }

  public void setContactPhone2(RichInputText contactPhone2)
  {
    this.contactPhone2 = contactPhone2;
  }

  public RichInputText getContactPhone2()
  {
    return this.contactPhone2;
  }

  public void setContactEmail2(RichInputText contactEmail2)
  {
    this.contactEmail2 = contactEmail2;
  }

  public RichInputText getContactEmail2()
  {
    return this.contactEmail2;
  }

  public void setBtnShowContactPersons(RichCommandButton btnShowContactPersons)
  {
    this.btnShowContactPersons = btnShowContactPersons;
  }

  public RichCommandButton getBtnShowContactPersons()
  {
    return this.btnShowContactPersons;
  }

  public void setTxtContactName1(RichInputText txtContactName1)
  {
    this.txtContactName1 = txtContactName1;
  }

  public RichInputText getTxtContactName1()
  {
    return this.txtContactName1;
  }

  public void setTxtContactPhone1(RichInputText txtContactPhone1)
  {
    this.txtContactPhone1 = txtContactPhone1;
  }

  public RichInputText getTxtContactPhone1()
  {
    return this.txtContactPhone1;
  }

  public void setTxtContactEmail1(RichInputText txtContactEmail1)
  {
    this.txtContactEmail1 = txtContactEmail1;
  }

  public RichInputText getTxtContactEmail1()
  {
    return this.txtContactEmail1;
  }

  public void setTxtContactName2(RichInputText txtContactName2)
  {
    this.txtContactName2 = txtContactName2;
  }

  public RichInputText getTxtContactName2()
  {
    return this.txtContactName2;
  }

  public void setTxtContactPhone2(RichInputText txtContactPhone2)
  {
    this.txtContactPhone2 = txtContactPhone2;
  }

  public RichInputText getTxtContactPhone2()
  {
    return this.txtContactPhone2;
  }

  public void setTxtContactEmail2(RichInputText txtContactEmail2)
  {
    this.txtContactEmail2 = txtContactEmail2;
  }

  public RichInputText getTxtContactEmail2()
  {
    return this.txtContactEmail2;
  }

  public void setTblSectorPop(RichTable tblSectorPop)
  {
    this.tblSectorPop = tblSectorPop;
  }

  public RichTable getTblSectorPop()
  {
    return this.tblSectorPop;
  }

  public void setTblDomicileCountryPop(RichTable tblDomicileCountryPop)
  {
    this.tblDomicileCountryPop = tblDomicileCountryPop;
  }

  public RichTable getTblDomicileCountryPop()
  {
    return this.tblDomicileCountryPop;
  }

  public void setTblAccountManagersPop(RichTable tblAccountManagersPop)
  {
    this.tblAccountManagersPop = tblAccountManagersPop;
  }

  public RichTable getTblAccountManagersPop()
  {
    return this.tblAccountManagersPop;
  }

  public void setTxtAccountManagerCode(RichInputText txtAccountManagerCode)
  {
    this.txtAccountManagerCode = txtAccountManagerCode;
  }

  public RichInputText getTxtAccountManagerCode()
  {
    return this.txtAccountManagerCode;
  }

  public void setTblBankBranchPop(RichTable tblBankBranchPop)
  {
    this.tblBankBranchPop = tblBankBranchPop;
  }

  public RichTable getTblBankBranchPop()
  {
    return this.tblBankBranchPop;
  }

  public void setTblBranchDivisionPop(RichTable tblBranchDivisionPop)
  {
    this.tblBranchDivisionPop = tblBranchDivisionPop;
  }

  public RichTable getTblBranchDivisionPop()
  {
    return this.tblBranchDivisionPop;
  }

  public void setBtnCreateUpdateClient(RichCommandButton btnCreateUpdateClient)
  {
    this.btnCreateUpdateClient = btnCreateUpdateClient;
  }

  public RichCommandButton getBtnCreateUpdateClient()
  {
    return this.btnCreateUpdateClient;
  }

  public void setTxtAccUsername(RichInputText txtAccUsername)
  {
    this.txtAccUsername = txtAccUsername;
  }

  public RichInputText getTxtAccUsername()
  {
    return this.txtAccUsername;
  }

  public void setTxtAccFullNames(RichInputText txtAccFullNames)
  {
    this.txtAccFullNames = txtAccFullNames;
  }

  public RichInputText getTxtAccFullNames()
  {
    return this.txtAccFullNames;
  }

  public void setTxtAccPassword(RichInputText txtAccPassword)
  {
    this.txtAccPassword = txtAccPassword;
  }

  public RichInputText getTxtAccPassword()
  {
    return this.txtAccPassword;
  }

  public void setTxtAccPersonelRank(RichInputText txtAccPersonelRank)
  {
    this.txtAccPersonelRank = txtAccPersonelRank;
  }

  public RichInputText getTxtAccPersonelRank()
  {
    return this.txtAccPersonelRank;
  }

  public void setTxtAccStatus(RichSelectOneChoice txtAccStatus)
  {
    this.txtAccStatus = txtAccStatus;
  }

  public RichSelectOneChoice getTxtAccStatus()
  {
    return this.txtAccStatus;
  }

  public void setTxtAccAllowLogin(RichSelectOneChoice txtAccAllowLogin)
  {
    this.txtAccAllowLogin = txtAccAllowLogin;
  }

  public RichSelectOneChoice getTxtAccAllowLogin()
  {
    return this.txtAccAllowLogin;
  }

  public void setTxtAccEmail(RichInputText txtAccEmail)
  {
    this.txtAccEmail = txtAccEmail;
  }

  public RichInputText getTxtAccEmail()
  {
    return this.txtAccEmail;
  }

  public void setTxtAccCode(RichInputText txtAccCode)
  {
    this.txtAccCode = txtAccCode;
  }

  public RichInputText getTxtAccCode()
  {
    return this.txtAccCode;
  }

  public void setBtnSaveUpdateWebAccount(RichCommandButton btnSaveUpdateWebAccount)
  {
    this.btnSaveUpdateWebAccount = btnSaveUpdateWebAccount;
  }

  public RichCommandButton getBtnSaveUpdateWebAccount()
  {
    return this.btnSaveUpdateWebAccount;
  }

  public void setTxtClientTitleCode(RichInputText txtClientTitleCode)
  {
    this.txtClientTitleCode = txtClientTitleCode;
  }

  public RichInputText getTxtClientTitleCode()
  {
    return this.txtClientTitleCode;
  }

  public void setHiddenClientCode(RichInputText hiddenClientCode)
  {
    this.hiddenClientCode = hiddenClientCode;
  }

  public RichInputText getHiddenClientCode()
  {
    return this.hiddenClientCode;
  }

  public void setTblClientAccounts(RichTable tblClientAccounts)
  {
    this.tblClientAccounts = tblClientAccounts;
  }

  public RichTable getTblClientAccounts()
  {
    return this.tblClientAccounts;
  }

  public void setTxtAccountCode(RichInputText txtAccountCode)
  {
    this.txtAccountCode = txtAccountCode;
  }

  public RichInputText getTxtAccountCode()
  {
    return this.txtAccountCode;
  }

  public void setTxtAccShortDesc(RichInputText txtAccShortDesc)
  {
    this.txtAccShortDesc = txtAccShortDesc;
  }

  public RichInputText getTxtAccShortDesc()
  {
    return this.txtAccShortDesc;
  }

  public void setTxtAccName(RichInputText txtAccName)
  {
    this.txtAccName = txtAccName;
  }

  public RichInputText getTxtAccName()
  {
    return this.txtAccName;
  }

  public void setTxtAccClientCode(RichInputText txtAccClientCode)
  {
    this.txtAccClientCode = txtAccClientCode;
  }

  public RichInputText getTxtAccClientCode()
  {
    return this.txtAccClientCode;
  }

  public void setTxtAccCreatedBy(RichInputText txtAccCreatedBy)
  {
    this.txtAccCreatedBy = txtAccCreatedBy;
  }

  public RichInputText getTxtAccCreatedBy()
  {
    return this.txtAccCreatedBy;
  }

  public void setTxtAccDateCreated(RichInputDate txtAccDateCreated)
  {
    this.txtAccDateCreated = txtAccDateCreated;
  }

  public RichInputDate getTxtAccDateCreated()
  {
    return this.txtAccDateCreated;
  }

  public void setTxtClientAccStatus(RichSelectOneChoice txtClientAccStatus)
  {
    this.txtClientAccStatus = txtClientAccStatus;
  }

  public RichSelectOneChoice getTxtClientAccStatus()
  {
    return this.txtClientAccStatus;
  }

  public void setTxtAccRemarks(RichInputText txtAccRemarks)
  {
    this.txtAccRemarks = txtAccRemarks;
  }

  public RichInputText getTxtAccRemarks()
  {
    return this.txtAccRemarks;
  }

  public void setTxtAccWef(RichInputDate txtAccWef)
  {
    this.txtAccWef = txtAccWef;
  }

  public RichInputDate getTxtAccWef()
  {
    return this.txtAccWef;
  }

  public void setTxtAccWet(RichInputDate txtAccWet)
  {
    this.txtAccWet = txtAccWet;
  }

  public RichInputDate getTxtAccWet()
  {
    return this.txtAccWet;
  }

  public void setBtnSaveUpdateClientAccount(RichCommandButton btnSaveUpdateClientAccount)
  {
    this.btnSaveUpdateClientAccount = btnSaveUpdateClientAccount;
  }

  public RichCommandButton getBtnSaveUpdateClientAccount()
  {
    return this.btnSaveUpdateClientAccount;
  }

  public void setPanelDetailSystems(RichPanelBox panelDetailSystems)
  {
    this.panelDetailSystems = panelDetailSystems;
  }

  public RichPanelBox getPanelDetailSystems()
  {
    return this.panelDetailSystems;
  }

  public void setTxtSelectedClientSystemCode(RichInputText txtSelectedClientSystemCode)
  {
    this.txtSelectedClientSystemCode = txtSelectedClientSystemCode;
  }

  public RichInputText getTxtSelectedClientSystemCode()
  {
    return this.txtSelectedClientSystemCode;
  }

  public void setBtnAddClientSystem(RichCommandButton btnAddClientSystem)
  {
    this.btnAddClientSystem = btnAddClientSystem;
  }

  public RichCommandButton getBtnAddClientSystem()
  {
    return this.btnAddClientSystem;
  }

  public void setBtnRemoveClientSystem(RichCommandButton btnRemoveClientSystem)
  {
    this.btnRemoveClientSystem = btnRemoveClientSystem;
  }

  public RichCommandButton getBtnRemoveClientSystem()
  {
    return this.btnRemoveClientSystem;
  }

  public void setTxtPassportNo(RichInputText txtPassportNo)
  {
    this.txtPassportNo = txtPassportNo;
  }

  public RichInputText getTxtPassportNo()
  {
    return this.txtPassportNo;
  }

  public void setTxtBrnDivName(RichInputText txtBrnDivName)
  {
    this.txtBrnDivName = txtBrnDivName;
  }

  public RichInputText getTxtBrnDivName()
  {
    return this.txtBrnDivName;
  }

  public void setBrnDivLov(RichTable brnDivLov)
  {
    this.brnDivLov = brnDivLov;
  }

  public RichTable getBrnDivLov()
  {
    return this.brnDivLov;
  }

  public void setTxtStateCode(RichInputText txtStateCode)
  {
    this.txtStateCode = txtStateCode;
  }

  public RichInputText getTxtStateCode()
  {
    return this.txtStateCode;
  }

  public void setTxtStateName(RichInputText txtStateName)
  {
    this.txtStateName = txtStateName;
  }

  public RichInputText getTxtStateName()
  {
    return this.txtStateName;
  }

  public void setTblStates(RichTable tblStates)
  {
    this.tblStates = tblStates;
  }

  public RichTable getTblStates()
  {
    return this.tblStates;
  }

  public void tblClientsSelectionListener(SelectionEvent selectionEvent)
  {
    Object key2 = this.tblClients.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.session.setAttribute("ClientCode", nodeBinding.getAttribute("code"));
      this.btnDeleteClient.setDisabled(false);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.btnDeleteClient);
    }
  }

  public String actionSelectCountryPop()
  {
    Object key2 = this.tblCountryPop.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      String country = (String)nodeBinding.getAttribute("name");
      this.txtCountryName.setValue(nodeBinding.getAttribute("name"));
      this.txtCountryCode.setValue(nodeBinding.getAttribute("code"));
      Object adminUnit = nodeBinding.getAttribute("administrativeType");
      if (adminUnit == null)
      {
        this.lbMsgState.setVisible(false);
        this.pnMsgTownName.setVisible(false);
      }
      else
      {
        this.lbMsgState.setLabel(GlobalCC.formatAdminUnitSingular(adminUnit) + ":");
        this.lbMsgState.setVisible(true);
        this.pnMsgTownName.setVisible(true);
        this.dlgAdminRegionTypes.setTitle(GlobalCC.formatAdminUnitPlural(adminUnit) + " List");
      }
      this.txtAdminRegionCode.setValue((Object)null);
      this.txtAdminRegionName.setValue((Object)null);
      this.txtTownName.setValue((Object)null);
      this.txtTownCode.setValue((Object)null);
      this.txtZipCode.setValue((Object)null);
      this.session.setAttribute("countryCode", nodeBinding.getAttribute("code"));
      if (this.session.getAttribute("COUNTRY_NAME").toString().equalsIgnoreCase(country)) {
        this.txtWorkPermit.setVisible(false);
      } else {
        this.txtWorkPermit.setVisible(true);
      }
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtWorkPermit);
      ADFUtils.findIterator("fetchStatesByCountry1Iterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblStates);
      ADFUtils.findIterator("fetchAlLMobileTypePrefixIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtPrefixManager);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.lbMsgState);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.pnMsgTownName);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtCountryName);
    }
    GlobalCC.dismissPopUp("pt1", "countryPop");
    return null;
  }

  public String actionAcceptAgencyTown()
  {
    Object key2 = this.tblTownPop.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.txtTownName.setValue(nodeBinding.getAttribute("name"));
      this.txtTownCode.setValue(nodeBinding.getAttribute("code"));
      this.session.setAttribute("townCode", nodeBinding.getAttribute("code"));
      this.txtZipCode.setValue(nodeBinding.getAttribute("postalZipCode"));
      if (nodeBinding.getAttribute("postalZipCode") != null) {
        this.txtTownName.setValue(nodeBinding.getAttribute("name") + " -" + nodeBinding.getAttribute("postalZipCode"));
      }
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtTownName);
    }
    GlobalCC.dismissPopUp("pt1", "townPop");
    return null;
  }

  public String actionShowTownPopup()
  {
    if (this.txtAdminRegionCode.getValue() == null)
    {
      ADFUtils.findIterator("fetchTownsWithZipCodesByStateIterator").executeQuery();
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:townPop').show(hints);");
    }
    else
    {
      this.session.setAttribute("stateCode", this.txtAdminRegionCode.getValue());
      ADFUtils.findIterator("fetchTownsWithZipCodesByStateIterator").executeQuery();
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:townPop').show(hints);");
    }
    return null;
  }

  public String actionShowParentCompany()
  {
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:parentCompanyPop').show(hints);");
    return null;
  }

  public String actionShowBranches()
  {
    ADFUtils.findIterator("findBranchesIterator");
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblRegBranches);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:branchPop').show(hints);");
    return null;
  }

  public String actionFindClientDetails()
  {
    Authorization auth = new Authorization();
    String AccessGranted = auth.checkUserRights("CLCR", "CLAU", "CLAE", null, null);
    if ("Y".equalsIgnoreCase(AccessGranted) != true)
    {
      GlobalCC.accessDenied();
      return null;
    }
    this.txtReasonForUpdate.setVisible(true);
    this.txtAccountOfficerCode.setValue((Object)null);
    this.txtAccountOfficerName.setValue((Object)null);
    List children = this.panelCollSearch.getChildren();
    UIComponent component = (UIComponent)children.get(0);
    RichTable rpt = null;
    for (int i = 0; i < children.size(); i++)
    {
      component = (UIComponent)children.get(i);
      if (component.getId().equalsIgnoreCase("t11")) {
        rpt = (RichTable)component;
      }
    }
    Object key2 = rpt.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      ADFUtils.findIterator("clientCodeIterator").executeQuery();
      BigDecimal clientCode = new BigDecimal(nodeBinding.getAttribute("code").toString());
      this.session.setAttribute("ClCode", nodeBinding.getAttribute("code"));
      this.session.setAttribute("ClientCode", nodeBinding.getAttribute("code"));
      this.session.setAttribute("ClientCd", nodeBinding.getAttribute("code"));
      this.session.setAttribute("PayeeType", "C");
      this.hiddenClientCode.setValue(clientCode);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.panelDetailSystems);
      if (nodeBinding.getAttribute("type") != null)
      {
        if (nodeBinding.getAttribute("type").equals("I")) {
          this.txtClientTypes.setValue("Individual");
        } else if (nodeBinding.getAttribute("type").equals("S")) {
          this.txtClientTypes.setValue("Staff");
        } else {
          this.txtClientTypes.setValue("Corporate");
        }
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtClientTypes);
        clientTypeChanged();
      }
      this.txtClientCode.setValue(nodeBinding.getAttribute("code"));
      this.txtId.setValue(nodeBinding.getAttribute("shortDesc"));
      this.txtSurname.setValue(nodeBinding.getAttribute("name") == null ? nodeBinding.getAttribute("name") : nodeBinding.getAttribute("name").toString());
      this.txtHoldingCompany.setValue(nodeBinding.getAttribute("name"));
      this.session.setAttribute("CLNT_CODE", nodeBinding.getAttribute("code"));
      this.txtOtherNames.setValue(nodeBinding.getAttribute("otherNames") == null ? nodeBinding.getAttribute("otherNames") : nodeBinding.getAttribute("otherNames").toString());
      this.txtPhysicalAddress.setValue(nodeBinding.getAttribute("physicalAddress"));
      if (this.legacyShtDesc != null) {
        this.legacyShtDesc.setValue(nodeBinding.getAttribute("oldShtDesc"));
      }
      this.txtPayroll.setValue(nodeBinding.getAttribute("payrollNo"));
      this.txtMinSalary.setValue(nodeBinding.getAttribute("salMin"));
      this.txtMaxSalary.setValue(nodeBinding.getAttribute("salMax"));
      this.txtPostalAddress.setValue(nodeBinding.getAttribute("postalAddress"));
      this.txtCountryCode.setValue(nodeBinding.getAttribute("countryCode"));
      this.txtWorkPermit.setValue(nodeBinding.getAttribute("workPermit"));
      if (nodeBinding.getAttribute("workPermit") != null) {
        this.txtWorkPermit.setVisible(true);
      }
      this.session.setAttribute("countryCode", nodeBinding.getAttribute("countryCode"));
      ADFUtils.findIterator("fetchAlLMobileTypePrefixIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtPrefixManager);
      this.txtCountryName.setValue(nodeBinding.getAttribute("countryName"));
      this.txtAdminRegionCode.setValue(nodeBinding.getAttribute("stsCode"));
      this.txtTownCode.setValue(nodeBinding.getAttribute("townCode"));
      this.session.setAttribute("townCode", nodeBinding.getAttribute("townCode"));
      this.txtTownName.setValue(nodeBinding.getAttribute("townName"));
      if (nodeBinding.getAttribute("zipCode") != null) {
        this.txtTownName.setValue(nodeBinding.getAttribute("townName") + " -" + nodeBinding.getAttribute("zipCode"));
      }
      this.txtZipCode.setValue(nodeBinding.getAttribute("zipCode"));
      this.txtAdminRegionName.setValue(nodeBinding.getAttribute("stsName"));
      this.txtDateCreated.setValue(nodeBinding.getAttribute("dateCreated"));
      this.txtCreatedBy.setValue(nodeBinding.getAttribute("createdBy"));
      this.txtDirectClient.setValue(nodeBinding.getAttribute("directClient"));
      this.txtBranchCode.setValue(nodeBinding.getAttribute("bankBranchCode"));
      this.txtBranchName.setValue(nodeBinding.getAttribute("bankBranch"));
      this.txtClientCellNos.setValue(nodeBinding.getAttribute("clientCell"));
      this.txtBouncedCheque.setValue(nodeBinding.getAttribute("bouncedCheque"));
      this.txtMaritalStatus.setValue(nodeBinding.getAttribute("maritalStatus"));
      this.txtModeOfComm.setValue(nodeBinding.getAttribute("defaultModeOfComm"));
      this.txtDlIssueDate.setValue(nodeBinding.getAttribute("dlIssueDate"));
      this.session.setAttribute("bpnCode", nodeBinding.getAttribute("clntBpnCode"));
      this.txtBussinessPerson.setValue(nodeBinding.getAttribute("bpnName"));
      Util checkClientAgency = new Util();
      String clientCheck = checkClientAgency.getClientTying();
      if (nodeBinding.getAttribute("directClient") != null) {
        if (nodeBinding.getAttribute("directClient").toString().equalsIgnoreCase("Y")) {
          this.pnLabelAgency.setVisible(false);
        } else if ((clientCheck.equals("N")) || (clientCheck != null)) {
          this.pnLabelAgency.setVisible(false);
        } else {
          this.pnLabelAgency.setVisible(true);
        }
      }
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.pnLabelAgency);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtDirectClient);
      this.txtAccountNum.setValue(nodeBinding.getAttribute("accountNum"));
      this.txtClientTitleCode.setValue(nodeBinding.getAttribute("title"));
      this.txtClientTitle.setValue(nodeBinding.getAttribute("title"));
      this.txtDOB.setValue(nodeBinding.getAttribute("dob"));
      this.txtBankAccNum.setValue(nodeBinding.getAttribute("bankAccountNum"));
      this.txtPassportNo.setValue(nodeBinding.getAttribute("passportNumber"));
      this.txtPIN.setValue(nodeBinding.getAttribute("pin"));
      this.txtIdRegNum.setValue(nodeBinding.getAttribute("idRegNo"));
      this.txtEmail.setValue(nodeBinding.getAttribute("email"));
      this.txtPhone1.setValue(nodeBinding.getAttribute("phone1"));
      this.txtCreditAllowed.setValue(nodeBinding.getAttribute("creditLimitAllowed"));
      this.txtSurburbs.setValue(nodeBinding.getAttribute("locationName"));
      if (nodeBinding.getAttribute("creditLimitAllowed") != null) {
        if (nodeBinding.getAttribute("creditLimitAllowed").equals("Y"))
        {
          this.txtCreditLimit.setVisible(true);
          this.txtCreditLimit.setValue(nodeBinding.getAttribute("creditLimit"));
        }
        else
        {
          this.txtCreditLimit.setValue((Object)null);
        }
      }
      String prefix = null;
      String smNo = null;
      boolean t = false;
      this.session.setAttribute("zipCode", nodeBinding.getAttribute("zipCode"));
      if (nodeBinding.getAttribute("sms") != null) {
        if (nodeBinding.getAttribute("zipCode") != null)
        {
          String couZip = nodeBinding.getAttribute("zipCode").toString();
          prefix = nodeBinding.getAttribute("sms").toString().contains("+") ? nodeBinding.getAttribute("sms").toString().replace("+" + couZip, "0") : nodeBinding.getAttribute("sms").toString().replace(couZip, "0");
          if (this.txtPrefixManager.isVisible())
          {
            smNo = prefix.substring(4);
            prefix = prefix.substring(0, 4);
          }
          else
          {
            smNo = prefix;
          }
        }
        else
        {
          prefix = nodeBinding.getAttribute("sms") != null ? nodeBinding.getAttribute("sms").toString() : (nodeBinding.getAttribute("couZipCode") != null) && (nodeBinding.getAttribute("sms") != null) ? nodeBinding.getAttribute("sms").toString().replace(nodeBinding.getAttribute("couZipCode").toString(), "") : "";
          prefix = prefix.replace("+", "0");
          if (this.txtPrefixManager.isVisible())
          {
            smNo = prefix.substring(4);
            prefix = prefix.substring(0, 4);
          }
          else
          {
            smNo = prefix;
          }
        }
      }
      this.txtPrefixManager.setValue(prefix);
      this.txtSms.setValue(smNo);
      prefix = null;
      smNo = null;
      t = false;
      this.session.setAttribute("zipCode", nodeBinding.getAttribute("zipCode"));
      if (nodeBinding.getAttribute("telPay") != null) {
        if (nodeBinding.getAttribute("zipCode") != null)
        {
          String couZip = nodeBinding.getAttribute("zipCode").toString();
          prefix = nodeBinding.getAttribute("telPay").toString().contains("+") ? nodeBinding.getAttribute("telPay").toString().replace("+" + couZip, "0") : nodeBinding.getAttribute("telPay").toString().replace(couZip, "0");
          if (this.txtPrefixManager.isVisible())
          {
            smNo = prefix.substring(4);
            prefix = prefix.substring(0, 4);
          }
          else
          {
            smNo = prefix;
          }
        }
        else
        {
          prefix = nodeBinding.getAttribute("telPay") != null ? nodeBinding.getAttribute("telPay").toString() : (nodeBinding.getAttribute("couZipCode") != null) && (nodeBinding.getAttribute("telPay") != null) ? nodeBinding.getAttribute("telPay").toString().replace(nodeBinding.getAttribute("couZipCode").toString(), "") : "";
          prefix = prefix.replace("+", "0");
          if (this.txtTelPayPrefix.isVisible())
          {
            smNo = prefix.substring(4);
            prefix = prefix.substring(0, 4);
          }
          else
          {
            smNo = prefix;
          }
        }
      }
      this.txtTelPayPrefix.setValue(prefix);
      this.txtPayTel.setValue(smNo);
      this.txtFax.setValue(nodeBinding.getAttribute("fax"));
      if (this.txtProposer != null) {
        this.txtProposer.setValue(nodeBinding.getAttribute("proposer"));
      }
      this.txtWef.setValue(nodeBinding.getAttribute("wef"));
      this.txtWet.setValue(nodeBinding.getAttribute("wet"));
      this.txtRemarks.setValue(nodeBinding.getAttribute("remarks"));
      this.txtWithdrawalReason.setValue(nodeBinding.getAttribute("withdrawalReason"));
      this.txtSectorCode.setValue(nodeBinding.getAttribute("sectorCode"));
      this.txtSectorName.setValue(nodeBinding.getAttribute("sectorName"));
      this.txtStatus.setValue(nodeBinding.getAttribute("status"));
      this.session.setAttribute("wbProductCode", (Object)null);
      this.session.setAttribute("WebuserCode", (Object)null);
      this.session.setAttribute("WebuserName", (Object)null);
      this.session.setAttribute("webProductCode", (Object)null);
      this.session.setAttribute("clientBankCode", (Object)null);
      String status = (String)nodeBinding.getAttribute("status");
      if (status != null) {
        if (nodeBinding.getAttribute("status").toString().equalsIgnoreCase("A"))
        {
          this.selectStatusActive.setDisabled(false);
          this.selectStatusDraft.setDisabled(true);
          this.selectStatusInactive.setDisabled(false);
          this.selectStatusRejected.setDisabled(true);
        }
        else if (nodeBinding.getAttribute("status").toString().equalsIgnoreCase("I"))
        {
          this.selectStatusActive.setDisabled(true);
          this.selectStatusDraft.setDisabled(true);
          this.selectStatusInactive.setDisabled(false);
          this.selectStatusRejected.setDisabled(true);
        }
        else if (nodeBinding.getAttribute("status").toString().equalsIgnoreCase("R"))
        {
          this.selectStatusActive.setDisabled(true);
          this.selectStatusDraft.setDisabled(true);
          this.selectStatusInactive.setDisabled(true);
          this.selectStatusRejected.setDisabled(false);
        }
        else if (nodeBinding.getAttribute("status").toString().equalsIgnoreCase("D"))
        {
          this.selectStatusActive.setDisabled(true);
          this.selectStatusDraft.setDisabled(false);
          this.selectStatusInactive.setDisabled(true);
          this.selectStatusRejected.setDisabled(true);
        }
      }
      this.clientSignature.setSource(null);
      this.clientPhoto.setSource(null);
      this.clientPhoto.setSource("/clientimagesservlet?id=" + nodeBinding.getAttribute("code"));
      this.clientSignature.setSource("/clientsignatureservlet?id=" + nodeBinding.getAttribute("code"));
      this.txtRunOff.setValue(nodeBinding.getAttribute("runOff"));
      this.txtSpecialTerms.setValue(nodeBinding.getAttribute("specialTerms"));
      this.txtCancelledPolicy.setValue(nodeBinding.getAttribute("policyCancelled"));
      this.txtIncreasePremium.setValue(nodeBinding.getAttribute("increasedPremium"));
      this.txtDeclinedProposal.setValue(nodeBinding.getAttribute("declinedProp"));
      this.txtContactName1.setValue(nodeBinding.getAttribute("contactName1"));
      this.contactName1.setValue(nodeBinding.getAttribute("contactName1"));
      this.txtContactPhone1.setValue(nodeBinding.getAttribute("contactPhone1"));
      this.contactPhone1.setValue(nodeBinding.getAttribute("contactPhone1"));
      this.txtContactEmail1.setValue(nodeBinding.getAttribute("contactEmail1"));
      this.contactEmail1.setValue(nodeBinding.getAttribute("contactEmail1"));
      this.txtContactName2.setValue(nodeBinding.getAttribute("contactName2"));
      this.contactName2.setValue(nodeBinding.getAttribute("contactName2"));
      this.txtContactPhone2.setValue(nodeBinding.getAttribute("contactPhone2"));
      this.contactPhone2.setValue(nodeBinding.getAttribute("contactPhone2"));
      this.txtContactEmail2.setValue(nodeBinding.getAttribute("contactEmail2"));
      this.contactEmail2.setValue(nodeBinding.getAttribute("contactEmail2"));
      String type = (String)nodeBinding.getAttribute("type");
      if (type != null)
      {
        if (type.equalsIgnoreCase("I"))
        {
          this.sbrIndividual.setSelected(true);
          this.sbrCorporate.setSelected(false);
          this.txtGender.setRendered(true);
          this.clientTitlePan.setRendered(true);
          this.txtClientTitle.setRendered(true);
          this.txtSelectClientTitle.setRendered(true);
        }
        else
        {
          this.sbrCorporate.setSelected(true);
          this.sbrIndividual.setSelected(false);
          this.parentcompanyPan.setVisible(true);
          this.txtDateOfEmployment.setVisible(false);
          this.txtDLNo.setVisible(false);
          this.txtGender.setRendered(false);
          this.txtDrvExperience.setRendered(false);
          this.txtOtherNames.setRendered(false);
          this.clientTitlePan.setRendered(false);
          this.txtClientTitle.setRendered(false);
          this.txtSelectClientTitle.setRendered(false);
        }
      }
      else
      {
        this.sbrIndividual.setSelected(true);
        this.txtGender.setRendered(true);
        this.sbrCorporate.setSelected(false);
      }
      this.txtWebsite.setValue(nodeBinding.getAttribute("website"));
      this.txtAuditors.setValue(nodeBinding.getAttribute("auditors"));
      this.txtParentCompany.setValue(nodeBinding.getAttribute("parent_company"));
      this.txtInsurer.setValue(nodeBinding.getAttribute("current_insurer"));
      this.txtProjectedBiz.setValue(nodeBinding.getAttribute("projected_business"));
      this.txtDateOfEmployment.setValue(nodeBinding.getAttribute("date_of_empl"));
      this.txtDLNo.setValue(nodeBinding.getAttribute("driving_licence"));
      this.txtParentCompanyCode.setValue(nodeBinding.getAttribute("parent_company_name"));
      this.txtRegBranchCode.setValue(nodeBinding.getAttribute("brnCode"));
      this.txtRegBranchName.setValue(nodeBinding.getAttribute("brnName"));
      this.txtAccountManagerCode.setValue(nodeBinding.getAttribute("userCode"));
      this.txtAccountManager.setValue(nodeBinding.getAttribute("username"));
      this.txtAccountOfficerCode.setValue(nodeBinding.getAttribute("aacOfficer"));
      this.txtAccountOfficerName.setValue(nodeBinding.getAttribute("aacOfficerName"));
      this.txtGender.setValue(nodeBinding.getAttribute("gender"));
      this.txtCltOccupation.setValue(nodeBinding.getAttribute("occupation"));
      this.txtAnniversary.setValue(nodeBinding.getAttribute("anniversary"));
      this.txtCreditRting.setValue(nodeBinding.getAttribute("creditRating"));
      this.txtHoldingCompany.setValue(nodeBinding.getAttribute("holdingCompany"));
      this.txtSacco.setValue(nodeBinding.getAttribute("sacco"));
      try
      {
        if (nodeBinding.getAttribute("proposer").toString().equalsIgnoreCase("Y")) {
          this.txtCommandBtn.setDisabled(true);
        } else {
          this.txtCommandBtn.setDisabled(false);
        }
      }
      catch (Exception e) {}
      this.btnCreateUpdateClient.setText("Update");
      this.btnCreateUpdateClient.setDisabled(false);
      ADFUtils.findIterator("fetchClientAccountsIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblClientAccounts);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.sbrCorporate);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.sbrIndividual);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.clientTitlePan);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtClientTitle);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtSelectClientTitle);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtClientTypes);
      ADFUtils.findIterator("fetchClientWebAccountsIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblwebAccounts);
      ADFUtils.findIterator("fetchUnallocatedClientSystemsIterator").executeQuery();
      ADFUtils.findIterator("fetchAllocatedClientSystemsIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.treeUnassignedClientSystems);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.treeAssignedClientSystems);
      ADFUtils.findIterator("fetchClientRequiredDocsIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblRequiredDocs);
      ADFUtils.findIterator("fetchClientWebAccountsIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblwebAccounts);
      ADFUtils.findIterator("findUnassignedCompaniesIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.unAssignedBank);
      ADFUtils.findIterator("findassignedCompaniesIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.assignedBank);
      ADFUtils.findIterator("findWebClientBranchesIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.clientBranch);
      ADFUtils.findIterator("findWebProductsDetailsIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.webProductsDetails);
      DBConnector dbConnector = new DBConnector();
      OracleConnection connection = null;
      OracleCallableStatement stmt = null;
      OracleResultSet rs = null;
      try
      {
        connection = dbConnector.getDatabaseConnection();
        clientVaraibleInitialization(connection);
        String query1 = "begin ? := TQC_CLIENTS_PKG.getClientsAgent(?); end;";
        stmt = (OracleCallableStatement)connection.prepareCall(query1);
        stmt.registerOutParameter(1, -10);
        stmt.setBigDecimal(2, clientCode);
        stmt.execute();
        rs = (OracleResultSet)stmt.getObject(1);
        int k = 0;
        while (rs.next())
        {
          this.txtAgencyCode.setValue(rs.getBigDecimal(1));
          this.txtAgencyName.setValue(rs.getString(3));
          k++;
        }
        if (k == 0)
        {
          this.txtAgencyCode.setValue((Object)null);
          this.txtAgencyName.setValue((Object)null);
        }
        rs.close();
        stmt.close();
        connection.close();
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(connection, e);
      }
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtAgencyCode);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtAgencyName);
      switchClientTabs(BaseClientBacking.mode.EDIT_MODE);
    }
    return null;
  }

  public String actionAcceptContactPersons()
  {
    this.txtContactName1.setValue(this.contactName1.getValue());
    this.txtContactPhone1.setValue(this.contactPhone1.getValue());
    this.txtContactEmail1.setValue(this.contactEmail1.getValue());
    this.txtContactName2.setValue(this.contactName2.getValue());
    this.txtContactPhone2.setValue(this.contactPhone2.getValue());
    this.txtContactEmail2.setValue(this.contactEmail2.getValue());
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtContactName1);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtContactPhone1);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtContactEmail1);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtContactName2);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtContactPhone2);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtContactEmail2);
    GlobalCC.dismissPopUp("pt1", "contactPersonsPopup");
    return null;
  }

  public String actionShowContactPersons()
  {
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:contactPersonsPopup').show(hints);");
    return null;
  }

  public String actionAcceptSector()
  {
    Object key2 = this.tblSectorPop.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.txtSectorName.setValue(nodeBinding.getAttribute("name"));
      this.txtSectorCode.setValue(nodeBinding.getAttribute("code"));
      this.session.setAttribute("sectorCode", nodeBinding.getAttribute("code"));
      this.session.setAttribute("sectorName", nodeBinding.getAttribute("name"));
      this.txtSrchSectorName.setValue(this.session.getAttribute("sectorName"));
      this.session.setAttribute("occupationCode", nodeBinding.getAttribute("occupationCode"));
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtSrchSectorName);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtSectorName);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtSectorCode);
      this.txtCltOccupation.setValue(nodeBinding.getAttribute("agentName"));
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtCltOccupation);
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:sectorPop').hide(hints);");
    }
    return null;
  }

  public String actionAcceptDomicileCountry()
  {
    Object key2 = this.tblDomicileCountryPop.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.txtDomicileCountriesName.setValue(nodeBinding.getAttribute("name"));
      this.txtDomicileCountriesCode.setValue(nodeBinding.getAttribute("code"));
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtDomicileCountriesName);
    }
    GlobalCC.dismissPopUp("pt1", "domicileCountryPop");
    return null;
  }

  public String actionAcceptAccountManager()
  {
    Object key2 = this.tblAccountManagersPop.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.txtAccountManagerCode.setValue(nodeBinding.getAttribute("userCode"));
      this.txtAccountManager.setValue(nodeBinding.getAttribute("userFullname"));
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtAccountManager);
    }
    GlobalCC.dismissPopUp("pt1", "accountManagersPop");
    return null;
  }

  public String bankBranchSelected()
  {
    Object key2 = this.tblBankBranchPop.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.session.setAttribute("branchCode", nodeBinding.getAttribute("bankBranchCode"));
      this.txtBranchName.setValue(nodeBinding.getAttribute("branchName"));
      this.txtBranchCode.setValue(nodeBinding.getAttribute("bankBranchCode"));
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtBranchName);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtBranchCode);
    }
    GlobalCC.dismissPopUp("pt1", "bankBranchPop");
    return null;
  }

  public String acceptBranchDivision()
  {
    Object key2 = this.tblBranchDivisionPop.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.txtDivisionCode.setValue(nodeBinding.getAttribute("DIV_CODE"));
      this.txtDivisionName.setValue(nodeBinding.getAttribute("DIV_NAME"));
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtDivisionName);
    }
    GlobalCC.dismissPopUp("pt1", "branchDivisionPop");
    return null;
  }

  public String selectABranchDivision()
  {
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:branchDivisionPop').show(hints);");
    return null;
  }

  public void selectTypeOfClient(ValueChangeEvent valueChangeEvent)
  {
    System.out.println("This is val change listner");
    if (this.sbrIndividual.isSelected())
    {
      this.clientTitlePan.setVisible(true);
      this.txtTitle.setDisabled(false);
      this.txtTitle.setVisible(false);
      this.txtSurname.setLabel("Surname Name");
      this.txtDOB.setLabel("Date of Birth");
      this.txtOtherNames.setVisible(true);
      this.btnShowContactPersons.setVisible(false);
      this.btnShowContactPersons.setDisabled(true);
      this.txtWebsite.setVisible(false);
      this.txtAuditors.setVisible(false);
      this.txtParentCompany.setVisible(false);
      this.parentcompanyPan.setVisible(false);
      this.tabDirectors.setVisible(false);
      this.tabAuditors.setVisible(false);
      this.txtDLNo.setVisible(true);
      this.txtDateOfEmployment.setVisible(true);
      this.layClientImage.setVisible(true);
      this.txtGender.setRendered(true);
      this.grpEmploymentDetails.setRendered(true);
      this.layClientImage.setVisible(true);
    }
    if (this.sbrCorporate.isSelected())
    {
      this.grpEmploymentDetails.setRendered(false);
      this.clientTitlePan.setVisible(false);
      this.txtTitle.setVisible(false);
      this.txtTitle.setDisabled(true);
      this.txtSurname.setLabel("Corporate Name");
      this.txtDOB.setLabel("Date of Incorporation");
      this.txtOtherNames.setVisible(false);
      this.layClientImage.setVisible(false);
      this.txtOtherNames.setValue((Object)null);
      this.txtWebsite.setVisible(true);
      this.txtAuditors.setVisible(false);
      this.txtGender.setRendered(false);
      this.txtParentCompanyCode.setVisible(true);
      this.parentcompanyPan.setVisible(true);
      this.txtDLNo.setVisible(false);
      this.txtDateOfEmployment.setVisible(false);
      this.txtPassportNo.setVisible(false);
      this.tabAuditors.setVisible(true);
      this.tabDirectors.setVisible(true);
      this.btnShowContactPersons.setVisible(true);
      this.btnShowContactPersons.setDisabled(false);
    }
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.clientTab);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.panelCreateClient);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.mainPanel);
    this.panelCreateClient.setVisible(true);
  }

  public List<SelectItem> getClientType()
  {
    if (this.clientType != null) {
      this.clientType.clear();
    }
    DBConnector dbConnector = new DBConnector();
    OracleConnection conn = null;
    Object statement = null;
    OracleCallableStatement stmt = null;
    OracleResultSet rst = null;
    Object status = null;
    Boolean value = Boolean.valueOf(true);
    try
    {
      conn = dbConnector.getDatabaseConnection();
      String query1 = "begin TQC_CLIENTS_PKG.get_clnt_types(?);end;";
      stmt = (OracleCallableStatement)conn.prepareCall(query1);
      stmt.registerOutParameter(1, -10);
      stmt.execute();
      rst = (OracleResultSet)stmt.getObject(1);
      while (rst.next()) {
        this.clientType.add(new SelectItem(rst.getString(1)));
      }
      rst.close();
      stmt.close();
      conn.close();
    }
    catch (SQLException ex)
    {
      GlobalCC.EXCEPTIONREPORTING(ex);
    }
    finally
    {
      DbUtils.closeQuietly(conn, stmt, rst);
    }
    return this.clientType;
  }

  public void setClientType(List<SelectItem> clientType)
  {
    this.clientType = clientType;
  }

  public void selectClientTypes(ValueChangeEvent valueChangeEvent)
  {
    Util checkClientAgency = new Util();
    String clientCheck = checkClientAgency.getClientTying();
    try
    {
      if (this.txtClientTypes.getValue() != null) {
        if (this.txtClientTypes.getValue().toString().equalsIgnoreCase("Individual"))
        {
          this.session.setAttribute("clientTypeVAl", "I");
          this.sbrIndividual.setSelected(true);
          this.sbrCorporate.setSelected(false);
          this.clientTitlePan.setVisible(true);
          this.txtTitle.setDisabled(false);
          this.txtTitle.setVisible(false);
          this.txtSurname.setLabel("Surname Name");
          this.txtDOB.setLabel("Date of Birth");
          this.txtOtherNames.setVisible(true);
          this.txtPhysicalAddress.setShowRequired(false);
          this.btnShowContactPersons.setVisible(false);
          this.btnShowContactPersons.setDisabled(true);
          this.txtWebsite.setVisible(false);
          this.txtAuditors.setVisible(false);
          this.txtParentCompany.setVisible(false);
          this.parentcompanyPan.setVisible(false);
          this.tabDirectors.setVisible(false);
          this.tabAuditors.setVisible(false);
          this.txtDLNo.setVisible(true);
          this.txtDateOfEmployment.setVisible(true);
          this.layClientImage.setVisible(true);
          this.txtGender.setRendered(true);
          this.grpEmploymentDetails.setRendered(true);
          this.txtDrvExperience.setRendered(true);
          this.layClientImage.setVisible(true);
          this.clientTitlePan.setRendered(true);
          this.txtClientTitle.setRendered(true);
          this.txtSelectClientTitle.setRendered(true);
          this.txtPassportNo.setVisible(true);
          if ((clientCheck.equals("Y")) || (clientCheck == null)) {
            this.pnLabelAgency.setVisible(true);
          } else {
            this.pnLabelAgency.setVisible(false);
          }
          this.txtAgencyName.setVisible(true);
          this.txtAgencies.setVisible(true);
          if (new Rendering().isClientId())
          {
            this.txtPIN.setDisabled(true);
            this.txtId.setDisabled(false);
            this.txtId.setRequired(true);
            this.txtDrvExperience.setRendered(true);
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtId);
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtPIN);
          }
        }
        else if (this.txtClientTypes.getValue().toString().equalsIgnoreCase("Staff"))
        {
          this.session.setAttribute("clientTypeVAl", "I");
          this.sbrIndividual.setSelected(true);
          this.sbrCorporate.setSelected(false);
          this.clientTitlePan.setVisible(true);
          this.txtTitle.setDisabled(false);
          this.txtTitle.setVisible(false);
          this.txtSurname.setLabel("Surname Name");
          this.txtDOB.setLabel("Date of Birth");
          this.txtOtherNames.setVisible(true);
          this.txtPhysicalAddress.setShowRequired(false);
          this.btnShowContactPersons.setVisible(false);
          this.btnShowContactPersons.setDisabled(true);
          this.txtWebsite.setVisible(false);
          this.txtAuditors.setVisible(false);
          this.txtParentCompany.setVisible(false);
          this.parentcompanyPan.setVisible(false);
          this.tabDirectors.setVisible(false);
          this.tabAuditors.setVisible(false);
          this.txtDLNo.setVisible(true);
          this.txtDateOfEmployment.setVisible(true);
          this.layClientImage.setVisible(true);
          this.txtGender.setRendered(true);
          this.grpEmploymentDetails.setRendered(true);
          this.txtDrvExperience.setRendered(true);
          this.layClientImage.setVisible(true);
          this.clientTitlePan.setRendered(true);
          this.txtClientTitle.setRendered(true);
          this.txtPassportNo.setVisible(true);
          this.txtSelectClientTitle.setRendered(true);
          if ((clientCheck.equals("Y")) || (clientCheck == null)) {
            this.pnLabelAgency.setVisible(true);
          } else {
            this.pnLabelAgency.setVisible(false);
          }
          this.txtAgencyName.setVisible(true);
          this.txtAgencies.setVisible(true);
          this.txtDirectClient.setValue("Y");
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtDirectClient);
          if (new Rendering().isClientId())
          {
            this.txtPIN.setDisabled(true);
            this.txtId.setDisabled(false);
            this.txtId.setRequired(true);
            this.txtDrvExperience.setRendered(true);
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtId);
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtPIN);
          }
        }
        else
        {
          this.session.setAttribute("clientTypeVAl", "C");
          this.txtPhysicalAddress.setShowRequired(true);
          this.sbrCorporate.setSelected(true);
          this.sbrIndividual.setSelected(false);
          this.grpEmploymentDetails.setRendered(false);
          this.clientTitlePan.setVisible(false);
          this.txtTitle.setVisible(false);
          this.txtTitle.setDisabled(true);
          this.txtSurname.setLabel("Corporate Name");
          this.txtDOB.setLabel("Date of Incorporation");
          this.txtOtherNames.setVisible(false);
          this.layClientImage.setVisible(false);
          this.txtOtherNames.setValue((Object)null);
          this.txtWebsite.setVisible(true);
          this.txtAuditors.setVisible(false);
          this.txtGender.setRendered(false);
          this.txtParentCompanyCode.setVisible(true);
          this.parentcompanyPan.setVisible(true);
          this.txtDLNo.setVisible(false);
          this.txtDateOfEmployment.setVisible(false);
          this.txtPassportNo.setVisible(false);
          this.tabAuditors.setVisible(true);
          this.tabDirectors.setVisible(true);
          this.txtDrvExperience.setRendered(false);
          this.btnShowContactPersons.setVisible(true);
          this.btnShowContactPersons.setDisabled(false);
          this.txtSelectClientTitle.setRendered(false);
          this.clientTitlePan.setRendered(false);
          this.txtClientTitle.setRendered(false);
          this.pnLabelAgency.setVisible(false);
          this.txtAgencyName.setVisible(false);
          this.txtAgencies.setVisible(false);
          if (new Rendering().isCooperatePin())
          {
            this.txtPIN.setDisabled(false);
            this.txtId.setDisabled(true);
            this.txtPIN.setRequired(true);
            this.txtDrvExperience.setRendered(false);
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtPIN);
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtId);
          }
        }
      }
    }
    catch (Exception e) {}
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtSelectClientTitle);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.sbrIndividual);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.sbrCorporate);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.clientTab);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.panelCreateClient);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.mainPanel);
    this.panelCreateClient.setVisible(true);
  }

  public String actionNewClient()
  {
    try
    {
      Util util = new Util();
      String entity = util.getEntityApplicable();
      if (entity.equals("Y"))
      {
        this.session.setAttribute("source", "FromClient");
        FacesContext.getCurrentInstance().getExternalContext().redirect("entities.jspx");
        return null;
      }
      this.session.setAttribute("saveSaccoStatus", (Object)null);
      Authorization auth = new Authorization();
      String process = "CLCR";
      String processArea = "CLAU";
      String processSubArea = "CLAC";
      String AccessGranted = auth.checkUserRights(process, processArea, processSubArea, null, null);
      if (!AccessGranted.equalsIgnoreCase("Y"))
      {
        GlobalCC.INFORMATIONREPORTING("Sorry. You Do not Have The Rights to create a client.");
        return null;
      }
      this.session.removeAttribute("otherNames");
      this.session.removeAttribute("surNames");
      this.session.removeAttribute("count");
      this.session.removeAttribute("saveStatus");
      this.session.removeAttribute("pinStatus");
      this.tabDetailCreateClient.setVisible(true);
      this.txtReasonForUpdate.setVisible(false);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.tabDetailCreateClient);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtReasonForUpdate);
      ADFUtils.findIterator("fetchAllClientsByNamesIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.tbClientListingBasedOnNames);
      clearClientFields();
      switchClientTabs(BaseClientBacking.mode.NEW_MODE);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return null;
  }

  public void clearClientFields()
  {
    this.txtClientCode.setValue((Object)null);
    this.txtId.setValue((Object)null);
    this.txtSurname.setValue((Object)null);
    this.txtOtherNames.setValue((Object)null);
    this.txtPhysicalAddress.setValue((Object)null);
    if (this.legacyShtDesc != null) {
      this.legacyShtDesc.setValue((Object)null);
    }
    this.txtPostalAddress.setValue("P.O. BOX ");
    this.txtCountryCode.setValue((Object)null);
    this.txtBussinessPerson.setValue((Object)null);
    this.txtCountryName.setValue((Object)null);
    this.txtTownCode.setValue((Object)null);
    this.txtAdminRegionName.setValue((Object)null);
    this.txtClientTitleCode.setValue((Object)null);
    this.txtClientTitle.setValue((Object)null);
    this.txtDateCreated.setValue((Object)null);
    this.txtCreatedBy.setValue((Object)null);
    this.txtDirectClient.setValue((Object)null);
    this.txtAccountNum.setValue((Object)null);
    this.txtDOB.setValue((Object)null);
    this.txtBankAccNum.setValue((Object)null);
    this.txtPassportNo.setValue((Object)null);
    this.txtPIN.setValue((Object)null);
    this.txtIdRegNum.setValue((Object)null);
    this.txtEmail.setValue((Object)null);
    this.txtPhone1.setValue((Object)null);
    this.txtSms.setValue((Object)null);
    this.txtFax.setValue((Object)null);
    this.txtProposer.setValue((Object)null);
    this.txtWef.setValue((Object)null);
    this.txtWet.setValue((Object)null);
    this.txtRemarks.setValue((Object)null);
    this.txtWithdrawalReason.setValue((Object)null);
    this.selectStatusActive.setDisabled(true);
    this.selectStatusDraft.setDisabled(false);
    this.selectStatusInactive.setDisabled(true);
    this.selectStatusRejected.setDisabled(true);
    this.txtStatus.setValue("D");
    this.txtRunOff.setValue((Object)null);
    this.txtSpecialTerms.setValue((Object)null);
    this.txtCancelledPolicy.setValue((Object)null);
    this.txtIncreasePremium.setValue((Object)null);
    this.txtDeclinedProposal.setValue((Object)null);
    this.txtAdminRegionCode.setValue((Object)null);
    this.txtAdminRegionName.setValue((Object)null);
    this.txtBranchCode.setValue((Object)null);
    this.txtBranchName.setValue((Object)null);
    this.contactName1.setValue((Object)null);
    this.contactPhone1.setValue((Object)null);
    this.contactEmail1.setValue((Object)null);
    this.contactName2.setValue((Object)null);
    this.contactPhone2.setValue((Object)null);
    this.contactEmail2.setValue((Object)null);
    this.txtGender.setValue((Object)null);
    this.txtAgencyName.setValue((Object)null);
    this.txtAgencyCode.setValue((Object)null);
    this.pnLabelAgency.setVisible(false);
    this.sbrIndividual.setSelected(true);
    this.txtAccountOfficerCode.setValue((Object)null);
    this.txtAccountOfficerName.setValue((Object)null);
    ParameterFinder param = new ParameterFinder();
    if ((param.getParameterVal("DEFAULT_USER_BRANCH") == null) || (param.getParameterVal("DEFAULT_USER_BRANCH").equalsIgnoreCase("N")))
    {
      this.txtRegBranchCode.setValue((Object)null);
      this.txtRegBranchName.setValue((Object)null);
    }
    else if (param.getParameterVal("DEFAULT_USER_BRANCH").equalsIgnoreCase("Y"))
    {
      this.txtRegBranchCode.setValue(this.session.getAttribute("branchCode"));
      this.txtRegBranchName.setValue(this.session.getAttribute("branchName"));
    }
    else
    {
      this.txtRegBranchCode.setValue((Object)null);
      this.txtRegBranchName.setValue((Object)null);
    }
    this.txtCountryCode.setValue(this.session.getAttribute("COUNTRY_CODE"));
    this.txtCountryName.setValue(this.session.getAttribute("COUNTRY_NAME"));
    this.txtDomicileCountriesCode.setValue(this.session.getAttribute("COUNTRY_CODE"));
    this.txtDomicileCountriesName.setValue(this.session.getAttribute("COUNTRY_NAME"));
    this.session.setAttribute("date", (Object)null);
    this.btnCreateUpdateClient.setText("Save");
    this.btnCreateUpdateClient.setDisabled(false);
  }

  public boolean check_if_uppecaseRequired()
  {
    DBConnector dbConnector = new DBConnector();
    OracleConnection conn = null;
    Object statement = null;
    OracleCallableStatement stmt = null;
    OracleResultSet rs = null;
    String status = null;
    Boolean value = Boolean.valueOf(true);
    try
    {
      conn = dbConnector.getDatabaseConnection();
      conn = dbConnector.getDatabaseConnection();
      String query1 = "begin ? := TQC_SETUPS_CURSOR.checkif_UpperCase_required(); end;";
      stmt = (OracleCallableStatement)conn.prepareCall(query1);
      stmt.registerOutParameter(1, -10);
      stmt.execute();
      rs = (OracleResultSet)stmt.getObject(1);
      while (rs.next()) {
        status = rs.getString(1);
      }
      rs.close();
      conn.close();
    }
    catch (Exception e)
    {
      GlobalCC.EXCEPTIONREPORTING(conn, e);
    }
    if (status == null)
    {
      value = Boolean.valueOf(true);
      return value.booleanValue();
    }
    if (status.equalsIgnoreCase("Y"))
    {
      value = Boolean.valueOf(true);
      return value.booleanValue();
    }
    if (status.equalsIgnoreCase("N"))
    {
      value = Boolean.valueOf(false);
      return value.booleanValue();
    }
    return value.booleanValue();
  }

  public boolean checkIfSaccoRequired()
  {
    DBConnector dbConnector = new DBConnector();
    OracleConnection conn = null;
    Object statement = null;
    OracleCallableStatement stmt = null;
    OracleResultSet rs = null;
    String status = null;
    Boolean value = Boolean.valueOf(true);
    try
    {
      conn = dbConnector.getDatabaseConnection();
      conn = dbConnector.getDatabaseConnection();
      String query1 = "begin ? := TQC_SETUPS_CURSOR.checkifSaccoRequired(); end;";
      stmt = (OracleCallableStatement)conn.prepareCall(query1);
      stmt.registerOutParameter(1, -10);
      stmt.execute();
      rs = (OracleResultSet)stmt.getObject(1);
      while (rs.next()) {
        status = rs.getString(1);
      }
      rs.close();
      conn.close();
    }
    catch (Exception e)
    {
      GlobalCC.EXCEPTIONREPORTING(conn, e);
    }
    if (status == null)
    {
      value = Boolean.valueOf(true);
      return value.booleanValue();
    }
    if (status.equalsIgnoreCase("Y"))
    {
      value = Boolean.valueOf(true);
      return value.booleanValue();
    }
    if (status.equalsIgnoreCase("N"))
    {
      value = Boolean.valueOf(false);
      return value.booleanValue();
    }
    return value.booleanValue();
  }

  public String check_ifclientActive()
  {
    DBConnector dbConnector = new DBConnector();
    OracleConnection conn = null;
    Object statement = null;
    OracleCallableStatement stmt = null;
    OracleResultSet rs = null;
    String status = null;
    Object value = null;
    try
    {
      conn = dbConnector.getDatabaseConnection();
      String query1 = "begin ? := TQC_SETUPS_CURSOR.checkif_user_Active(?); end;";
      stmt = (OracleCallableStatement)conn.prepareCall(query1);
      stmt.registerOutParameter(1, -10);
      stmt.setBigDecimal(2, new BigDecimal(this.session.getAttribute("ClientCode").toString()));
      stmt.execute();
      rs = (OracleResultSet)stmt.getObject(1);
      while (rs.next()) {
        status = rs.getString(1);
      }
      rs.close();
      conn.close();
    }
    catch (Exception e)
    {
      GlobalCC.EXCEPTIONREPORTING(conn, e);
      return null;
    }
    return status;
  }

  public String checkIfSSuchRecorDExist()
  {
    this.session.setAttribute("PayeeType", "C");
    BigDecimal amount = null;
    getAutoAuthirize();
    if (this.txtCreditAllowed.getValue() != null)
    {
      if (this.txtCreditAllowed.getValue().equals("Y")) {
        amount = this.txtCreditLimit.getValue() != null ? new BigDecimal(this.txtCreditLimit.getValue().toString()) : null;
      }
      Authorization auth;
      String process;
      String processArea;
      String processSubArea;
      String AccessGranted;
      if ((!(AccessGranted = (auth = new Authorization()).checkUserRights(process = "AMA", processArea = "CRLMT", processSubArea = "CRDET", amount, null)).equalsIgnoreCase("Y")) && (AccessGranted.equalsIgnoreCase("N")) && (this.txtCreditAllowed.getValue().equals("Y")))
      {
        GlobalCC.INFORMATIONREPORTING("You do not have the right to allow credit limits");
        return null;
      }
    }
    Util checkClientAgency = new Util();
    String clientCheck = checkClientAgency.getClientTying();
    UploadedFile _file = (UploadedFile)this.uploadedPicture.getValue();
    System.out.println("_file1 " + _file);
    String clientCode = GlobalCC.checkNullValues(this.txtClientCode.getValue());
    String directClient = GlobalCC.checkNullValues(this.txtDirectClient.getValue());
    String dob = GlobalCC.checkNullValues(this.txtDOB.getValue());
    String surname = GlobalCC.checkNullValues(this.txtSurname.getValue());
    String otherNames = GlobalCC.checkNullValues(this.txtOtherNames.getValue());
    String sms = GlobalCC.checkNullValues(this.txtSms.getValue());
      String bankAccNum = GlobalCC.checkNullValues(this.txtBankAccNum.getValue());
      String branchCode = GlobalCC.checkNullValues(this.txtBranchCode.getValue());
    Rendering rendering = new Rendering();
    boolean mand = rendering.isRelationShipMan();
    boolean dlMand = rendering.isDlMand();
    boolean exp = rendering.isDriverExpNumber();
    boolean state = rendering.isStatesMandatory();
    boolean town = rendering.isTownMandatory();
    boolean ClCountry = rendering.isClientCountryMandatory();
    if ((dlMand) && (this.txtDlIssueDate.getValue() == null))
    {
      GlobalCC.INFORMATIONREPORTING("Please enter the DL issue date");
      return null;
    }
    if ((ClCountry) && (this.txtCountryName.getValue() == null))
    {
      GlobalCC.INFORMATIONREPORTING("Please select Country");
      return null;
    }
    if ((state) && (this.txtAdminRegionName.getValue() == null))
    {
      GlobalCC.INFORMATIONREPORTING("Please select State/County");
      return null;
    }
    if ((town) && (this.txtTownName.getValue() == null))
    {
      GlobalCC.INFORMATIONREPORTING("Please select Town");
      return null;
    }
    if ((exp) && (this.txtDrvExperience.getValue() != null))
    {
      String driverExp = this.txtDrvExperience.getValue().toString();
      try
      {
        new BigDecimal(driverExp);
      }
      catch (Exception e)
      {
        e.printStackTrace();
        GlobalCC.INFORMATIONREPORTING("The Driver Experience should be a number");
        return null;
      }
    }
    if ((clientCheck == null) || (clientCheck.equals("Y")))
    {
      if ((this.txtDirectClient.getValue().equals("N")) && (this.txtAgencyName.getValue() == null) && (mand))
      {
        GlobalCC.INFORMATIONREPORTING("Please select Agent");
        return null;
      }
      if ((this.txtDirectClient.getValue().equals("Y")) && (this.txtAccountManager.getValue() == null) && (mand))
      {
        GlobalCC.INFORMATIONREPORTING("Please select A Relationship Manager");
        return null;
      }
    }
    boolean checkClient = false;
    this.session.setAttribute("passportNumber", this.txtPassportNo.getValue());
    this.session.setAttribute("pinNumber", this.txtPIN.getValue());
    this.session.setAttribute("idRegNumber", this.txtIdRegNum.getValue());
    String site = this.session.getAttribute("DEFAULT_SITE").toString();
    if (this.txtDirectClient.getValue() == null)
    {
      GlobalCC.INFORMATIONREPORTING("Please select client category");
      return null;
    }
    if ((!checkClient) && (!this.txtDirectClient.getValue().equals("I")))
    {
      String couVal = GlobalCC.checkNullValues(this.txtCountryName.getValue());
      if ((site.equalsIgnoreCase("ZAMBIA")) && (couVal != null) && (couVal.equalsIgnoreCase("ZAMBIA")) && (this.txtIdRegNum.getValue() == null))
      {
        GlobalCC.EXCEPTIONREPORTING("You must Enter the " + this.session.getAttribute("ID_NO_LABEL"));
        return null;
      }
    }
    if (site.equalsIgnoreCase("ZAMBIA"))
    {
      String idFormat = this.session.getAttribute("ID_NO_FORMAT").toString();
      String idNum = GlobalCC.checkNullValues(this.txtIdRegNum.getValue());
      if ((idFormat.length() != idNum.length()) || (idNum.indexOf("/") != 6) || (idNum.indexOf("/", 7) != 9))
      {
        GlobalCC.EXCEPTIONREPORTING("Invalid " + this.session.getAttribute("ID_NO_LABEL") + " Format: You must Enter in the format " + this.session.getAttribute("ID_NO_FORMAT"));
        return null;
      }
    }
    if ((this.txtPassportNo.getValue() == null) || (((String)this.txtPassportNo.getValue()).trim().length() == 0))
    {
      checkClient = false;
      checkClient = (this.txtPIN.getValue() != null) && (((String)this.txtPIN.getValue()).trim().length() != 0);
      checkClient = (this.txtIdRegNum.getValue() == null) || (((String)this.txtIdRegNum.getValue()).trim().length() == 0) ? checkClient : true;
    }
    else
    {
      checkClient = true;
    }
    if (directClient == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Select Client Category");
      return null;
    }
    if ((!checkClient) && (!this.txtDirectClient.getValue().equals("I")))
    {
      String couVal = GlobalCC.checkNullValues(this.txtCountryName.getValue());
      if (site.equalsIgnoreCase("ZAMBIA"))
      {
        if ((couVal != null) && (couVal.equalsIgnoreCase("ZAMBIA")))
        {
          GlobalCC.EXCEPTIONREPORTING("You must Enter the " + this.session.getAttribute("ID_NO_LABEL"));
          return null;
        }
        GlobalCC.EXCEPTIONREPORTING("You must Enter the Passport No");
        return null;
      }
      GlobalCC.EXCEPTIONREPORTING("You must either Enter Passport No or ID No or Pin No Details.. ");
      return null;
    }
    if (site.equalsIgnoreCase("ZAMBIA"))
    {
      String idFormat = this.session.getAttribute("ID_NO_FORMAT").toString();
      String idNum = GlobalCC.checkNullValues(this.txtIdRegNum.getValue());
      if ((idFormat.length() != idNum.length()) || (!idNum.contains("NRC-")) || (idNum.indexOf("/") != 10) || (idNum.indexOf("/", 11) != 13))
      {
        GlobalCC.EXCEPTIONREPORTING("Invalid " + this.session.getAttribute("ID_NO_LABEL") + " Format: You must Enter in the format " + this.session.getAttribute("ID_NO_FORMAT"));
        return null;
      }
    }
    String prefix = GlobalCC.checkNullValues(this.txtPrefixManager.getValue());
    if (this.txtPrefixManager.isVisible())
    {
      if (prefix != null)
      {
        if (prefix.startsWith("0")) {
          prefix = prefix.replaceFirst("0", "");
        }
        sms = prefix + "" + sms;
      }
    }
    else if (sms != null) {
      if (sms.startsWith("0"))
      {
        sms = sms.substring(1);
        sms = "+" + this.session.getAttribute("zipCode").toString() + sms;
      }
      else
      {
        sms = "+" + this.session.getAttribute("zipCode").toString() + sms;
      }
    }
    String wef = GlobalCC.checkNullValues(this.txtWef.getValue());
    String status = GlobalCC.checkNullValues(this.txtStatus.getValue());
    String stateCode = GlobalCC.checkNullValues(this.txtAdminRegionCode.getValue());
    String email = GlobalCC.checkNullValues(this.txtEmail.getValue());
    String phone1 = GlobalCC.checkNullValues(this.txtPhone1.getValue());
    String physicalAddress = GlobalCC.checkNullValues(this.txtPhysicalAddress.getValue());
    String postalAddress = GlobalCC.checkNullValues(this.txtPostalAddress.getValue());
    String gender = GlobalCC.checkNullValues(this.txtGender.getValue());
    if (this.session.getAttribute("clientTypeVAl") == null)
    {
      GlobalCC.INFORMATIONREPORTING("Please select client type");
      return null;
    }
    String clientType = (String)this.session.getAttribute("clientTypeVAl");
    this.session.setAttribute("clientTypeVAl", "I");
    Rendering render = new Rendering();
    boolean relation = render.isRelationShipOfficer();
    if ((relation) && (this.txtAccountManager.getValue() == null) && (this.txtDirectClient.getValue() == "Y"))
    {
      GlobalCC.INFORMATIONREPORTING("Please select a relationship manager");
      return null;
    }
    if ((this.txtReasonForUpdate.isVisible()) && (this.txtReasonForUpdate.getValue() == null))
    {
      GlobalCC.errorValueNotEntered("Please enter the reason for updating client");
      return null;
    }
    if (this.sbrIndividual.isSelected())
    {
      if (gender == null)
      {
        GlobalCC.errorValueNotEntered("Gender required::");
        return null;
      }
      if (this.txtClientTitleCode.getValue() == null)
      {
        GlobalCC.errorValueNotEntered("Client Title  required::");
        return null;
      }
      System.out.print("Yes" + new Rendering().isClientId());
      if ((new Rendering().isClientId()) && (this.txtId.getValue() == null) && (!this.txtDirectClient.getValue().equals("I")))
      {
        if (this.session.getAttribute("ID_NO_LABEL") == null)
        {
          GlobalCC.errorValueNotEntered("Please Enter the Client ID/Registration No :");
          return null;
        }
        GlobalCC.errorValueNotEntered("Please Enter the Client " + this.session.getAttribute("ID_NO_LABEL") + " :");
        return null;
      }
    }
    else if ((new Rendering().isCooperatePin()) && (this.txtPIN.getValue() == null) && (!this.txtDirectClient.getValue().equals("I")))
    {
      GlobalCC.errorValueNotEntered("Please Enter the Pin Number:");
      return null;
    }
    if (new Rendering().isIdPassportMandatory())
    {
      if ((this.txtIdRegNum.getValue() == null) && (this.txtPassportNo.getValue() == null) && (this.txtClientTypes.getValue().toString().equalsIgnoreCase("Individual")) && (!this.txtDirectClient.getValue().equals("I")))
      {
        if (this.session.getAttribute("ID_NO_LABEL") == null)
        {
          GlobalCC.errorValueNotEntered("Please Enter the Client ID/Registration No :");
          return null;
        }
        GlobalCC.errorValueNotEntered("Please Enter the Client " + this.session.getAttribute("ID_NO_LABEL") + "  Or Passport Number:");
        return null;
      }
      if ((this.txtPIN.getValue() == null) && (!this.txtClientTypes.getValue().equals("Individual")) && (!this.txtDirectClient.getValue().equals("I")))
      {
        GlobalCC.INFORMATIONREPORTING("Please enter the pin Number");
        return null;
      }
    }
    if ((this.renderer.isDOBRequired()) && (dob == null))
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Enter the Date of Birth/Incorporation");
      return null;
    }
    if ((this.renderer.isSMSRequired()) && (sms == null))
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Enter the SMS No.");
      return null;
    }
    if ((this.renderer.isEmailRequired()) && (email == null))
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Enter the Email Address");
      return null;
    }
    if ((this.sbrIndividual.isSelected()) && (this.renderer.isOccupationRequired()) && (this.txtCltOccupation.getValue() == null) && (!this.sbrCorporate.isSelected()))
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Enter the Occupation/ Select the Sector");
      return null;
    }
    if ((this.renderer.isTelephoneRequired()) && (phone1 == null))
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Enter the Telephone  No.");
      return null;
    }
    if ((this.renderer.isPHYSICAL_ADDRESS_REQUIRED()) && (physicalAddress == null) && (!clientType.equals("I")))
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Enter the Physical Address");
      return null;
    }
    if ((this.renderer.isPOSTAL_ADDRESS_REQUIRED()) && (postalAddress == null))
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Enter the Postal Addr  No.");
      return null;
    }
    if (surname == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Enter Client Name");
      return null;
    }
    if (wef == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: WEF date is missing");
      return null;
    }
    if (status == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Select Parameter Status");
      return null;
    }
    if (((directClient == null) && (clientCheck.equals("Y"))) || ((directClient == null) && (clientCheck == null)))
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Enter Parameter Description");
      return null;
    }
    if ((this.renderer.isStateRequired()) && (stateCode == null))
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Enter State");
      return null;
    }
    if ((this.renderer.isCreditRatingRequired()) && (this.txtCreditRting.getValue() == null))
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Enter Client Credit Rating");
      return null;
    }
     if(bankAccNum==null && renderer.isCLIENT_BANK_ACCOUNT_NO_REQUIRED()){
        GlobalCC.errorValueNotEntered("Enter Bank Account number!");
        return null;
     }
     if(branchCode==null && renderer.isCLIENT_BANK_BRANCH_REQUIRED()){
        GlobalCC.errorValueNotEntered("Enter Bank Branch!");
        return null;
     }
    if (this.btnCreateUpdateClient.getText().equals("Update"))
    {
      processCreateUpdateClient();
    }
    else
    {
      String upCaseOthNames = null;
      String upCaseSurNames = null;
      if (check_if_uppecaseRequired())
      {
        upCaseOthNames = otherNames != null ? otherNames.toUpperCase() : otherNames;
        upCaseSurNames = surname.toUpperCase();
      }
      else
      {
        upCaseSurNames = surname;
        upCaseOthNames = otherNames;
      }
      this.session.setAttribute("otherNames", upCaseOthNames);
      this.session.setAttribute("surNames", upCaseSurNames);
      this.session.setAttribute("idRegNumber", this.txtIdRegNum.getValue());
      String pinStatus = null;
      pinStatus = this.session.getAttribute("pinStatus") != null ? (String)this.session.getAttribute("pinStatus") : null;
      if ((this.txtPIN.getValue() == null) && ((pinStatus == null) || (pinStatus.equals("NO"))))
      {
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:pinReq').show(hints);");
        return null;
      }
      this.tbClientListingBasedOnNames.setRendered(true);
      ADFUtils.findIterator("fetchAllClientsByNamesIterator").executeQuery();
      if (this.txtSacco.getValue() != null)
      {
        if ((checkIfSaccoRequired()) && (this.txtSacco.getValue().equals("N")) && (this.txtHoldingCompany.getValue() == null))
        {
          ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
          erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:saccoReq').show(hints);");
          return null;
        }
      }
      else
      {
        int counter = 0;
        System.out.println("This is counting the number of records" + this.session.getAttribute("count"));
        if (this.session.getAttribute("count") != null)
        {
          System.out.println("This is counting the number of records" + this.session.getAttribute("count"));
          String noOfRecords = this.session.getAttribute("count").toString();
          System.out.println("This is noOfRecords the number of records" + noOfRecords);
          counter = Integer.parseInt(noOfRecords);
          if (counter >= 1)
          {
            ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
            erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:p2').show(hints);");
            return null;
          }
        }
        processCreateUpdateClient();
        return null;
      }
      processCreateUpdateClient();
      if ((checkIfSaccoRequired()) && (this.txtSacco.getValue() == null) && (this.txtProposer.getValue() == null) && (this.txtHoldingCompany.getValue() == null))
      {
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:saccoReq').show(hints);");
        return null;
      }
    }
    return null;
  }

  public void actionAlertDateListener(ValueChangeEvent valueChangeEvent)
  {
    RichInputDate comp = (RichInputDate)valueChangeEvent.getComponent();
    this.session.setAttribute("date", comp.getValue());
  }

  public String processCreateUpdateClient()
  {
    Object resultMessage = null;
    String creditLimitAllowed = null;
    BigDecimal creditLimit = null;
    BigDecimal locationCode = null;
    Authorization auth = new Authorization();
    if (this.txtCreditAllowed.getValue() != null) {
      if (this.txtCreditAllowed.getValue().equals("Y"))
      {
        creditLimitAllowed = "Y";
        creditLimit = this.txtCreditLimit.getValue() != null ? new BigDecimal(this.txtCreditLimit.getValue().toString()) : null;
      }
      else
      {
        creditLimitAllowed = "N";
      }
    }
    String sacco = this.txtSacco.getValue() != null ? this.txtSacco.getValue().toString() : "N";
    String reasonforUpdates = this.txtReasonForUpdate.getValue() != null ? this.txtReasonForUpdate.getValue().toString() : null;
    String DriverExperience = this.txtDrvExperience.getValue() != null ? this.txtDrvExperience.getValue().toString() : null;
    BigDecimal systemCode = this.session.getAttribute("systemCode") != null ? new BigDecimal(this.session.getAttribute("systemCode").toString()) : null;
    BigDecimal clntCode = this.session.getAttribute("ClnCode") != null ? new BigDecimal(this.session.getAttribute("ClnCode").toString()) : null;
    BigDecimal clientCodes = this.session.getAttribute("ClientCd") != null ? new BigDecimal(this.session.getAttribute("ClientCd").toString()) : null;
    locationCode = this.session.getAttribute("locCode") != null ? new BigDecimal(this.session.getAttribute("locCode").toString()) : null;
    String option = null;
    String code = null;
    if (this.btnCreateUpdateClient.getText().toString().equalsIgnoreCase("Update"))
    {
      option = "E";
      String AccessGranted = auth.checkUserRights("CLCR", "CLAU", "CLAE", null, null);
      if (!"Y".equalsIgnoreCase(AccessGranted))
      {
        GlobalCC.accessDenied();
        return null;
      }
      String accountNumber = GlobalCC.checkNullValues(this.txtAccountNum.getValue());
      String id = GlobalCC.checkNullValues(this.txtId.getValue());
      if (id == null)
      {
        GlobalCC.errorValueNotEntered("Error Value Missing: Enter Client Id");
        return null;
      }
      code = GlobalCC.checkNullValues(this.txtClientCode.getValue());
      if (code == null)
      {
        GlobalCC.errorValueNotEntered("Error Value Missing:Client code Required");
        return null;
      }
    }
    else
    {
      option = "A";
      String AccessGranted = auth.checkUserRights("CLCR", "CLAU", "CLAC", null, null);
      if (!"Y".equalsIgnoreCase(AccessGranted))
      {
        GlobalCC.accessDenied();
        return null;
      }
    }
    if (option != null)
    {
      String upCaseOthNames = null;
      String upCaseSurNames = null;
      String ClientType = GlobalCC.checkNullValues(this.txtClientTypes.getValue());
      String clientCode = GlobalCC.checkNullValues(this.txtClientCode.getValue());
      String directClient = GlobalCC.checkNullValues(this.txtDirectClient.getValue());
      String accountNumber = GlobalCC.checkNullValues(this.txtAccountNum.getValue());
      String id = GlobalCC.checkNullValues(this.txtId.getValue());
      String title = GlobalCC.checkNullValues(this.txtClientTitleCode.getValue());
      String surname = GlobalCC.checkNullValues(this.txtSurname.getValue());
      String otherNames = GlobalCC.checkNullValues(this.txtOtherNames.getValue());
      String physicalAddress = GlobalCC.checkNullValues(this.txtPhysicalAddress.getValue());
      String postalAddress = GlobalCC.checkNullValues(this.txtPostalAddress.getValue());
      String stateCode = GlobalCC.checkNullValues(this.txtAdminRegionCode.getValue());
      String countryCode = GlobalCC.checkNullValues(this.txtCountryCode.getValue());
      String townCode = GlobalCC.checkNullValues(this.txtTownCode.getValue());
      String dob = GlobalCC.checkNullValues(this.txtDOB.getValue());
      String bankAccNum = GlobalCC.checkNullValues(this.txtBankAccNum.getValue());
      String passport = GlobalCC.checkNullValues(this.txtPassportNo.getValue());
      String pin = GlobalCC.checkNullValues(this.txtPIN.getValue());
      String idRegNum = GlobalCC.checkNullValues(this.txtIdRegNum.getValue());
      String email = GlobalCC.checkNullValues(this.txtEmail.getValue());
      String phone1 = GlobalCC.checkNullValues(this.txtPhone1.getValue());
      String sms = GlobalCC.checkNullValues(this.txtSms.getValue());
      String prefix = GlobalCC.checkNullValues(this.txtPrefixManager.getValue());
      if (prefix != null)
      {
        if (prefix.startsWith("0")) {
          prefix = prefix.replaceFirst("0", "");
        }
        sms = prefix + "" + sms;
      }
      String sms2 = GlobalCC.checkNullValues(this.txtPayTel.getValue());
      String prefix2 = GlobalCC.checkNullValues(this.txtTelPayPrefix.getValue());
      if (prefix2 != null)
      {
        if (prefix2.startsWith("0")) {
          prefix2 = prefix2.replaceFirst("0", "");
        }
        sms2 = prefix2 + "" + sms2;
      }
      String fax = GlobalCC.checkNullValues(this.txtFax.getValue());
      String proposer = GlobalCC.checkNullValues(this.txtProposer.getValue());
      String wef = GlobalCC.checkNullValues(this.txtWef.getValue());
      String wet = GlobalCC.checkNullValues(this.txtWet.getValue());
      String status = GlobalCC.checkNullValues(this.txtStatus.getValue());
      String createdBy = GlobalCC.checkNullValues(this.txtCreatedBy.getValue());
      String dateCreated = GlobalCC.checkNullValues(this.txtDateCreated.getValue());
      String remarks = GlobalCC.checkNullValues(this.txtRemarks.getValue());
      String withdrawalReason = GlobalCC.checkNullValues(this.txtWithdrawalReason.getValue());
      String runOff = GlobalCC.checkNullValues(this.txtRunOff.getValue());
      String specialTerms = GlobalCC.checkNullValues(this.txtSpecialTerms.getValue());
      String cancelledPolicy = GlobalCC.checkNullValues(this.txtCancelledPolicy.getValue());
      String increasePremium = GlobalCC.checkNullValues(this.txtIncreasePremium.getValue());
      String declinedProposal = GlobalCC.checkNullValues(this.txtDeclinedProposal.getValue());
      String branchCode = GlobalCC.checkNullValues(this.txtBranchCode.getValue());
      String divisionCode = GlobalCC.checkNullValues(this.txtDivisionCode.getValue());
      String accountManagerCode = GlobalCC.checkNullValues(this.txtAccountManagerCode.getValue());
      String sectorCode = GlobalCC.checkNullValues(this.txtSectorCode.getValue());
      String sectorName = GlobalCC.checkNullValues(this.txtSectorName.getValue());
      String domicileCountriesCode = GlobalCC.checkNullValues(this.txtDomicileCountriesCode.getValue());
      String contactName1 = GlobalCC.checkNullValues(this.txtContactName1.getValue());
      String contactPhone1 = GlobalCC.checkNullValues(this.txtContactPhone1.getValue());
      String contactEmail1 = GlobalCC.checkNullValues(this.txtContactEmail1.getValue());
      String contactName2 = GlobalCC.checkNullValues(this.txtContactName2.getValue());
      String contactPhone2 = GlobalCC.checkNullValues(this.txtContactPhone2.getValue());
      String contactEmail2 = GlobalCC.checkNullValues(this.txtContactEmail2.getValue());
      String auditors = GlobalCC.checkNullValues(this.txtAuditors.getValue());
      String website = GlobalCC.checkNullValues(this.txtWebsite.getValue());
      String parentcompany = GlobalCC.checkNullValues(this.txtParentCompany.getValue());
      String current_insurer = GlobalCC.checkNullValues(this.txtInsurer.getValue());
      String projectedBiz = GlobalCC.checkNullValues(this.txtProjectedBiz.getValue());
      String dateofempoyment = GlobalCC.checkNullValues(this.txtDateOfEmployment.getValue());
      String drivingLicence = GlobalCC.checkNullValues(this.txtDLNo.getValue());
      String regBranchCode = GlobalCC.checkNullValues(this.txtRegBranchCode.getValue());
      String accMgr = GlobalCC.checkNullValues(this.txtAccountOfficerCode.getValue());
      String gender = GlobalCC.checkNullValues(this.txtGender.getValue());
      String cltOccupation = GlobalCC.checkNullValues(this.txtCltOccupation.getValue());
      String cltCellNos = GlobalCC.checkNullValues(this.txtClientCellNos.getValue());
      String cltBankTelNo = GlobalCC.checkNullValues(this.txtCltBankTelNo.getValue());
      String cltBankCellNo = GlobalCC.checkNullValues(this.txtCltBankCellNo.getValue());
      String cltEmployerTelNo = GlobalCC.checkNullValues(this.txtCltEmployerTelNo.getValue());
      String cltEmployerCellNo = GlobalCC.checkNullValues(this.txtCltEmployerCellNo.getValue());


      if ((this.session.getAttribute("regReq") != null) && (this.txtIdRegNum.getValue() == null) && (!this.txtDirectClient.getValue().equals("I")))
      {
        if (this.session.getAttribute("ID_NO_LABEL") == null)
        {
          GlobalCC.errorValueNotEntered("Please Enter the Client ID/Registration No :");
          return null;
        }
        GlobalCC.errorValueNotEntered("Please Enter the Client " + this.session.getAttribute("ID_NO_LABEL") + " :");
        return null;
      }
      if (check_if_uppecaseRequired())
      {
        upCaseOthNames = otherNames != null ? otherNames.toUpperCase() : otherNames;
        upCaseSurNames = surname.toUpperCase();
      }
      else
      {
        upCaseSurNames = surname;
        upCaseOthNames = otherNames;
      }
      DBConnector connector = new DBConnector();
      OracleCallableStatement cst = null;
      OracleConnection conn = null;
      try
      {
        String Query = "begin ? := tqc_clients_pkg.client_extended_proc(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
        conn = connector.getDatabaseConnection();
        cst = (OracleCallableStatement)conn.prepareCall(Query);
        cst.registerOutParameter(1, 2);
        cst.setString(2, directClient);
        cst.setString(3, id);
        cst.setString(4, null);
        cst.setString(5, upCaseOthNames);
        cst.setString(6, upCaseSurNames);
        cst.setString(7, pin);
        cst.setString(8, postalAddress);
        cst.setString(9, physicalAddress);
        cst.setString(10, idRegNum);
        cst.setString(11, (String)this.session.getAttribute("Username"));
        cst.setDate(12, GlobalCC.extractDate(this.txtWef));
        cst.setDate(13, GlobalCC.extractDate(this.txtWet));
        cst.setString(14, title);
        cst.setDate(15, GlobalCC.extractDate(this.txtDOB));
        cst.setString(16, countryCode);
        cst.setString(17, townCode);
        cst.setObject(18, this.txtZipCode.getValue());
        cst.setString(19, email);
        cst.setString(20, phone1);
        cst.setString(21, sms);
        cst.setString(22, fax);
        cst.setString(23, sectorCode);
        cst.setString(24, sectorName);
        cst.setString(25, domicileCountriesCode);
        cst.setString(26, proposer);
        cst.setString(27, status);
        cst.setString(28, runOff);
        cst.setString(29, withdrawalReason);
        cst.setString(30, remarks);
        cst.setString(31, bankAccNum);
        cst.setString(32, branchCode);
        cst.setString(33, specialTerms);
        cst.setString(34, cancelledPolicy);
        cst.setString(35, increasePremium);
        cst.setString(36, declinedProposal);
        if (this.session.getAttribute("clientTypeVAl") != null)
        {
          if (this.session.getAttribute("clientTypeVAl").equals("I"))
          {
            cst.setString(37, "I");
            this.session.setAttribute("clientTypes", "I");
          }
          else if (this.session.getAttribute("clientTypeVAl").equals("S"))
          {
            cst.setString(37, "S");
            this.session.setAttribute("clientTypes", "I");
          }
        }
        else
        {
          cst.setString(37, "C");
          this.session.setAttribute("clientTypes", "C");
        }
        cst.setString(38, option);
        System.out.println("Client Code" + clntCode);
        cst.setBigDecimal(39, clientCodes);
        cst.setString(40, accountManagerCode);
        cst.setString(41, contactName1);
        cst.setString(42, contactPhone1);
        cst.setString(43, contactEmail1);
        cst.setString(44, contactName2);
        cst.setString(45, contactPhone2);
        cst.setString(46, contactEmail2);
        cst.setString(47, passport);
        cst.setBigDecimal(48, stateCode == null ? null : new BigDecimal(stateCode));
        cst.setString(49, website);
        cst.setString(50, auditors);
        cst.setBigDecimal(51, parentcompany == null ? null : new BigDecimal(parentcompany));
        cst.setString(52, current_insurer);
        cst.setBigDecimal(53, projectedBiz == null ? null : new BigDecimal(projectedBiz));
        cst.setDate(54, GlobalCC.extractDate(this.txtDateOfEmployment));
        cst.setString(55, drivingLicence);
        cst.setString(56, regBranchCode);
        UploadedFile _file = (UploadedFile)this.uploadedPicture.getValue();
        System.out.println("_file2 " + _file);
        InputStream inp = null;
        boolean isOk = false;
        if (this.session.getAttribute("ClientCode") == null)
        {
          if (_file != null)
          {
            isOk = GlobalCC.validateUploadedImgFile(fileStream, "Client Image", fileContent).booleanValue();
            if (!isOk)
            {
              this.uploadedPicture.setValue((Object)null);
              AdfFacesContext.getCurrentInstance().addPartialTarget(this.uploadedPicture);
              return null;
            }
            inp = _file.getInputStream();
          }
          UploadedFile _fileSignature = (UploadedFile)this.uploadSignature.getValue();
          InputStream inpSign = null;
          boolean isSignOk = false;
          if (_fileSignature != null)
          {
            isOk = GlobalCC.validateUploadedImgFile(fileStream2, "signature", fileContent2).booleanValue();
            if (!isSignOk)
            {
              this.uploadSignature.setValue((Object)null);
              AdfFacesContext.getCurrentInstance().addPartialTarget(this.uploadSignature);
              return null;
            }
            inpSign = _fileSignature.getInputStream();
          }
          cst.setBlob(57, fileStream);
          cst.setBlob(58, fileStream2);
        }
        else
        {
          fileStream = null;
          fileStream2 = null;
          cst.setBlob(57, fileStream);
          cst.setBlob(58, fileStream2);
        }
        cst.setBigDecimal(59, accMgr == null ? null : new BigDecimal(accMgr));
        cst.setString(60, gender);
        cst.setString(61, cltOccupation);
        cst.setString(62, cltBankTelNo);
        cst.setString(63, cltBankCellNo);
        cst.setString(64, cltEmployerTelNo);
        cst.setString(65, cltEmployerCellNo);
        cst.setString(66, cltCellNos);
        cst.setString(67, ClientType);
        cst.registerOutParameter(68, 2);
        cst.registerOutParameter(69, 12);
        String oldShtDesc = GlobalCC.checkNullValues(this.legacyShtDesc.getValue());
        cst.setString(70, oldShtDesc);
        cst.setDate(71, this.txtAnniversary.getValue() != null ? GlobalCC.extractDate(this.txtAnniversary) : null);
        cst.setObject(72, this.txtCreditRting.getValue() != null ? this.txtCreditRting.getValue() : null);
        cst.setBigDecimal(73, systemCode);
        cst.setString(74, DriverExperience);
        cst.setString(75, sacco);
        cst.setBigDecimal(76, clntCode);
        cst.setString(77, reasonforUpdates);
        cst.setString(78, creditLimitAllowed);
        cst.setObject(79, creditLimit);
        cst.setObject(80, locationCode);
        cst.setObject(81, this.session.getAttribute("occupationCode"));
        cst.setObject(82, this.txtBouncedCheque.getValue());
        cst.setObject(83, this.txtMaritalStatus.getValue());
        cst.setObject(84, this.txtModeOfComm.getValue());
        cst.setObject(85, this.txtPayroll.getValue());
        cst.setObject(86, this.txtMinSalary.getValue());
        cst.setObject(87, this.txtMaxSalary.getValue());
        cst.setObject(88, this.txtDlIssueDate.getValue());
        cst.setObject(89, this.txtWorkPermit.getValue());
        cst.setString(90, null);
        cst.setString(91, sms2);
        cst.execute();
        BigDecimal returnedClientCode = cst.getBigDecimal(68);
        this.session.setAttribute("ClientCode", returnedClientCode);
        String returnedShortDesc = cst.getString(69);
        if (this.txtAgencyCode.getValue() != null)
        {
          Query = "begin TQC_CLIENTS_PKG.clientAgent(?,?,?); end; ";
          cst = (OracleCallableStatement)conn.prepareCall(Query);
          cst.setString(1, option);
          cst.setBigDecimal(2, returnedClientCode);
          cst.setObject(3, this.txtAgencyCode.getValue());
          cst.execute();
        }
        ADFUtils.findIterator("fetchAllClientsIterator").executeQuery();
        this.uploadSignature.setValue((Object)null);
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.uploadSignature);
        this.uploadedPicture.setValue((Object)null);
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.uploadedPicture);
        cst.close();
        conn.commit();
        conn.close();
        java.util.Date date = new java.util.Date();
        this.txtDateCreated.setValue(date);
        this.txtCreatedBy.setValue(this.session.getAttribute("Username"));
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtDateCreated);
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtCreatedBy);
        this.btnCreateUpdateClient.setDisabled(true);
        if (option.equalsIgnoreCase("A"))
        {
          String message = "New Client Record CREATED successfully!";
          GlobalCC.INFORMATIONREPORTING(message);
          GlobalCC.INFORMATIONREPORTING("U can now Submit Required Documents");
          ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
          erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:p2').hide(hints);");
          this.session.setAttribute("ClientCode", returnedClientCode);
          this.clientPhoto.setSource("/clientimagesservlet?id=" + this.session.getAttribute("ClientCode"));
          this.clientSignature.setSource("/clientsignatureservlet?id=" + this.session.getAttribute("ClientCode"));
          this.txtId.setValue(returnedShortDesc);
          this.txtClientCode.setValue(returnedClientCode);
          this.session.setAttribute("clientShtDesc", returnedShortDesc);
          this.session.setAttribute("clientName", upCaseOthNames + " " + upCaseSurNames);
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.clientPhoto);
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.clientSignature);
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtClientCode);
          refreshTabsForNewClient();
          fileStream = null;
          fileContent = null;
          fileStream2 = null;
          fileContent2 = null;
        }
        else
        {
          ADFUtils.findIterator("fetchClientsByCriteriaIterator").executeQuery();
          this.uploadSignature.setValue((Object)null);
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.uploadSignature);
          this.uploadedPicture.setValue((Object)null);
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.uploadedPicture);
          this.clientPhoto.setSource("/clientimagesservlet?id=" + this.session.getAttribute("ClientCode"));
          this.clientSignature.setSource("/clientsignatureservlet?id=" + this.session.getAttribute("ClientCode"));
          String message = "New Client Updated  successfully!";
          GlobalCC.INFORMATIONREPORTING(message);
          fileStream = null;
          fileContent = null;
          fileStream2 = null;
          fileContent2 = null;
        }
      }
      catch (SQLException e)
      {
        GlobalCC.EXCEPTIONREPORTING(conn, e);
        e.printStackTrace();
      }
      catch (IOException e)
      {
        GlobalCC.EXCEPTIONREPORTING((OracleConnection)null, e);
        e.printStackTrace();
      }
    }
    return null;
  }

  public void refreshTabsForNewClient()
  {
    BigDecimal clientCode = new BigDecimal(this.session.getAttribute("ClientCode").toString());
    this.hiddenClientCode.setValue(clientCode);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.panelDetailSystems);
    this.btnCreateUpdateClient.setText("Update");
    this.btnCreateUpdateClient.setDisabled(false);
    ADFUtils.findIterator("fetchClientAccountsIterator").executeQuery();
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblClientAccounts);
    ADFUtils.findIterator("fetchClientWebAccountsIterator").executeQuery();
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblwebAccounts);
    ADFUtils.findIterator("fetchUnallocatedClientSystemsIterator").executeQuery();
    ADFUtils.findIterator("fetchAllocatedClientSystemsIterator").executeQuery();
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.treeUnassignedClientSystems);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.treeAssignedClientSystems);
    ADFUtils.findIterator("fetchClientRequiredDocsIterator").executeQuery();
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblRequiredDocs);
    switchClientTabs(BaseClientBacking.mode.EDIT_MODE);
  }

  public String actionDeleteClient()
  {
    if (this.session.getAttribute("ClientCode") != null)
    {
      this.clientCodeValue.setValue(this.session.getAttribute("ClientCode").toString());
      String msg = "Are you sure you wish to DELETE Client number " + this.session.getAttribute("ClientCode").toString();
      this.olConfirmMsgValue.setValue(msg);
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:confirmationDialog').show(hints);");
    }
    else
    {
      GlobalCC.errorValueNotEntered("You need to select a Client first!");
    }
    return null;
  }

  public String actionNewWebAccount()
  {
    if (this.session.getAttribute("ClientCode") != null)
    {
      this.txtAccUsername.setValue((Object)null);
      this.txtAccUsername.setDisabled(false);
      this.txtAccFullNames.setRendered(false);
      this.txtAccPassword.setValue((Object)null);
      this.txtAccEmail.setValue((Object)null);
      this.txtAccCode.setValue((Object)null);
      this.txtAccPersonelRank.setValue((Object)null);
      this.txtAccPassword.setRendered(true);
      this.btnSaveUpdateWebAccount.setText("Save");
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:webAccountPop').show(hints);");
    }
    else
    {
      GlobalCC.INFORMATIONREPORTING("No client Selected::");
    }
    return null;
  }

  public String actionSaveUpdateWebAccount()
  {
    if (this.btnSaveUpdateWebAccount.getText().equals("Update"))
    {
      actionUpdateWebAccount();
    }
    else
    {
      Object accCode = null;
      String accUsername = GlobalCC.checkNullValues(this.txtAccUsername.getValue());
      String accPassword = GlobalCC.checkNullValues(this.txtAccPassword.getValue());
      String accPersonelRank = GlobalCC.checkNullValues(this.txtAccPersonelRank.getValue());
      String accStatus = GlobalCC.checkNullValues(this.txtAccStatus.getValue());
      String accAllowLogin = GlobalCC.checkNullValues(this.txtAccAllowLogin.getValue());
      String accEmail = GlobalCC.checkNullValues(this.txtAccEmail.getValue());
      if (accUsername == null)
      {
        GlobalCC.errorValueNotEntered("Error Value Missing: Username is Empty");
        return null;
      }
      if (accPassword == null)
      {
        GlobalCC.errorValueNotEntered("Error Value Missing: Password field is missing");
        return null;
      }
      if (accPersonelRank == null)
      {
        GlobalCC.errorValueNotEntered("Error Value Missing: Enter Personel Rank");
        return null;
      }
      if (accStatus == null)
      {
        GlobalCC.errorValueNotEntered("Error Value Missing: Select a status");
        return null;
      }
      String Query = "begin tqc_clients_pkg.create_client_web_account(?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
      DBConnector connector = new DBConnector();
      OracleCallableStatement cst = null;
      OracleConnection conn = null;
      try
      {
        conn = connector.getDatabaseConnection();
        cst = (OracleCallableStatement)conn.prepareCall(Query);
        cst.setString(1, accUsername);
        cst.setString(2, accPassword);
        cst.setString(3, accAllowLogin);
        cst.setString(4, null);
        cst.setString(5, null);
        cst.setString(6, accPersonelRank);
        cst.setString(7, accStatus);
        cst.setBigDecimal(8, new BigDecimal(this.session.getAttribute("ClientCode").toString()));
        cst.setString(9, (String)this.session.getAttribute("Username"));
        cst.setString(10, accEmail);
        cst.setString(11, "A");
        cst.setBigDecimal(12, null);
        if (this.session.getAttribute("clientTypes").equals("C")) {
          cst.setString(13, "G");
        } else {
          cst.setString(13, "I");
        }
        cst.execute();
        cst.close();
        conn.commit();
        conn.close();
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:webAccountPop').hide(hints);");
        String message = "Web Account Saved Successfully!";
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(message));
        ADFUtils.findIterator("fetchClientWebAccountsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblwebAccounts);
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(conn, e);
      }
    }
    return null;
  }

  public String actionUpdateWebAccount()
  {
    String accCode = GlobalCC.checkNullValues(this.txtAccCode.getValue());
    String accUsername = GlobalCC.checkNullValues(this.txtAccUsername.getValue());
    String accPassword = GlobalCC.checkNullValues(this.txtAccPassword.getValue());
    String accPersonelRank = GlobalCC.checkNullValues(this.txtAccPersonelRank.getValue());
    String accStatus = GlobalCC.checkNullValues(this.txtAccStatus.getValue());
    String accAllowLogin = GlobalCC.checkNullValues(this.txtAccAllowLogin.getValue());
    String accEmail = GlobalCC.checkNullValues(this.txtAccEmail.getValue());
    if (accCode == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Account Code is Empty");
      return null;
    }
    if (accUsername == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Username is Empty");
      return null;
    }
    if (accPersonelRank == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Enter Personel Rank");
      return null;
    }
    if (accStatus == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Select a status");
      return null;
    }
    String Query = "begin tqc_clients_pkg.create_client_web_account(?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
    DBConnector connector = new DBConnector();
    OracleCallableStatement cst = null;
    OracleConnection conn = null;
    try
    {
      conn = connector.getDatabaseConnection();
      cst = (OracleCallableStatement)conn.prepareCall(Query);
      cst.setString(1, accUsername);
      cst.setString(2, accPassword);
      cst.setString(3, accAllowLogin);
      cst.setString(4, null);
      cst.setString(5, null);
      cst.setString(6, accPersonelRank);
      cst.setString(7, accStatus);
      cst.setBigDecimal(8, new BigDecimal(this.session.getAttribute("ClientCode").toString()));
      cst.setString(9, (String)this.session.getAttribute("Username"));
      cst.setString(10, accEmail);
      cst.setString(11, "E");
      cst.setBigDecimal(12, new BigDecimal(accCode));
      if (this.session.getAttribute("clientTypes").equals("C")) {
        cst.setString(13, "G");
      } else {
        cst.setString(13, "I");
      }
      cst.execute();
      cst.close();
      conn.commit();
      conn.close();
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:webAccountPop').hide(hints);");
      String message = "Web Account Edited Successfully!";
      FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(message));
      ADFUtils.findIterator("fetchClientWebAccountsIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblwebAccounts);
    }
    catch (Exception e)
    {
      GlobalCC.EXCEPTIONREPORTING(conn, e);
    }
    return null;
  }

  public void setTblwebAccounts(RichTable tblwebAccounts)
  {
    this.tblwebAccounts = tblwebAccounts;
  }

  public RichTable getTblwebAccounts()
  {
    return this.tblwebAccounts;
  }

  public String actionDeleteWebAccount()
  {
    Object key2 = this.tblwebAccounts.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding == null)
    {
      GlobalCC.INFORMATIONREPORTING("No Record selected.");
      return null;
    }
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:confirmDeleteClientWebAccount').show(hints);");
    return null;
  }

  public void actionConfirmDeleteWebAcc(DialogEvent dialogEvent)
  {
    if ((!dialogEvent.getOutcome().equals(DialogEvent.Outcome.no)) && (dialogEvent.getOutcome().equals(DialogEvent.Outcome.yes)))
    {
      Object key2 = this.tblwebAccounts.getSelectedRowData();
      JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
      BigDecimal clientAccountCode = null;
      clientAccountCode = (BigDecimal)nodeBinding.getAttribute("clientAccCode");
      String Query = "begin tqc_clients_pkg.create_client_web_account(?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
      DBConnector connector = new DBConnector();
      OracleCallableStatement cst = null;
      OracleConnection conn = null;
      try
      {
        conn = connector.getDatabaseConnection();
        cst = (OracleCallableStatement)conn.prepareCall(Query);
        cst.setString(1, null);
        cst.setString(2, null);
        cst.setString(3, null);
        cst.setString(4, null);
        cst.setString(5, null);
        cst.setString(6, null);
        cst.setString(7, null);
        cst.setBigDecimal(8, null);
        cst.setString(9, null);
        cst.setString(10, null);
        cst.setString(11, "D");
        cst.setBigDecimal(12, clientAccountCode);
        if (this.session.getAttribute("clientTypes").equals("C")) {
          cst.setString(13, "G");
        } else {
          cst.setString(13, "I");
        }
        cst.execute();
        cst.close();
        conn.commit();
        conn.close();
        ADFUtils.findIterator("fetchClientWebAccountsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblwebAccounts);
        String message = "Web Account Deleted Successfully!";
        GlobalCC.INFORMATIONREPORTING(message);
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(conn, e);
      }
    }
  }

  public void actionConfirmDeleteRequiredDocs(DialogEvent dialogEvent)
  {
    if ((!dialogEvent.getOutcome().equals(DialogEvent.Outcome.no)) && (dialogEvent.getOutcome().equals(DialogEvent.Outcome.yes)))
    {
      Object key2 = this.tblRequiredDocs.getSelectedRowData();
      JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
      String Query = "begin TQC_WEB_PKG.saveClientDocuments(?,?,?,?,?,?,?,?,?); end;";
      DBConnector connector = new DBConnector();
      OracleCallableStatement cst = null;
      OracleConnection conn = null;
      try
      {
        conn = connector.getDatabaseConnection();
        cst = (OracleCallableStatement)conn.prepareCall(Query);
        cst.setString(1, "D");
        cst.setBigDecimal(2, new BigDecimal(nodeBinding.getAttribute("CDOCR_CODE").toString()));
        cst.setBigDecimal(3, new BigDecimal(nodeBinding.getAttribute("CDOCR_RDOC_CODE").toString()));
        cst.setString(4, null);
        cst.setString(5, null);
        cst.setDate(6, null);
        cst.setString(7, null);
        cst.setString(8, null);
        cst.setString(9, this.session.getAttribute("Username").toString());
        cst.execute();
        cst.close();
        conn.commit();
        conn.close();
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(conn, e);
      }
      ADFUtils.findIterator("fetchClientRequiredDocsIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblRequiredDocs);
    }
  }

  public String actionEditWebAccount()
  {
    Object key2 = this.tblwebAccounts.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.txtAccUsername.setValue(nodeBinding.getAttribute("clientAccUserName"));
      this.txtAccUsername.setDisabled(true);
      this.txtAccFullNames.setValue(nodeBinding.getAttribute("clientAccName"));
      this.txtAccFullNames.setRendered(false);
      this.txtAccPassword.setRendered(false);
      this.txtAccEmail.setValue(nodeBinding.getAttribute("clientAccEmail"));
      this.txtAccCode.setValue(nodeBinding.getAttribute("clientAccCode"));
      this.txtAccPersonelRank.setValue(nodeBinding.getAttribute("clientAccPersonelRank"));
      this.txtAccStatus.setValue(nodeBinding.getAttribute("clientAccStatus"));
      this.txtAccAllowLogin.setValue(nodeBinding.getAttribute("clientAccLoginAllowed"));
      this.btnSaveUpdateWebAccount.setText("Update");
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:webAccountPop').show(hints);");
    }
    return null;
  }

  public void setPanelClientSystems(RichPanelBox panelClientSystems)
  {
    this.panelClientSystems = panelClientSystems;
  }

  public RichPanelBox getPanelClientSystems()
  {
    return this.panelClientSystems;
  }

  public void setTreeAssignedClientSystems(RichTree treeAssignedClientSystems)
  {
    this.treeAssignedClientSystems = treeAssignedClientSystems;
  }

  public RichTree getTreeAssignedClientSystems()
  {
    return this.treeAssignedClientSystems;
  }

  public void setTreeUnassignedClientSystems(RichTree treeUnassignedClientSystems)
  {
    this.treeUnassignedClientSystems = treeUnassignedClientSystems;
  }

  public RichTree getTreeUnassignedClientSystems()
  {
    return this.treeUnassignedClientSystems;
  }

  public void unassignedClientSystemSelectionListener(SelectionEvent selectionEvent)
  {
    RowKeySet keys;
    if ((selectionEvent.getAddedSet() != selectionEvent.getRemovedSet()) && ((keys = selectionEvent.getAddedSet()) != null) && (keys.getSize() > 0)) {
      for (Object treeRowKey : keys)
      {
        this.treeUnassignedClientSystems.setRowKey(treeRowKey);
        JUCtrlHierNodeBinding nd = (JUCtrlHierNodeBinding)this.treeUnassignedClientSystems.getRowData();
        this.txtSelectedClientSystemCode.setValue(nd.getRow().getAttribute("sysCode"));
      }
    }
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.panelDetailSystems);
  }

  public void assignedClientSystemSelectionListener(SelectionEvent selectionEvent)
  {
    RowKeySet keys;
    if ((selectionEvent.getAddedSet() != selectionEvent.getRemovedSet()) && ((keys = selectionEvent.getAddedSet()) != null) && (keys.getSize() > 0)) {
      for (Object treeRowKey : keys)
      {
        this.treeAssignedClientSystems.setRowKey(treeRowKey);
        JUCtrlHierNodeBinding nd = (JUCtrlHierNodeBinding)this.treeAssignedClientSystems.getRowData();
        this.txtSelectedClientSystemCode.setValue(nd.getRow().getAttribute("sysCode"));
      }
    }
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.panelDetailSystems);
  }

  public void switchClientTabs(mode mode)
  {
    switch (mode)
    {
    case EDIT_MODE:
      this.tabClientSystems.setRendered(true);
      this.tabClientWebAccounts.setRendered(true);
      this.tabClientDocs.setRendered(true);
      this.tabDetailCreateClient.setDisclosed(true);
      this.tabDetailSearchClients.setDisclosed(false);
      this.tabDetailCreateClient.setVisible(true);
      this.tabClientAccounts.setVisible(true);
      GlobalCC.refreshUI(this.tabDetailCreateClient);
      GlobalCC.refreshUI(this.tabClientAccounts);
      if (this.sbrCorporate.isSelected())
      {
        this.tabDirectors.setVisible(true);
        this.tabAuditors.setVisible(true);
        this.txtPassportNo.setVisible(false);
        this.txtParentCompanyCode.setVisible(true);
        this.txtGender.setRendered(false);
        this.layClientImage.setVisible(false);
      }
      else
      {
        this.tabDirectors.setVisible(false);
        this.tabAuditors.setVisible(false);
        this.layClientImage.setVisible(true);
        this.txtGender.setRendered(true);
      }
      GlobalCC.refreshUI(this.mainPanel);
      break;
    case NEW_MODE:
      this.tabClientSystems.setRendered(false);
      this.tabClientWebAccounts.setRendered(false);
      this.tabClientDocs.setRendered(true);
      this.tabDetailCreateClient.setDisclosed(true);
      this.tabDetailSearchClients.setDisclosed(false);
      this.tabDetailCreateClient.setVisible(true);
      GlobalCC.refreshUI(this.tabDetailCreateClient);
      this.session.setAttribute("ClientCode", null);

      this.sbrIndividual.setSelected(true);
      this.layClientImage.setVisible(true);
      this.txtGender.setRendered(true);

      this.txtPassportNo.setVisible(true);

      this.clientSignature.setSource(null);
      this.clientPhoto.setSource(null);
      GlobalCC.refreshUI(this.mainPanel);
      break;
    case DEFAULT_MODE:
      this.tabDetailSearchClients.setDisclosed(true);
      GlobalCC.refreshUI(this.mainPanel);
    }
  }

  public String processAddClientSystem()
  {
    boolean processStatusOK = true;
    if ((this.session.getAttribute("ClientCode") == null) || (this.session.getAttribute("ClientCode") == ""))
    {
      processStatusOK = false;
      GlobalCC.errorValueNotEntered("You need to select a Client first.");
    }
    if ((this.txtSelectedClientSystemCode.getValue() == null) || (this.txtSelectedClientSystemCode.getValue() == ""))
    {
      processStatusOK = false;
      GlobalCC.errorValueNotEntered("You need to select a System first.");
    }
    String status;
    if (!(status = check_ifclientActive()).equals("A"))
    {
      GlobalCC.INFORMATIONREPORTING("The Client Status Should be Active::");
      return null;
    }
    if (processStatusOK)
    {
      DBConnector connector = new DBConnector();
      OracleConnection connection = null;
      try
      {
        connection = connector.getDatabaseConnection();
        String query = "begin tqc_clients_pkg.alloc_clnt_system(?,?); end;";
        OracleCallableStatement statement = null;
        statement = (OracleCallableStatement)connection.prepareCall(query);
        statement.setBigDecimal(1, new BigDecimal(this.hiddenClientCode.getValue().toString()));
        statement.setString(2, this.txtSelectedClientSystemCode.getValue().toString());
        statement.execute();
        connection.close();
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(connection, e);
      }
    }
    this.txtSelectedClientSystemCode.setValue((Object)null);
    ADFUtils.findIterator("fetchUnallocatedClientSystemsIterator").executeQuery();
    ADFUtils.findIterator("fetchAllocatedClientSystemsIterator").executeQuery();
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.treeUnassignedClientSystems);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.treeAssignedClientSystems);
    return null;
  }

  public String processRemoveClientSystem()
  {
    boolean processStatusOK = true;
    if ((this.session.getAttribute("ClientCode") == null) || (this.session.getAttribute("ClientCode") == ""))
    {
      processStatusOK = false;
      GlobalCC.errorValueNotEntered("You need to select a Client first.");
    }
    if ((this.txtSelectedClientSystemCode.getValue() == null) || (this.txtSelectedClientSystemCode.getValue() == ""))
    {
      processStatusOK = false;
      GlobalCC.errorValueNotEntered("You need to select a System first.");
    }
    if (processStatusOK)
    {
      DBConnector connector = new DBConnector();
      OracleConnection connection = null;
      try
      {
        connection = connector.getDatabaseConnection();
        String query = "begin tqc_clients_pkg.unalloc_clnt_system(?,?); end;";
        OracleCallableStatement statement = null;
        statement = (OracleCallableStatement)connection.prepareCall(query);
        statement.setBigDecimal(1, new BigDecimal(this.session.getAttribute("ClientCode").toString()));
        statement.setBigDecimal(2, new BigDecimal(this.txtSelectedClientSystemCode.getValue().toString()));
        statement.execute();
        statement.close();
        connection.commit();
        connection.close();
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(connection, e);
      }
    }
    this.txtSelectedClientSystemCode.setValue((Object)null);
    ADFUtils.findIterator("fetchUnallocatedClientSystemsIterator").executeQuery();
    ADFUtils.findIterator("fetchAllocatedClientSystemsIterator").executeQuery();
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.treeUnassignedClientSystems);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.treeAssignedClientSystems);
    return null;
  }

  public void setTblRequiredDocs(RichTable tblRequiredDocs)
  {
    this.tblRequiredDocs = tblRequiredDocs;
  }

  public RichTable getTblRequiredDocs()
  {
    return this.tblRequiredDocs;
  }

  public void setTabDetailCreateClient(RichShowDetailItem tabDetailCreateClient)
  {
    this.tabDetailCreateClient = tabDetailCreateClient;
  }

  public RichShowDetailItem getTabDetailCreateClient()
  {
    return this.tabDetailCreateClient;
  }

  public void setTabDetailSearchClients(RichShowDetailItem tabDetailSearchClients)
  {
    this.tabDetailSearchClients = tabDetailSearchClients;
  }

  public RichShowDetailItem getTabDetailSearchClients()
  {
    return this.tabDetailSearchClients;
  }

  public void setTabClientInfo(RichShowDetailItem tabClientInfo)
  {
    this.tabClientInfo = tabClientInfo;
  }

  public RichShowDetailItem getTabClientInfo()
  {
    return this.tabClientInfo;
  }

  public void setTabClientSystems(RichShowDetailItem tabClientSystems)
  {
    this.tabClientSystems = tabClientSystems;
  }

  public RichShowDetailItem getTabClientSystems()
  {
    return this.tabClientSystems;
  }

  public void setTabClientWebAccounts(RichShowDetailItem tabClientWebAccounts)
  {
    this.tabClientWebAccounts = tabClientWebAccounts;
  }

  public RichShowDetailItem getTabClientWebAccounts()
  {
    return this.tabClientWebAccounts;
  }

  public void setTabClientDocs(RichShowDetailItem tabClientDocs)
  {
    this.tabClientDocs = tabClientDocs;
  }

  public RichShowDetailItem getTabClientDocs()
  {
    return this.tabClientDocs;
  }

  public String actionEditRequiredDoc()
  {
    Object key2 = this.tblRequiredDocs.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding == null)
    {
      GlobalCC.INFORMATIONREPORTING("No record selected.");
      return null;
    }
    this.txtDocCodePop.setValue(nodeBinding.getAttribute("CDOCR_CODE"));
    this.txtReqDocCodePop.setValue(nodeBinding.getAttribute("CDOCR_RDOC_CODE"));
    this.txtReqDocNamePop.setValue(nodeBinding.getAttribute("ROC_DESC"));
    this.txtDocClientCodePop.setValue(nodeBinding.getAttribute("CDOCR_CLNT_CODE"));
    this.txtDocSubmittedPop.setValue(nodeBinding.getAttribute("CDOCR_SUBMITED"));
    this.txtDocDateSubmittedPop.setValue(nodeBinding.getAttribute("CDOCR_DATE_S"));
    this.txtDocRefNumPop.setValue(nodeBinding.getAttribute("CDOCR_REF_NO"));
    this.txtDocRemarkPop.setValue(nodeBinding.getAttribute("CDOCR_RMRK"));
    this.txtDocUserReceivedPop.setValue(nodeBinding.getAttribute("CDOCR_USER_RECEIVD"));
    this.btnSaveRequiredDoc.setText("Edit");
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:requiredDocsPop').show(hints);");
    return null;
  }

  public String actionNewRequiredDoc()
  {
    if (this.session.getAttribute("ClientCode") != null)
    {
      this.txtDocCodePop.setValue((Object)null);
      this.txtReqDocCodePop.setValue((Object)null);
      this.txtReqDocNamePop.setValue((Object)null);
      this.txtDocClientCodePop.setValue(this.session.getAttribute("ClientCode"));
      this.txtDocDateSubmittedPop.setValue((Object)null);
      this.txtDocRefNumPop.setValue((Object)null);
      this.txtDocRemarkPop.setValue((Object)null);
      this.txtDocUserReceivedPop.setValue(this.session.getAttribute("Username"));
      this.btnSaveRequiredDoc.setText("Save");
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:requiredDocsPop').show(hints);");
    }
    else
    {
      GlobalCC.INFORMATIONREPORTING("No Client Selected:");
    }
    return null;
  }

  public String actionDeleteRequiredDoc()
  {
    Object key2 = this.tblRequiredDocs.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding == null)
    {
      GlobalCC.INFORMATIONREPORTING("No Record selected.");
      return null;
    }
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:confirmDeleteClientRequiredDocs').show(hints);");
    return null;
  }

  public String actionAcceptRequireddDoc()
  {
    Object key2 = this.tblReqDocsList.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.txtReqDocCodePop.setValue(nodeBinding.getAttribute("code"));
      this.txtReqDocNamePop.setValue(nodeBinding.getAttribute("description"));
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtReqDocNamePop);
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:requiredDocsPop').show(hints);");
    }
    System.out.println("txtReqDocCodePop " + this.txtReqDocCodePop.getValue());
    GlobalCC.dismissPopUp("pt1", "requiredDocsListPop");
    return null;
  }

  public String actionRejectRequiredDoc()
  {
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:requiredDocsPop').show(hints);");
    return null;
  }

  public void setTblReqDocsList(RichTable tblReqDocsList)
  {
    this.tblReqDocsList = tblReqDocsList;
  }

  public RichTable getTblReqDocsList()
  {
    return this.tblReqDocsList;
  }

  public String actionSaveRequiredDoc()
  {
    String status;
    if (this.btnSaveRequiredDoc.getText().equals("Edit"))
    {
      status = actionEditClientRequiredDoc();
    }
    else
    {
      Object docCode = null;
      String docReqDocCode = GlobalCC.checkNullValues(this.txtReqDocCodePop.getValue());
      String docClientCode = GlobalCC.checkNullValues(this.txtDocClientCodePop.getValue());
      String docSubmitted = GlobalCC.checkNullValues(this.txtDocSubmittedPop.getValue());
      String docDateSubmit = GlobalCC.checkNullValues(this.txtDocDateSubmittedPop.getValue());
      String docRefNum = GlobalCC.checkNullValues(this.txtDocRefNumPop.getValue());
      String docRemark = GlobalCC.checkNullValues(this.txtDocRemarkPop.getValue());
      if (docReqDocCode == null)
      {
        GlobalCC.errorValueNotEntered("Error Value Missing: Required Document is Empty");
        return null;
      }
      if (docClientCode == null)
      {
        GlobalCC.errorValueNotEntered("Error Value Missing: You need to select a client");
        return null;
      }
      if (docSubmitted == null)
      {
        GlobalCC.errorValueNotEntered("Error Value Missing: Specify if Submitted");
        return null;
      }
      if (docDateSubmit == null)
      {
        GlobalCC.errorValueNotEntered("Error Value Missing: Enter Personel Rank");
        return null;
      }
      String Query = "begin TQC_WEB_PKG.saveClientDocuments(?,?,?,?,?,?,?,?,?); end;";
      DBConnector connector = new DBConnector();
      OracleCallableStatement cst = null;
      OracleConnection conn = null;
      try
      {
        conn = connector.getDatabaseConnection();
        cst = (OracleCallableStatement)conn.prepareCall(Query);
        SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
        java.util.Date docSubmitDate = new java.util.Date();
        if ((this.txtDocDateSubmittedPop.getValue() != null) && (!this.txtDocDateSubmittedPop.getValue().equals("")))
        {
          String date1 = df.format(this.txtDocDateSubmittedPop.getValue());
          docSubmitDate = df.parse(date1);
        }
        cst.setString(1, "A");
        cst.setBigDecimal(2, null);
        cst.setString(3, docReqDocCode);
        cst.setString(4, docClientCode);
        cst.setString(5, docSubmitted);
        cst.setDate(6, new java.sql.Date(docSubmitDate.getTime()));
        cst.setString(7, docRefNum);
        cst.setString(8, docRemark);
        cst.setString(9, (String)this.session.getAttribute("Username"));
        cst.execute();
        cst.close();
        conn.close();
        ADFUtils.findIterator("fetchClientRequiredDocsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblRequiredDocs);
        GlobalCC.dismissPopUp("pt1", "requiredDocsPop");
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(conn, e);
      }
    }
    return null;
  }

  public String actionEditClientRequiredDoc()
  {
    String docCode = GlobalCC.checkNullValues(this.txtDocCodePop.getValue());
    String docReqDocCode = GlobalCC.checkNullValues(this.txtReqDocCodePop.getValue());
    String docClientCode = GlobalCC.checkNullValues(this.txtDocClientCodePop.getValue());
    String docSubmitted = GlobalCC.checkNullValues(this.txtDocSubmittedPop.getValue());
    String docDateSubmit = GlobalCC.checkNullValues(this.txtDocDateSubmittedPop.getValue());
    String docRefNum = GlobalCC.checkNullValues(this.txtDocRefNumPop.getValue());
    String docRemark = GlobalCC.checkNullValues(this.txtDocRemarkPop.getValue());
    if (docReqDocCode == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Code is Empty");
      return null;
    }
    if (docReqDocCode == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Required Document is Empty");
      return null;
    }
    if (docClientCode == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: You need to select a client");
      return null;
    }
    if (docSubmitted == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Specify if Submitted");
      return null;
    }
    if (docDateSubmit == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Enter Personel Rank");
      return null;
    }
    String Query = "begin TQC_WEB_PKG.saveClientDocuments(?,?,?,?,?,?,?,?,?); end;";
    DBConnector connector = new DBConnector();
    OracleCallableStatement cst = null;
    OracleConnection conn = null;
    try
    {
      conn = connector.getDatabaseConnection();
      cst = (OracleCallableStatement)conn.prepareCall(Query);
      SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
      java.util.Date docSubmitDate = new java.util.Date();
      if ((this.txtDocDateSubmittedPop.getValue() != null) && (!this.txtDocDateSubmittedPop.getValue().equals("")))
      {
        String date1 = df.format(this.txtDocDateSubmittedPop.getValue());
        docSubmitDate = df.parse(date1);
      }
      cst.setString(1, "E");
      cst.setBigDecimal(2, new BigDecimal(docCode));
      cst.setString(3, docReqDocCode);
      cst.setString(4, docClientCode);
      cst.setString(5, docSubmitted);
      cst.setDate(6, new java.sql.Date(docSubmitDate.getTime()));
      cst.setString(7, docRefNum);
      cst.setString(8, docRemark);
      cst.setString(9, (String)this.session.getAttribute("Username"));
      cst.execute();
      cst.close();
      conn.commit();
      conn.close();
      ADFUtils.findIterator("fetchClientRequiredDocsIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblRequiredDocs);
      GlobalCC.dismissPopUp("pt1", "requiredDocsPop");
      String message = "Record UPDATED Successfully!";
      GlobalCC.INFORMATIONREPORTING(message);
    }
    catch (Exception e)
    {
      GlobalCC.EXCEPTIONREPORTING(conn, e);
    }
    return null;
  }

  public void setConfirmationDialog(RichPopup confirmationDialog)
  {
    this.confirmationDialog = confirmationDialog;
  }

  public RichPopup getConfirmationDialog()
  {
    return this.confirmationDialog;
  }

  public void confirmationDialogListener(DialogEvent dialogEvent)
  {
    if ((!dialogEvent.getOutcome().equals(DialogEvent.Outcome.no)) && (dialogEvent.getOutcome().equals(DialogEvent.Outcome.yes)))
    {
      String Query = "begin ? := tqc_clients_pkg.delete_client(?,?";
      DBConnector connector = new DBConnector();
      OracleCallableStatement cst = null;
      OracleConnection conn = null;
      try
      {
        conn = connector.getDatabaseConnection();
        cst = (OracleCallableStatement)conn.prepareCall(Query);
        cst.registerOutParameter(1, 12);
        cst.setBigDecimal(2, new BigDecimal(this.session.getAttribute("ClientCode").toString()));
        cst.execute();
        String err = cst.getString(1);
        cst.close();
        conn.commit();
        conn.close();
        if (err != null)
        {
          GlobalCC.INFORMATIONREPORTING(err);
        }
        else
        {
          this.session.removeAttribute("ClientCode");
          ADFUtils.findIterator("fetchClientsByCriteriaIterator").executeQuery();
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblClients);
          String message = "Client DELETED Successfully!";
          GlobalCC.INFORMATIONREPORTING(message);
        }
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(conn, e);
      }
    }
  }

  public void showMessagePopup(String msgToDisplay)
  {
    this.textToShow.setValue((Object)null);
    this.textToShow.setValue(msgToDisplay);
    FacesContext context = FacesContext.getCurrentInstance();
    RichTable source = this.tblClients;
    String alignId = source.getClientId(context);
    String popupId = "pt1:ServerMessage";
    StringBuilder script = new StringBuilder();
    script.append("var popup = AdfPage.PAGE.findComponent('").append(popupId).append("'); ").append("if (!popup.isPopupVisible()) { ").append("var hints = {}; ").append("hints[AdfRichPopup.HINT_ALIGN_ID] = '").append(alignId).append("'; ").append("hints[AdfRichPopup.HINT_ALIGN] = AdfRichPopup.ALIGN_AFTER_START; ").append("popup.show(hints);}");
    ExtendedRenderKitService erks = (ExtendedRenderKitService)Service.getService(context.getRenderKit(), ExtendedRenderKitService.class);
    erks.addScript(context, script.toString());
  }

  public void setClientCodeValue(RichOutputLabel clientCodeValue)
  {
    this.clientCodeValue = clientCodeValue;
  }

  public RichOutputLabel getClientCodeValue()
  {
    return this.clientCodeValue;
  }

  public void setOlConfirmMsgValue(RichOutputLabel olConfirmMsgValue)
  {
    this.olConfirmMsgValue = olConfirmMsgValue;
  }

  public RichOutputLabel getOlConfirmMsgValue()
  {
    return this.olConfirmMsgValue;
  }

  public void setTextToShow(RichOutputText textToShow)
  {
    this.textToShow = textToShow;
  }

  public RichOutputText getTextToShow()
  {
    return this.textToShow;
  }

  public void setTxtClientTitle(RichInputText txtClientTitle)
  {
    this.txtClientTitle = txtClientTitle;
  }

  public RichInputText getTxtClientTitle()
  {
    return this.txtClientTitle;
  }

  public void setTblClientTitles(RichTable tblClientTitles)
  {
    this.tblClientTitles = tblClientTitles;
  }

  public RichTable getTblClientTitles()
  {
    return this.tblClientTitles;
  }

  public String actionAcceptClientTitle()
  {
    Object key2 = this.tblClientTitles.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.txtClientTitleCode.setValue(nodeBinding.getAttribute("shortDesc"));
      this.txtClientTitle.setValue(nodeBinding.getAttribute("description"));
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtClientTitle);
    }
    GlobalCC.dismissPopUp("pt1", "clientTitlePop");
    return null;
  }

  public String actionUpdateClientAccount()
    throws Exception
  {
    String accCode = GlobalCC.checkNullValues(this.txtAccountCode.getValue());
    String accShtDesc = GlobalCC.checkNullValues(this.txtAccShortDesc.getValue());
    String accName = GlobalCC.checkNullValues(this.txtAccName.getValue());
    String accClientCode = GlobalCC.checkNullValues(this.txtAccClientCode.getValue());
    String accCreatedBy = GlobalCC.checkNullValues(this.txtAccCreatedBy.getValue());
    String accDateCreated = GlobalCC.checkNullValues(this.txtAccDateCreated.getValue());
    String accStatus = GlobalCC.checkNullValues(this.txtClientAccStatus.getValue());
    String accRemarks = GlobalCC.checkNullValues(this.txtAccRemarks.getValue());
    String accWef = GlobalCC.checkNullValues(this.txtAccWef.getValue());
    String accWet = GlobalCC.checkNullValues(this.txtAccWet.getValue());
    if (accCode == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Code is Empty");
      return null;
    }
    if (accShtDesc == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Short Description is Empty");
      return null;
    }
    if (accName == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Name is Empty");
      return null;
    }
    if (accWef == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: WEF date is missing");
      return null;
    }
    if (accStatus == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Select a status");
      return null;
    }
    String Query = "begin tqc_clients_pkg.create_client_account(?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
    DBConnector connector = new DBConnector();
    OracleCallableStatement cst = null;
    OracleConnection conn = null;
    try
    {
      conn = connector.getDatabaseConnection();
      cst = (OracleCallableStatement)conn.prepareCall(Query);
      String checkNullValues = GlobalCC.checkNullValues(this.session.getAttribute("ClientCode"));
      cst.setString(1, "E");
      cst.setBigDecimal(2, new BigDecimal(accCode));
      cst.setString(3, accShtDesc);
      cst.setString(4, accName);
      cst.setObject(5, this.session.getAttribute("ClientCode"));
      cst.setString(6, (String)this.session.getAttribute("Username"));
      cst.setDate(7, null);
      cst.setString(8, accStatus);
      cst.setString(9, accRemarks);
      cst.setDate(10, GlobalCC.extractDate(this.txtAccWef));
      cst.setDate(11, GlobalCC.extractDate(this.txtAccWet));
      cst.setBigDecimal(12, (BigDecimal)this.session.getAttribute("BrnDivCode"));
      cst.setBigDecimal(13, (BigDecimal)this.session.getAttribute("branchCode"));
      cst.execute();
      cst.close();
      conn.commit();
      conn.close();
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:clientAccountPopup').hide(hints);");
      String message = "Client Account UPDATED Successfully!";
      showMessagePopup(message);
      ADFUtils.findIterator("fetchClientAccountsIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblClientAccounts);
    }
    catch (Exception e)
    {
      GlobalCC.EXCEPTIONREPORTING(conn, e);
    }
    finally
    {
      if (cst != null)
      {
        cst.close();
        conn.close();
      }
    }
    return null;
  }

  public String actionSaveUpdateClientAccount()
  {
    if (this.btnSaveUpdateClientAccount.getText().equals("Update"))
    {
      try
      {
        actionUpdateClientAccount();
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING((OracleConnection)null, e);
      }
    }
    else
    {
      String accCode = GlobalCC.checkNullValues(this.txtAccountCode.getValue());
      String accName = GlobalCC.checkNullValues(this.txtAccName.getValue());
      String accClientCode = GlobalCC.checkNullValues(this.txtAccClientCode.getValue());
      String shortDesc = GlobalCC.checkNullValues(this.txtAccShortDesc.getValue());
      String accCreatedBy = GlobalCC.checkNullValues(this.txtAccCreatedBy.getValue());
      String accDateCreated = GlobalCC.checkNullValues(this.txtAccDateCreated.getValue());
      String accStatus = GlobalCC.checkNullValues(this.txtClientAccStatus.getValue());
      String accRemarks = GlobalCC.checkNullValues(this.txtAccRemarks.getValue());
      String accWef = GlobalCC.checkNullValues(this.txtAccWef.getValue());
      String accWet = GlobalCC.checkNullValues(this.txtAccWet.getValue());
      String cltCellNos = GlobalCC.checkNullValues(this.txtClientCellNos.getValue());
      if (this.txtBrnDivName.getValue() == null)
      {
        GlobalCC.errorValueNotEntered("Error Value Missing Select Branch Division");
        return null;
      }
      if (accName == null)
      {
        GlobalCC.errorValueNotEntered("Error Value Missing: Name is Empty");
        return null;
      }
      if (accWef == null)
      {
        GlobalCC.errorValueNotEntered("Error Value Missing: WEF date is missing");
        return null;
      }
      if (accStatus == null)
      {
        GlobalCC.errorValueNotEntered("Error Value Missing: Select a status");
        return null;
      }
      String Query = "begin tqc_clients_pkg.create_client_account(?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
      DBConnector connector = new DBConnector();
      OracleCallableStatement cst = null;
      OracleConnection conn = null;
      try
      {
        conn = connector.getDatabaseConnection();
        cst = (OracleCallableStatement)conn.prepareCall(Query);
        String checkNullValues = GlobalCC.checkNullValues(this.session.getAttribute("ClientCode"));
        this.session.getAttribute("ClientCode");
        cst.setString(1, (String)this.session.getAttribute("clientAcountAction"));
        cst.setString(2, null);
        cst.setString(3, shortDesc);
        cst.setString(4, accName);
        cst.setObject(5, this.session.getAttribute("ClientCode"));
        cst.setString(6, (String)this.session.getAttribute("Username"));
        cst.setDate(7, new java.sql.Date(new java.util.Date().getTime()));
        cst.setString(8, accStatus);
        cst.setString(9, accRemarks);
        cst.setDate(10, GlobalCC.extractDate(this.txtAccWef));
        cst.setDate(11, GlobalCC.extractDate(this.txtAccWet));
        cst.setBigDecimal(12, (BigDecimal)this.session.getAttribute("BrnDivCode"));
        cst.setBigDecimal(13, (BigDecimal)this.session.getAttribute("branchCode"));
        cst.execute();
        cst.close();
        conn.commit();
        conn.close();
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:clientAccountPopup').hide(hints);");
        String message = "Client Account ADDED Successfully!";
        showMessagePopup(message);
        ADFUtils.findIterator("fetchClientAccountsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblClientAccounts);
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(conn, e);
        e.printStackTrace();
      }
    }
    return null;
  }

  public void clearClientAccountFields()
  {
    this.txtAccountCode.setValue((Object)null);
    this.txtAccShortDesc.setValue((Object)null);
    if (this.txtSurname.getValue() != null) {
      this.txtAccName.setValue(this.txtSurname.getValue());
    } else {
      this.txtAccName.setValue((Object)null);
    }
    if (this.txtWef.getValue() != null) {
      this.txtAccWef.setValue(this.txtWef.getValue());
    } else {
      this.txtAccWef.setValue((Object)null);
    }
    if (this.session.getAttribute("ClientCode") != null) {
      this.txtAccClientCode.setValue(this.session.getAttribute("ClientCode").toString());
    } else {
      this.txtAccClientCode.setValue((Object)null);
    }
    this.txtAccCreatedBy.setValue((Object)null);
    this.txtAccDateCreated.setValue((Object)null);
    this.txtAccRemarks.setValue((Object)null);
    this.txtAccWet.setValue((Object)null);
    this.txtClientAccStatus.setDisabled(false);
  }

  public String actionNewClientAccount()
  {
    try
    {
      if (this.session.getAttribute("ClientCode") != null)
      {
        clearClientAccountFields();
        this.btnSaveUpdateClientAccount.setText("Save");
        this.session.setAttribute("clientAcountAction", "A");
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:clientAccountPopup').show(hints);");
      }
      else
      {
        GlobalCC.INFORMATIONREPORTING("No client Selected::");
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return null;
  }

  public void genAccNo(ValueChangeEvent evt)
  {
    if ((evt.getNewValue() != evt.getOldValue()) && (evt.getNewValue() != null)) {
      if (this.genAcSelectYes.isSelected())
      {
        this.txtAccShortDesc.setDisabled(true);
        this.txtAccShortDesc.setValue((Object)null);
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtAccShortDesc);
      }
      else if (this.genAccNoSelect.isSelected())
      {
        this.txtAccShortDesc.setDisabled(false);
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtAccShortDesc);
      }
    }
  }

  public String actionEditClientAccount()
  {
    Object key2 = this.tblClientAccounts.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.session.setAttribute("clientAcountAction", "E");
      this.txtAccountCode.setValue(nodeBinding.getAttribute("code"));
      this.txtAccShortDesc.setValue(nodeBinding.getAttribute("shortDesc"));
      this.txtAccName.setValue(nodeBinding.getAttribute("name"));
      this.txtAccClientCode.setValue(nodeBinding.getAttribute("clientCode"));
      this.txtAccCreatedBy.setValue(nodeBinding.getAttribute("createdBy"));
      this.txtAccDateCreated.setValue(nodeBinding.getAttribute("dateCreated"));
      this.txtClientAccStatus.setValue(nodeBinding.getAttribute("status"));
      this.txtAccRemarks.setValue(nodeBinding.getAttribute("remarks"));
      this.txtAccWef.setValue(nodeBinding.getAttribute("wef"));
      this.txtAccWet.setValue(nodeBinding.getAttribute("wet"));
      this.txtBrnDivName.setValue(nodeBinding.getAttribute("divName"));
      this.btnSaveUpdateClientAccount.setText("Update");
      this.session.setAttribute("BrnDivCode", nodeBinding.getAttribute("bdivCode"));
      Authorization auth = new Authorization();
      String process = "AMA";
      String processArea = "AMAC";
      String processSubArea = "AMACDA";
      String AccessGranted = auth.checkUserRightsNoError(process, processArea, processSubArea, null, null);
      if (AccessGranted.equalsIgnoreCase("Y")) {
        this.txtClientAccStatus.setDisabled(false);
      } else {
        this.txtClientAccStatus.setDisabled(true);
      }
    }
    else
    {
      GlobalCC.INFORMATIONREPORTING("No record selected.");
      return null;
    }
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:clientAccountPopup').show(hints);");
    return null;
  }

  public String actionDeleteClientAccount()
  {
    Object key2 = this.tblClientAccounts.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding == null)
    {
      GlobalCC.INFORMATIONREPORTING("No Record selected.");
      return null;
    }
    String accCode = nodeBinding.getAttribute("code").toString();
    this.session.setAttribute("ClientAccountCode", accCode);
    String msg = "Are you sure you wish to DELETE Client Account No " + this.session.getAttribute("ClientAccountCode").toString();
    this.confirmDeleteAccMsg.setValue(msg);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:confirmDeleteClientAcc').show(hints);");
    return null;
  }

  public void branchDivSelected(DialogEvent dialogEvent)
  {
    Object key2;
    JUCtrlValueBinding nodeBinding;
    if ((dialogEvent.getOutcome() == DialogEvent.Outcome.ok) && ((nodeBinding = (JUCtrlValueBinding)(key2 = this.brnDivLov.getSelectedRowData())) != null))
    {
      this.txtBrnDivName.setValue(nodeBinding.getAttribute("DIV_NAME"));
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtBrnDivName);
      this.session.setAttribute("BrnDivCode", nodeBinding.getAttribute("DIV_CODE"));
    }
  }

  public String actionShowadminRegions()
  {
    if (this.txtCountryCode.getValue() == null)
    {
      GlobalCC.INFORMATIONREPORTING("You need to select a Country first to proceed.");
      return null;
    }
    this.session.setAttribute("countryCode", this.txtCountryCode.getValue());
    ADFUtils.findIterator("fetchStatesByCountry1Iterator").executeQuery();
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblStates);
    ADFUtils.findIterator("fetchAlLMobileTypePrefixIterator").executeQuery();
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.prefixTbl);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:adminRegionsPop').show(hints);");
    return null;
  }

  public String actionAcceptAdminRegion()
  {
    Object key2 = this.tblStates.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.txtAdminRegionCode.setValue(nodeBinding.getAttribute("stateCode"));
      this.txtAdminRegionName.setValue(nodeBinding.getAttribute("stateName"));
      this.txtTownName.setValue((Object)null);
      this.txtTownCode.setValue((Object)null);
      this.txtZipCode.setValue((Object)null);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.panelCreateClient);
    }
    GlobalCC.dismissPopUp("pt1", "adminRegionsPop");
    return null;
  }

  public void setClientTitlePan(RichPanelLabelAndMessage clientTitlePan)
  {
    this.clientTitlePan = clientTitlePan;
  }

  public RichPanelLabelAndMessage getClientTitlePan()
  {
    return this.clientTitlePan;
  }

  public void setGenAcSelectYes(RichSelectBooleanRadio genAcSelectYes)
  {
    this.genAcSelectYes = genAcSelectYes;
  }

  public RichSelectBooleanRadio getGenAcSelectYes()
  {
    return this.genAcSelectYes;
  }

  public void setGenAccNoSelect(RichSelectBooleanRadio genAccNoSelect)
  {
    this.genAccNoSelect = genAccNoSelect;
  }

  public RichSelectBooleanRadio getGenAccNoSelect()
  {
    return this.genAccNoSelect;
  }

  public void deleteClientAccountsListener(DialogEvent dialogEvent)
  {
    if ((!dialogEvent.getOutcome().equals(DialogEvent.Outcome.no)) && (dialogEvent.getOutcome().equals(DialogEvent.Outcome.yes)))
    {
      String accCode = this.session.getAttribute("ClientAccountCode").toString();
      String Query = "begin tqc_clients_pkg.create_client_account(?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
      DBConnector connector = new DBConnector();
      OracleCallableStatement cst = null;
      OracleConnection conn = null;
      try
      {
        conn = connector.getDatabaseConnection();
        cst = (OracleCallableStatement)conn.prepareCall(Query);
        SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
        cst.setString(1, "D");
        cst.setBigDecimal(2, new BigDecimal(accCode));
        cst.setString(3, null);
        cst.setString(4, null);
        cst.setBigDecimal(5, new BigDecimal(this.session.getAttribute("ClientCode").toString()));
        cst.setString(6, (String)this.session.getAttribute("Username"));
        cst.setDate(7, null);
        cst.setString(8, null);
        cst.setString(9, null);
        cst.setDate(10, null);
        cst.setDate(11, null);
        cst.setBigDecimal(12, null);
        cst.setBigDecimal(13, null);
        cst.execute();
        cst.close();
        conn.commit();
        conn.close();
        ADFUtils.findIterator("fetchClientAccountsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblClientAccounts);
        String message = "Client Account DELETED Successfully!";
        showMessagePopup(message);
      }
      catch (Exception e)
      {
        e.printStackTrace();
        GlobalCC.EXCEPTIONREPORTING(conn, e);
      }
    }
  }

  public void setConfirmDeleteAccMsg(RichOutputLabel confirmDeleteAccMsg)
  {
    this.confirmDeleteAccMsg = confirmDeleteAccMsg;
  }

  public RichOutputLabel getConfirmDeleteAccMsg()
  {
    return this.confirmDeleteAccMsg;
  }

  public void setTbClientListingBasedOnNames(RichTable tbClientListingBasedOnNames)
  {
    this.tbClientListingBasedOnNames = tbClientListingBasedOnNames;
  }

  public RichTable getTbClientListingBasedOnNames()
  {
    return this.tbClientListingBasedOnNames;
  }

  public void confirmSavingOfTheAcc(DialogEvent dialogEvent)
  {
    this.session.setAttribute("saveStatus", (Object)null);
    if (dialogEvent.getOutcome().equals(DialogEvent.Outcome.no))
    {
      this.session.setAttribute("saveStatus", "NO");
    }
    else if (dialogEvent.getOutcome().equals(DialogEvent.Outcome.yes))
    {
      this.session.setAttribute("saveStatus", "YES");
      processCreateUpdateClient();
    }
  }

  public void confirmSaccoContinue(DialogEvent dialogEvent)
  {
    this.session.setAttribute("saveSaccoStatus", (Object)null);
    if (dialogEvent.getOutcome().equals(DialogEvent.Outcome.no))
    {
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:saccoReq').hide(hints);");
      this.session.setAttribute("saveSaccoStatus", "NO");
    }
    else if (dialogEvent.getOutcome().equals(DialogEvent.Outcome.yes))
    {
      this.session.setAttribute("saveSaccoStatus", "YES");
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:saccoReq').hide(hints);");
      int counter = 0;
      if (this.session.getAttribute("count") != null)
      {
        String noOfRecords = this.session.getAttribute("count").toString();
        counter = Integer.parseInt(noOfRecords);
        if (counter >= 1)
        {
          erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
          erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:p2').show(hints);");
        }
        else
        {
          processCreateUpdateClient();
        }
      }
      else
      {
        processCreateUpdateClient();
      }
    }
  }

  public void setConfirmSaveDialog(RichDialog confirmSaveDialog)
  {
    this.confirmSaveDialog = confirmSaveDialog;
  }

  public RichDialog getConfirmSaveDialog()
  {
    return this.confirmSaveDialog;
  }

  public void confirmSaveAgencyDialogListener(DialogEvent dialogEvent) {}

  public String actionAuthorizeClient()
  {
    Authorization auth = new Authorization();
    String process = "CLCR";
    String processArea = "CLAU";
    String processSubArea = "CLAU";
    String AccessGranted = auth.checkUserRights(process, processArea, processSubArea, null, null);
    if (!AccessGranted.equalsIgnoreCase("Y"))
    {
      GlobalCC.INFORMATIONREPORTING("Sorry. You Do not Have The Rights to authorize a client.");
      return null;
    }
    if (this.session.getAttribute("ClientCode") != null)
    {
      String status = check_ifclientActive();
      if (status != null)
      {
        if ((status.equalsIgnoreCase("D")) || (status.equalsIgnoreCase("R")))
        {
          DBConnector dbConnector = new DBConnector();
          OracleConnection conn = null;
          String Query = "BEGIN TQC_CLIENTS_PKG.authorise_client(?,?,?);END;";
          DBConnector connector = new DBConnector();
          OracleCallableStatement cst = null;
          try
          {
            conn = connector.getDatabaseConnection();
            cst = (OracleCallableStatement)conn.prepareCall(Query);
            cst.registerOutParameter(1, 12);
            cst.setBigDecimal(2, new BigDecimal(this.session.getAttribute("ClientCode").toString()));
            cst.setString(3, "A");
            cst.execute();
            String err = cst.getString(1);
            if (err != null)
            {
              GlobalCC.INFORMATIONREPORTING(err);
              return null;
            }
            this.selectStatusActive.setDisabled(false);
            this.selectStatusDraft.setDisabled(true);
            this.selectStatusInactive.setDisabled(false);
            this.selectStatusRejected.setDisabled(true);
            this.txtStatus.setValue("D");
            String message = "Client   Authorised  Successfully!";
            this.txtStatus.setValue("A");
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtStatus);
            GlobalCC.INFORMATIONREPORTING(message);
            return null;
          }
          catch (Exception e)
          {
            e.printStackTrace();
            GlobalCC.EXCEPTIONREPORTING(conn, e);

            return null;
          }
        }
        if (status.equalsIgnoreCase("A"))
        {
          GlobalCC.INFORMATIONREPORTING("The Client Status is Already Authorised::");
          return null;
        }
        if (status.equalsIgnoreCase("I"))
        {
          GlobalCC.INFORMATIONREPORTING("The Client Status is Inactive::You can only set it to Active");
          return null;
        }
        if (!status.equalsIgnoreCase("R")) {
          return null;
        }
        GlobalCC.INFORMATIONREPORTING("The Client status is  Rejected::");
        return null;
      }
      GlobalCC.INFORMATIONREPORTING("The Client Status is Not set::");
      return null;
    }
    GlobalCC.INFORMATIONREPORTING("Client Code Required::");
    return null;
  }

  public String actionRejectClient()
  {
    Authorization auth = new Authorization();
    String process = "CLAU";
    String processArea = "CLAU";
    String processSubArea = "CLAU";
    String AccessGranted = auth.checkUserRights(process, processArea, processSubArea, null, null);
    if (!AccessGranted.equalsIgnoreCase("Y"))
    {
      GlobalCC.INFORMATIONREPORTING("Sorry. You Do not Have The Rights to reject a client.");
      return null;
    }
    if (this.session.getAttribute("ClientCode") != null)
    {
      if (checkIfUserAlowedToAuthorize())
      {
        String status = check_ifclientActive();
        if (status == null) {
          return null;
        }
        if (status.equalsIgnoreCase("D"))
        {
          String Query = "BEGIN TQC_CLIENTS_PKG.authorise_client(?,?,?);END;";
          DBConnector connector = new DBConnector();
          OracleCallableStatement cst = null;
          OracleConnection conn = null;
          try
          {
            conn = connector.getDatabaseConnection();
            cst = (OracleCallableStatement)conn.prepareCall(Query);
            cst.registerOutParameter(1, 12);
            cst.setBigDecimal(2, new BigDecimal(this.session.getAttribute("ClientCode").toString()));
            cst.setString(3, "R");
            cst.execute();
            String err = cst.getString(1);
            if (err != null)
            {
              GlobalCC.INFORMATIONREPORTING(err);
              return null;
            }
            String message = "Client Rejected Successfully!";
            this.txtStatus.setValue("R");
            this.selectStatusRejected.setDisabled(false);
            this.selectStatusDraft.setDisabled(true);
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtStatus);
            GlobalCC.INFORMATIONREPORTING(message);
            return null;
          }
          catch (Exception e)
          {
            e.printStackTrace();
            GlobalCC.EXCEPTIONREPORTING(conn, e);

            return null;
          }
        }
        if (status.equalsIgnoreCase("A"))
        {
          GlobalCC.INFORMATIONREPORTING("The Client Status is Already Authorised:: You can only set it to InActive ");
          return null;
        }
        if (status.equalsIgnoreCase("I"))
        {
          GlobalCC.INFORMATIONREPORTING("The Client Status is Inactive::You can only set it to Active");
          return null;
        }
        if (!status.equalsIgnoreCase("R")) {
          return null;
        }
        GlobalCC.INFORMATIONREPORTING("The Client status is Already Rejected::");
        return null;
      }
      GlobalCC.INFORMATIONREPORTING("You don't have permission to Authorise");
      return null;
    }
    GlobalCC.INFORMATIONREPORTING("Client Code Required::");
    return null;
  }

  public BigDecimal getClientCode()
  {
    if (this.session.getAttribute("ClientCode") != null)
    {
      this.clnt_code = new BigDecimal(this.session.getAttribute("ClientCode").toString());
      return this.clnt_code;
    }
    this.clnt_code = new BigDecimal(63536);
    return this.clnt_code;
  }

  public void setBtnAuthorizeClient(RichCommandButton btnAuthorizeClient)
  {
    this.btnAuthorizeClient = btnAuthorizeClient;
  }

  public RichCommandButton getBtnAuthorizeClient()
  {
    return this.btnAuthorizeClient;
  }

  public void setSelectStatusDraft(RichSelectItem selectStatusDraft)
  {
    this.selectStatusDraft = selectStatusDraft;
  }

  public RichSelectItem getSelectStatusDraft()
  {
    return this.selectStatusDraft;
  }

  public void setSelectStatusInactive(RichSelectItem selectStatusInactive)
  {
    this.selectStatusInactive = selectStatusInactive;
  }

  public RichSelectItem getSelectStatusInactive()
  {
    return this.selectStatusInactive;
  }

  public void setSelectStatusRejected(RichSelectItem selectStatusRejected)
  {
    this.selectStatusRejected = selectStatusRejected;
  }

  public RichSelectItem getSelectStatusRejected()
  {
    return this.selectStatusRejected;
  }

  public void setSelectStatusActive(RichSelectItem selectStatusActive)
  {
    this.selectStatusActive = selectStatusActive;
  }

  public RichSelectItem getSelectStatusActive()
  {
    return this.selectStatusActive;
  }

  public boolean checkIfUserAlowedToAuthorize()
  {
    DBConnector dbConnector = new DBConnector();
    OracleConnection conn = null;
    Object statement = null;
    OracleConnection connection = null;
    OracleCallableStatement stmt = null;
    Object rs = null;
    String status = null;
    try
    {
      connection = dbConnector.getDatabaseConnection();
      String query1 = "begin ? := TQC_INTERFACES_PKG.check_user_rights(?,?,?,?,?,?,?); end;";
      stmt = (OracleCallableStatement)connection.prepareCall(query1);
      stmt.registerOutParameter(1, 12);
      stmt.setString(2, this.session.getAttribute("Username").toString());
      stmt.setBigDecimal(3, new BigDecimal(0));
      stmt.setString(4, "CLCR");
      stmt.setString(5, "CLAU");
      stmt.setString(6, "CLAU");
      stmt.setBigDecimal(7, null);
      stmt.setString(8, null);
      stmt.execute();
      status = stmt.getString(1);
      if (status.equalsIgnoreCase("Y")) {
        return true;
      }
      if (status.equalsIgnoreCase("N")) {
        return false;
      }
      stmt.close();
      connection.commit();
      connection.close();
    }
    catch (Exception e)
    {
      e.printStackTrace();
      GlobalCC.EXCEPTIONREPORTING(conn, e);
    }
    return false;
  }

  public String actionSearchClient()
  {
    if (this.session.getAttribute("grpCode") != null)
    {
      this.session.setAttribute("grpCode", (Object)null);
      this.session.setAttribute("_search", "false");
      List child = this.panelCollSearch.getChildren();
      UIComponent comp = (UIComponent)child.get(0);
      for (int i2 = 0; i2 < child.size(); i2++)
      {
        comp = (UIComponent)child.get(i2);
        if (!comp.getId().equalsIgnoreCase("t11")) {}
      }
      List children = this.SEARCHHOLDER.getChildren();
      UIComponent component = (UIComponent)children.get(0);
      for (int i = 0; i < children.size(); i++)
      {
        component = (UIComponent)children.get(i);
        if ((component.getId().equalsIgnoreCase("it19")) || (component.getId().equalsIgnoreCase("it20")) || (component.getId().equalsIgnoreCase("it21")) || (component.getId().equalsIgnoreCase("it18")) || (component.getId().equalsIgnoreCase("it25")) || (component.getId().equalsIgnoreCase("it26")))
        {
          RichInputText rpt = (RichInputText)component;
          rpt.setValue((Object)null);
          AdfFacesContext.getCurrentInstance().addPartialTarget(rpt);
        }
        if ((component.getId().equalsIgnoreCase("id4")) || (component.getId().equalsIgnoreCase("id5")))
        {
          RichInputDate rsc = (RichInputDate)component;
          rsc.setValue((Object)null);
          AdfFacesContext.getCurrentInstance().addPartialTarget(rsc);
        }
      }
      children = this.statusHolder.getChildren();
      component = (UIComponent)children.get(0);
      for (int i = 0; i < children.size(); i++)
      {
        component = (UIComponent)children.get(i);
        if (component.getId().equalsIgnoreCase("soc2"))
        {
          RichInputDate rsc = (RichInputDate)component;
          rsc.setValue((Object)null);
          AdfFacesContext.getCurrentInstance().addPartialTarget(rsc);
        }
      }
      children = this.searchClientType.getChildren();
      component = (UIComponent)children.get(0);
      for (int i = 0; i < children.size(); i++)
      {
        component = (UIComponent)children.get(i);
        if (component.getId().equalsIgnoreCase("soc1"))
        {
          RichInputDate rsc = (RichInputDate)component;
          rsc.setValue((Object)null);
          AdfFacesContext.getCurrentInstance().addPartialTarget(rsc);
        }
      }
      this.session.setAttribute("searchCriteria", (Object)null);
    }
    ADFUtils.findIterator("fetchClientsByCriteriaIterator").executeQuery();
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:searchClientPop').show(hints);");
    return null;
  }

  public void setBtnRejectClient(RichCommandButton btnRejectClient)
  {
    this.btnRejectClient = btnRejectClient;
  }

  public RichCommandButton getBtnRejectClient()
  {
    return this.btnRejectClient;
  }

  public void setUploadedImageFile(UploadedFile UploadedImageFile)
  {
    this.UploadedImageFile = UploadedImageFile;
    try
    {
      long Val = UploadedImageFile.getLength();
      InputStream Reader2 = UploadedImageFile.getInputStream();
      byte[] ImageBytes = new byte[Reader2.available()];
      InsertClientImage(Reader2, Val);
    }
    catch (IOException e)
    {
      e.printStackTrace();
    }
  }

  public UploadedFile getUploadedImageFile()
  {
    return this.UploadedImageFile;
  }

  public void ImageUploadedListener(ValueChangeEvent valueChangeEvent)
  {
    if ((this.session.getAttribute("ClientCode") != null) && (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()))
    {
      UploadedFile _file;
      this.UploadedImageFile = (_file = (UploadedFile)valueChangeEvent.getNewValue());
      try
      {
        long Val = this.UploadedImageFile.getLength();
        InputStream Reader2 = this.UploadedImageFile.getInputStream();
        byte[] ImageBytes = new byte[Reader2.available()];
        Boolean isOk = GlobalCC.validateUploadedImg(this.UploadedImageFile, "Client Image");
        if (isOk.booleanValue())
        {
          InsertClientImage(Reader2, Val);
          this.clientPhoto.setSource("/clientimagesservlet?id=" + this.session.getAttribute("ClientCode"));
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.clientPhoto);
        }
        else
        {
          this.uploadedPicture.setValue((Object)null);
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.uploadedPicture);
        }
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING((OracleConnection)null, e);
      }
    }
  }

  public void ImageSignatureUploadedListener(ValueChangeEvent valueChangeEvent)
  {
    if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue())
    {
      UploadedFile _file = (UploadedFile)valueChangeEvent.getNewValue();
      if (this.session.getAttribute("ClientCode") != null)
      {
        this.UploadedImageFile = _file;
        try
        {
          long Val = this.UploadedImageFile.getLength();
          InputStream Reader2 = this.UploadedImageFile.getInputStream();
          byte[] ImageBytes = new byte[Reader2.available()];
          Boolean isOk = GlobalCC.validateUploadedImg(this.UploadedImageFile, "Client Image");
          if (isOk.booleanValue())
          {
            InsertSignatureImage(Reader2, Val);
            this.clientSignature.setSource("/clientsignatureservlet?id=" + this.session.getAttribute("ClientCode"));
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.clientSignature);
          }
          else
          {
            this.uploadSignature.setValue((Object)null);
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.uploadSignature);
          }
        }
        catch (Exception e)
        {
          GlobalCC.EXCEPTIONREPORTING((OracleConnection)null, e);
        }
      }
    }
  }

  public void setClientImage(RichImage clientImage)
  {
    this.clientImage = clientImage;
  }

  public RichImage getClientImage()
  {
    return this.clientImage;
  }

  public void InsertClientImage(InputStream Image, long BytesLength)
  {
    OracleConnection conn = null;
    try
    {
      DBConnector connector = new DBConnector();
      conn = connector.getDatabaseConnection();
      String systemsQuery = "BEGIN TQC_CLIENTS_PKG.update_image(?,?);END;";
      CallableStatement cst = null;
      cst = conn.prepareCall(systemsQuery);
      cst.setBlob(1, Image, BytesLength);
      cst.setBigDecimal(2, new BigDecimal(this.session.getAttribute("ClientCode").toString()));
      cst.execute();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.uploadedPicture);
      conn.close();
    }
    catch (Exception e)
    {
      GlobalCC.EXCEPTIONREPORTING(conn, e);
    }
  }

  public void InsertSignatureImage(InputStream Image, long BytesLength)
  {
    DBConnector connector = new DBConnector();
    OracleConnection conn = connector.getDatabaseConnection();
    try
    {
      String systemsQuery = "BEGIN TQC_CLIENTS_PKG.update_signature(?,?);END;";
      OracleCallableStatement cst = null;
      cst = (OracleCallableStatement)conn.prepareCall(systemsQuery);
      cst.setBlob(1, Image, BytesLength);
      cst.setBigDecimal(2, new BigDecimal(this.session.getAttribute("ClientCode").toString()));
      cst.execute();
      conn.close();
    }
    catch (Exception e)
    {
      GlobalCC.EXCEPTIONREPORTING(conn, e);
    }
  }

  public void setUploadComponent(RichInputFile uploadComponent)
  {
    this.uploadComponent = uploadComponent;
  }

  public RichInputFile getUploadComponent()
  {
    return this.uploadComponent;
  }

  public void setUploadPhoto(RichInputFile uploadPhoto)
  {
    this.uploadPhoto = uploadPhoto;
  }

  public RichInputFile getUploadPhoto()
  {
    return this.uploadPhoto;
  }

  public void setClientSignature(RichImage clientSignature)
  {
    this.clientSignature = clientSignature;
  }

  public RichImage getClientSignature()
  {
    return this.clientSignature;
  }

  public void setClientPhoto(RichImage clientPhoto)
  {
    this.clientPhoto = clientPhoto;
  }

  public RichImage getClientPhoto()
  {
    return this.clientPhoto;
  }

  public void setUploadedPicture(RichInputFile uploadedPicture)
  {
    this.uploadedPicture = uploadedPicture;
  }

  public RichInputFile getUploadedPicture()
  {
    return this.uploadedPicture;
  }

  public void setUploadSignature(RichInputFile uploadSignature)
  {
    this.uploadSignature = uploadSignature;
  }

  public RichInputFile getUploadSignature()
  {
    return this.uploadSignature;
  }

  public void setTxtWebsite(RichInputText txtWebsite)
  {
    this.txtWebsite = txtWebsite;
  }

  public RichInputText getTxtWebsite()
  {
    return this.txtWebsite;
  }

  public void setTxtAuditors(RichInputText txtAuditors)
  {
    this.txtAuditors = txtAuditors;
  }

  public RichInputText getTxtAuditors()
  {
    return this.txtAuditors;
  }

  public void setTxtDLNo(RichInputText txtDLNo)
  {
    this.txtDLNo = txtDLNo;
  }

  public RichInputText getTxtDLNo()
  {
    return this.txtDLNo;
  }

  public void setTxtDateOfEmployment(RichInputDate txtDateOfEmployment)
  {
    this.txtDateOfEmployment = txtDateOfEmployment;
  }

  public RichInputDate getTxtDateOfEmployment()
  {
    return this.txtDateOfEmployment;
  }

  public void setTxtInsurer(RichInputText txtInsurer)
  {
    this.txtInsurer = txtInsurer;
  }

  public RichInputText getTxtInsurer()
  {
    return this.txtInsurer;
  }

  public void setTxtParentCompany(RichInputText txtParentCompany)
  {
    this.txtParentCompany = txtParentCompany;
  }

  public RichInputText getTxtParentCompany()
  {
    return this.txtParentCompany;
  }

  public void setTxtProjectedBusiness(RichInputText txtProjectedBusiness)
  {
    this.txtProjectedBusiness = txtProjectedBusiness;
  }

  public RichInputText getTxtProjectedBusiness()
  {
    return this.txtProjectedBusiness;
  }

  public void setAddAgencyDirectors(RichCommandButton addAgencyDirectors)
  {
    this.addAgencyDirectors = addAgencyDirectors;
  }

  public RichCommandButton getAddAgencyDirectors()
  {
    return this.addAgencyDirectors;
  }

  public void setEditAgencyDirectors(RichCommandButton editAgencyDirectors)
  {
    this.editAgencyDirectors = editAgencyDirectors;
  }

  public RichCommandButton getEditAgencyDirectors()
  {
    return this.editAgencyDirectors;
  }

  public void setDeleteAgencyDirectors(RichCommandButton deleteAgencyDirectors)
  {
    this.deleteAgencyDirectors = deleteAgencyDirectors;
  }

  public RichCommandButton getDeleteAgencyDirectors()
  {
    return this.deleteAgencyDirectors;
  }

  public void setAgencyDirectorId(RichInputText agencyDirectorId)
  {
    this.agencyDirectorId = agencyDirectorId;
  }

  public RichInputText getAgencyDirectorId()
  {
    return this.agencyDirectorId;
  }

  public void setDirectYr(RichInputDate directYr)
  {
    this.directYr = directYr;
  }

  public RichInputDate getDirectYr()
  {
    return this.directYr;
  }

  public void setDirectQualifications(RichInputText directQualifications)
  {
    this.directQualifications = directQualifications;
  }

  public RichInputText getDirectQualifications()
  {
    return this.directQualifications;
  }

  public void setDirectshare(RichInputNumberSpinbox directshare)
  {
    this.directshare = directshare;
  }

  public RichInputNumberSpinbox getDirectshare()
  {
    return this.directshare;
  }

  public void setSaveAgDirectorsAction(RichCommandButton saveAgDirectorsAction)
  {
    this.saveAgDirectorsAction = saveAgDirectorsAction;
  }

  public RichCommandButton getSaveAgDirectorsAction()
  {
    return this.saveAgDirectorsAction;
  }

  public void setTabDirectors(RichShowDetailItem tabDirectors)
  {
    this.tabDirectors = tabDirectors;
  }

  public RichShowDetailItem getTabDirectors()
  {
    return this.tabDirectors;
  }

  public String addAgencyDirectors()
  {
    if (this.session.getAttribute("ClientCode") == null)
    {
      GlobalCC.INFORMATIONREPORTING("CLIENT CODE REQUIRED");
      return null;
    }
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agentDirectorsPop').show(hints);");
    this.directYr.setValue((Object)null);
    this.directname.setValue((Object)null);
    this.directQualifications.setValue((Object)null);
    this.directshare.setValue((Object)null);
    this.saveAgDirectorButton.setText("Save");
    return null;
  }

  public String saveAgDirectorsAction()
  {
    DBConnector connection = new DBConnector();
    String query = "begin TQC_CLIENTS_PKG.TQC_CLIENT_DIRECTORS_PRC(?,?,?,?,?,?,?,?,?);end;";
    Object array = null;
    OracleConnection conn = null;
    OracleCallableStatement stmt = null;
    String drYear = null;
    String drName = null;
    String qual = null;
    String share = null;
    drYear = GlobalCC.checkNullValues(this.directYr.getValue());
    drName = GlobalCC.checkNullValues(this.directname.getValue());
    qual = GlobalCC.checkNullValues(this.directQualifications.getValue());
    share = GlobalCC.checkNullValues(this.directshare.getValue());
    if (drYear == null)
    {
      GlobalCC.errorValueNotEntered("YEAR Required::");
      return null;
    }
    if (drName == null)
    {
      GlobalCC.errorValueNotEntered("Auditor  Name Required::");
      return null;
    }
    if (this.saveAgDirectorButton.getText().equals("Save"))
    {
      BigDecimal yr = null;
      java.util.Date year = (java.util.Date)this.directYr.getValue();
      if ((year != null) && (this.directYr.getValue() != "")) {
        yr = new BigDecimal(new SimpleDateFormat("yyyy").format(year));
      }
      try
      {
        conn = connection.getDatabaseConnection();
        stmt = (OracleCallableStatement)conn.prepareCall(query);
        stmt.setString(1, "A");
        stmt.setBigDecimal(2, null);
        stmt.setBigDecimal(3, new BigDecimal(this.session.getAttribute("ClientCode").toString()));
        stmt.setBigDecimal(4, yr);
        stmt.setString(5, drName);
        stmt.setString(6, qual);
        stmt.setBigDecimal(7, share == null ? null : new BigDecimal(share));
        stmt.setString(8, "");
        stmt.registerOutParameter(9, 12);
        stmt.execute();
        String error = stmt.getString(9);
        if (error == null)
        {
          GlobalCC.INFORMATIONREPORTING("RECORD SAVED SUCCESSFULLY");
          ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
          erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agentDirectorsPop').hide(hints);");
          stmt.close();
          conn.close();
          ADFUtils.findIterator("findClientsDirectorsIterator").executeQuery();
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.agentDirectorsTable);
          return null;
        }
        GlobalCC.INFORMATIONREPORTING(error);
        return null;
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(conn, e);
        return null;
      }
    }
    if (this.saveAgDirectorButton.getText().equals("Update"))
    {
      BigDecimal yr = null;
      java.util.Date year = null;
      if (this.directYr.getValue() != null) {
        year = (java.util.Date)this.directYr.getValue();
      }
      if ((year != null) && (this.directYr.getValue() != "")) {
        yr = new BigDecimal(new SimpleDateFormat("yyyy").format(year));
      }
      try
      {
        conn = connection.getDatabaseConnection();
        stmt = (OracleCallableStatement)conn.prepareCall(query);
        stmt.setString(1, "E");
        stmt.setBigDecimal(2, new BigDecimal(this.agencyDirectorId.getValue().toString()));
        stmt.setBigDecimal(3, new BigDecimal(this.session.getAttribute("ClientCode").toString()));
        stmt.setBigDecimal(4, yr);
        stmt.setString(5, drName);
        stmt.setString(6, qual);
        stmt.setBigDecimal(7, qual == null ? null : new BigDecimal(qual));
        stmt.setString(8, qual);
        stmt.registerOutParameter(9, 12);
        stmt.execute();
        String error = stmt.getString(9);
        if (error == null)
        {
          GlobalCC.INFORMATIONREPORTING("RECORD UPDATED SUCCESSFULLY");
          ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
          erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agentDirectorsPop').hide(hints);");
          stmt.close();
          conn.close();
          ADFUtils.findIterator("findClientsDirectorsIterator").executeQuery();
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.agentDirectorsTable);
          return null;
        }
        GlobalCC.INFORMATIONREPORTING(error);
        return null;
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(conn, e);
        return null;
      }
    }
    return null;
  }

  public String editAgencyDirectors()
  {
    Object key2 = this.agentDirectorsTable.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding == null)
    {
      GlobalCC.INFORMATIONREPORTING("No record selected.");
      return null;
    }
    this.agencyDirectorId.setValue(nodeBinding.getAttribute("clntdir_code"));
    this.directname.setValue(nodeBinding.getAttribute("clntdir_name"));
    this.directQualifications.setValue(nodeBinding.getAttribute("clntdir_qualifications"));
    this.directshare.setValue(nodeBinding.getAttribute("clntdir_pct_holdg"));
    this.saveAgDirectorButton.setText("Update");
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agentDirectorsPop').show(hints);");
    return null;
  }

  public String deleteAgencyDirectors()
  {
    Object key2 = this.agentDirectorsTable.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding == null)
    {
      GlobalCC.INFORMATIONREPORTING("No Record Selected.");
      return null;
    }
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:confirmDeleteClientDirectors').show(hints);");
    return null;
  }

  public void setDirectname(RichInputText directname)
  {
    this.directname = directname;
  }

  public RichInputText getDirectname()
  {
    return this.directname;
  }

  public void setSaveAgDirectorButton(RichCommandButton saveAgDirectorButton)
  {
    this.saveAgDirectorButton = saveAgDirectorButton;
  }

  public RichCommandButton getSaveAgDirectorButton()
  {
    return this.saveAgDirectorButton;
  }

  public void setAgentDirectorsTable(RichTable agentDirectorsTable)
  {
    this.agentDirectorsTable = agentDirectorsTable;
  }

  public RichTable getAgentDirectorsTable()
  {
    return this.agentDirectorsTable;
  }

  public void setTabAuditors(RichShowDetailItem tabAuditors)
  {
    this.tabAuditors = tabAuditors;
  }

  public RichShowDetailItem getTabAuditors()
  {
    return this.tabAuditors;
  }

  public void setAddAgencyAuditors(RichCommandButton addAgencyAuditors)
  {
    this.addAgencyAuditors = addAgencyAuditors;
  }

  public RichCommandButton getAddAgencyAuditors()
  {
    return this.addAgencyAuditors;
  }

  public String deleteAgencyAuditors()
  {
    Object key2 = this.agentAuditorsTable.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding == null)
    {
      GlobalCC.INFORMATIONREPORTING("No Record Selected.");
      return null;
    }
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:confirmDeleteClientAuditors').show(hints);");
    return null;
  }

  public String editAgencyAuditors()
  {
    Object key2 = this.agentAuditorsTable.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding == null)
    {
      GlobalCC.INFORMATIONREPORTING("No record selected.");
      return null;
    }
    this.agencyAuditorId.setValue(nodeBinding.getAttribute("clntaud_code"));
    this.auditName.setValue(nodeBinding.getAttribute("clntaud_name"));
    this.directAuditorQualification.setValue(nodeBinding.getAttribute("clntaud_qualifications"));
    this.auditorTelephone.setValue(nodeBinding.getAttribute("clntaud_telephone"));
    this.saveAgAuditorButton.setText("Update");
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agentAuditorsPop').show(hints);");
    return null;
  }

  public void setEditAgencyAuditors(RichCommandButton editAgencyAuditors)
  {
    this.editAgencyAuditors = editAgencyAuditors;
  }

  public RichCommandButton getEditAgencyAuditors()
  {
    return this.editAgencyAuditors;
  }

  public void setDeleteAgencyAuditors(RichCommandButton deleteAgencyAuditors)
  {
    this.deleteAgencyAuditors = deleteAgencyAuditors;
  }

  public RichCommandButton getDeleteAgencyAuditors()
  {
    return this.deleteAgencyAuditors;
  }

  public void setAgencyAuditorId(RichInputText agencyAuditorId)
  {
    this.agencyAuditorId = agencyAuditorId;
  }

  public RichInputText getAgencyAuditorId()
  {
    return this.agencyAuditorId;
  }

  public String saveAgAuditorAction()
  {
    DBConnector connection = new DBConnector();
    String query = "begin TQC_CLIENTS_PKG.TQC_CLIENT_AUDITORS_PRC(?,?,?,?,?,?,?,?,?);end;";
    OracleConnection conn = null;
    OracleCallableStatement stmt = null;
    String auYear = GlobalCC.checkNullValues(this.auditYER.getValue());
    String auName = GlobalCC.checkNullValues(this.auditName.getValue());
    String qual = GlobalCC.checkNullValues(this.directAuditorQualification.getValue());
    String telephone = GlobalCC.checkNullValues(this.auditorTelephone.getValue());
    if (auYear == null)
    {
      GlobalCC.errorValueNotEntered("YEAR Required::");
      return null;
    }
    if (auName == null)
    {
      GlobalCC.errorValueNotEntered("Auditor  Name Required::");
      return null;
    }
    if (this.saveAgAuditorButton.getText().equals("Save"))
    {
      BigDecimal yr = null;
      java.util.Date year = null;
      if ((auYear != null) && (auYear != "")) {
        year = (java.util.Date)this.auditYER.getValue();
      }
      if ((year != null) && (this.auditYER.getValue() != "")) {
        yr = new BigDecimal(new SimpleDateFormat("yyyy").format(year));
      }
      try
      {
        conn = connection.getDatabaseConnection();
        stmt = (OracleCallableStatement)conn.prepareCall(query);
        stmt.setString(1, "A");
        stmt.setBigDecimal(2, null);
        stmt.setBigDecimal(3, new BigDecimal(this.session.getAttribute("ClientCode").toString()));
        stmt.setBigDecimal(4, yr);
        stmt.setString(5, auName);
        stmt.setString(6, qual);
        stmt.setString(7, telephone);
        stmt.setString(8, "");
        stmt.registerOutParameter(9, 12);
        stmt.execute();
        String error = stmt.getString(9);
        if (error == null)
        {
          GlobalCC.INFORMATIONREPORTING("RECORD SAVED SUCCESSFULLY");
          ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
          erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agentAuditorsPop').hide(hints);");
          stmt.close();
          conn.close();
          ADFUtils.findIterator("findClientsAuditorsIterator").executeQuery();
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.agentAuditorsTable);
          return null;
        }
        GlobalCC.INFORMATIONREPORTING(error);
        return null;
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(conn, e);
        return null;
      }
    }
    if (this.saveAgAuditorButton.getText().equals("Update"))
    {
      BigDecimal yr = null;
      java.util.Date year = (java.util.Date)this.auditYER.getValue();
      if ((year != null) && (this.auditYER.getValue() != "")) {
        yr = new BigDecimal(new SimpleDateFormat("yyyy").format(year));
      }
      try
      {
        conn = connection.getDatabaseConnection();
        stmt = (OracleCallableStatement)conn.prepareCall(query);
        stmt.setString(1, "E");
        stmt.setBigDecimal(2, new BigDecimal(this.agencyAuditorId.getValue().toString()));
        stmt.setBigDecimal(3, new BigDecimal(this.session.getAttribute("ClientCode").toString()));
        stmt.setBigDecimal(4, yr);
        stmt.setString(5, (String)this.auditName.getValue());
        stmt.setString(6, (String)this.directAuditorQualification.getValue());
        stmt.setString(7, (String)this.auditorTelephone.getValue());
        stmt.setString(8, (String)this.directAuditorQualification.getValue());
        stmt.registerOutParameter(9, 12);
        stmt.execute();
        String error = stmt.getString(9);
        if (error == null)
        {
          GlobalCC.INFORMATIONREPORTING("RECORD UPDTED SUCCESSFULLY");
          ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
          erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agentAuditorsPop').hide(hints);");
          stmt.close();
          conn.close();
          ADFUtils.findIterator("findClientsAuditorsIterator").executeQuery();
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.agentAuditorsTable);
          return null;
        }
        GlobalCC.INFORMATIONREPORTING(error);
        return null;
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(conn, e);
        return null;
      }
    }
    return null;
  }

  public void setSaveAgAuditorButton(RichCommandButton saveAgAuditorButton)
  {
    this.saveAgAuditorButton = saveAgAuditorButton;
  }

  public RichCommandButton getSaveAgAuditorButton()
  {
    return this.saveAgAuditorButton;
  }

  public void setDirectAuditorQualification(RichInputText directAuditorQualification)
  {
    this.directAuditorQualification = directAuditorQualification;
  }

  public RichInputText getDirectAuditorQualification()
  {
    return this.directAuditorQualification;
  }

  public void setAuditName(RichInputText auditName)
  {
    this.auditName = auditName;
  }

  public RichInputText getAuditName()
  {
    return this.auditName;
  }

  public void setAuditYr(RichInputText auditYr)
  {
    this.auditYr = auditYr;
  }

  public RichInputText getAuditYr()
  {
    return this.auditYr;
  }

  public void setAuditYear(RichInputText auditYear)
  {
    this.auditYear = auditYear;
  }

  public RichInputText getAuditYear()
  {
    return this.auditYear;
  }

  public void setAuditYER(RichInputDate auditYER)
  {
    this.auditYER = auditYER;
  }

  public RichInputDate getAuditYER()
  {
    return this.auditYER;
  }

  public void setAuditorTelephone(RichInputText auditorTelephone)
  {
    this.auditorTelephone = auditorTelephone;
  }

  public RichInputText getAuditorTelephone()
  {
    return this.auditorTelephone;
  }

  public void setAgentAuditorsTable(RichTable agentAuditorsTable)
  {
    this.agentAuditorsTable = agentAuditorsTable;
  }

  public RichTable getAgentAuditorsTable()
  {
    return this.agentAuditorsTable;
  }

  public void setAddClientAuditors(RichCommandButton addClientAuditors)
  {
    this.addClientAuditors = addClientAuditors;
  }

  public RichCommandButton getAddClientAuditors()
  {
    return this.addClientAuditors;
  }

  public String addClientAuditors()
  {
    if (this.session.getAttribute("ClientCode") == null)
    {
      GlobalCC.INFORMATIONREPORTING("CLIENT CODE REQUIRED");
      return null;
    }
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agentAuditorsPop').show(hints);");
    this.auditYER.setValue((Object)null);
    this.auditName.setValue((Object)null);
    this.directAuditorQualification.setValue((Object)null);
    this.auditorTelephone.setValue((Object)null);
    this.saveAgAuditorButton.setText("Save");
    return null;
  }

  public String actionAcceptParentCompany()
  {
    Object key2 = this.tableParentComp.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.txtParentCompany.setValue(nodeBinding.getAttribute("code"));
      this.txtParentCompanyCode.setValue(nodeBinding.getAttribute("name"));
    }
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtParentCompanyCode);
    GlobalCC.dismissPopUp("pt1", "parentCompanyPop");
    return null;
  }

  public String actionAcceptBranch()
  {
    Object key2 = this.tblRegBranches.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.txtRegBranchCode.setValue(nodeBinding.getAttribute("branchCode"));
      this.txtRegBranchName.setValue(nodeBinding.getAttribute("branchName"));
    }
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtRegBranchName);
    return null;
  }

  public void tbParentCompanyListener(SelectionEvent selectionEvent) {}

  public void setTxtParentCompanyCode(RichInputText txtParentCompanyCode)
  {
    this.txtParentCompanyCode = txtParentCompanyCode;
  }

  public RichInputText getTxtParentCompanyCode()
  {
    return this.txtParentCompanyCode;
  }

  public void setParentcompanyPan(RichPanelLabelAndMessage parentcompanyPan)
  {
    this.parentcompanyPan = parentcompanyPan;
  }

  public RichPanelLabelAndMessage getParentcompanyPan()
  {
    return this.parentcompanyPan;
  }

  public void setTbParentCompanyPop(RichPopup tbParentCompanyPop)
  {
    this.tbParentCompanyPop = tbParentCompanyPop;
  }

  public RichPopup getTbParentCompanyPop()
  {
    return this.tbParentCompanyPop;
  }

  public void setTableParentComp(RichTable tableParentComp)
  {
    this.tableParentComp = tableParentComp;
  }

  public RichTable getTableParentComp()
  {
    return this.tableParentComp;
  }

  public void setTxtProjectedBiz(RichInputNumberSpinbox txtProjectedBiz)
  {
    this.txtProjectedBiz = txtProjectedBiz;
  }

  public RichInputNumberSpinbox getTxtProjectedBiz()
  {
    return this.txtProjectedBiz;
  }

  public void setTxtRegBranchName(RichInputText txtRegBranchName)
  {
    this.txtRegBranchName = txtRegBranchName;
  }

  public RichInputText getTxtRegBranchName()
  {
    return this.txtRegBranchName;
  }

  public void setTxtRegBranchCode(RichInputText txtRegBranchCode)
  {
    this.txtRegBranchCode = txtRegBranchCode;
  }

  public RichInputText getTxtRegBranchCode()
  {
    return this.txtRegBranchCode;
  }

  public void setTblBranches(RichCommandButton tblBranches)
  {
    this.tblBranches = tblBranches;
  }

  public RichCommandButton getTblBranches()
  {
    return this.tblBranches;
  }

  public void setTblRegBranches(RichTable tblRegBranches)
  {
    this.tblRegBranches = tblRegBranches;
  }

  public RichTable getTblRegBranches()
  {
    return this.tblRegBranches;
  }

  public void setBtnAcceptBranch(RichCommandButton btnAcceptBranch)
  {
    this.btnAcceptBranch = btnAcceptBranch;
  }

  public RichCommandButton getBtnAcceptBranch()
  {
    return this.btnAcceptBranch;
  }

  public void setBranchPop(RichPopup branchPop)
  {
    this.branchPop = branchPop;
  }

  public RichPopup getBranchPop()
  {
    return this.branchPop;
  }

  public String actionNewGroup()
  {
    this.txtGrpCode.setValue((Object)null);
    this.txtGrpName.setValue((Object)null);
    this.txtGrpMinimum.setValue((Object)null);
    this.txtGrpMax.setValue((Object)null);
    this.btnsaveGrp.setText("Save");
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:addGrpClient').show(hints);");
    return null;
  }

  public String actionEditGroupClient()
  {
      Object key2 = this.tblClientGroup.getSelectedRowData();
      JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (this.session.getAttribute("grpCode") != null)
    {

      this.txtGrpCode.setValue((Object)null);
      this.txtGrpName.setValue((Object)null);
      this.txtGrpMinimum.setValue((Object)null);
      this.txtGrpMax.setValue((Object)null);
      if (nodeBinding == null)
      {
        GlobalCC.INFORMATIONREPORTING("No record selected::");
        return null;
      }
    }
    else
    {
      GlobalCC.INFORMATIONREPORTING("No record selected::");
      return null;
    }
   // JUCtrlValueBinding nodeBinding;
    this.txtGrpCode.setValue(nodeBinding.getAttribute("grp_Code"));
    this.txtGrpName.setValue(nodeBinding.getAttribute("grp_Name"));
    this.txtGrpMinimum.setValue(nodeBinding.getAttribute("grp_Minimum"));
    this.txtGrpMax.setValue(nodeBinding.getAttribute("grp_Maximum"));
    this.btnsaveGrp.setText("update");
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:addGrpClient').show(hints);");
    return null;
  }

  public void actionConfirmDeleteClntGrp(DialogEvent dialogEvent)
  {
    if ((!dialogEvent.getOutcome().equals(DialogEvent.Outcome.no)) && (dialogEvent.getOutcome().equals(DialogEvent.Outcome.yes))) {
      actionDeleteGroupClient();
    }
  }

  public void actionConfirmDeleteClntGrpMember(DialogEvent dialogEvent)
  {
    if ((!dialogEvent.getOutcome().equals(DialogEvent.Outcome.no)) && (dialogEvent.getOutcome().equals(DialogEvent.Outcome.yes)))
    {
      DBConnector dbConnector = new DBConnector();
      OracleConnection conn = null;
      OracleCallableStatement statement = null;
      try
      {
        conn = dbConnector.getDatabaseConnection();
        String query = "begin TQC_SETUPS_PKG.clientGroupMembers_prc(?,?,?,?); end;";
        statement = (OracleCallableStatement)conn.prepareCall(query);
        statement.setString(1, "D");
        statement.setBigDecimal(2, new BigDecimal(this.session.getAttribute("grpdCode").toString()));
        statement.setBigDecimal(3, null);
        statement.setBigDecimal(4, null);
        statement.execute();
        statement.close();
        conn.commit();
        conn.close();
        this.btnRemoveClientFromGroup.setDisabled(true);
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.btnRemoveClientFromGroup);
        GlobalCC.INFORMATIONREPORTING("Client Deleted Successfully");
        ADFUtils.findIterator("findClientGroupMembersIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblClientGrpMembers);
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(conn, e);
      }
    }
  }

  public String actionDeleteGroupClient()
  {
    Object key2 = this.tblClientGroup.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      DBConnector dbCon = new DBConnector();
      OracleConnection conn = null;
      try
      {
        conn = dbCon.getDatabaseConnection();
        String query = "begin TQC_SETUPS_PKG.clientGroup_prc(?,?,?,?,?); end;";
        OracleCallableStatement cst = null;
        cst = (OracleCallableStatement)conn.prepareCall(query);
        cst.setString(1, "D");
        cst.setBigDecimal(2, new BigDecimal(this.session.getAttribute("grpCode").toString()));
        cst.setString(3, null);
        cst.setBigDecimal(4, null);
        cst.setBigDecimal(5, null);
        cst.execute();
        cst.close();
        conn.commit();
        conn.close();
        GlobalCC.INFORMATIONREPORTING("Record Successfully Deleted");
        this.btnActionDeleteGroupClient.setDisabled(true);
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.btnActionDeleteGroupClient);
        ADFUtils.findIterator("findClientGroupsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblClientGroup);
        ADFUtils.findIterator("findClientGroupMembersIteratorr").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblClientGrpMembers);
        return null;
      }
      catch (Exception e)
      {
        e.printStackTrace();
        GlobalCC.EXCEPTIONREPORTING(conn, e);
        return null;
      }
    }
    GlobalCC.INFORMATIONREPORTING("No record Selected::");
    return null;
  }

  public String actionHideUserGroupLov()
  {
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:addClientGrpPopt').hide(hints);");
    return null;
  }

  public String actionAddClientToGroup()
  {
    if (this.session.getAttribute("grpCode") != null)
    {
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:searchClientPop').show(hints);");
      return null;
    }
    GlobalCC.INFORMATIONREPORTING("First select  The group::");
    return null;
  }

  public String actionShowConfirmDelete()
  {
    if (this.session.getAttribute("grpCode") != null)
    {
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:confirmDeleteClientGrp').show(hints);");
      return null;
    }
    GlobalCC.INFORMATIONREPORTING("First select  The group::");
    return null;
  }

  public String actionSaveGroupClient()
  {
    if (this.btnsaveGrp.getText().equalsIgnoreCase("save"))
    {
      String name = GlobalCC.checkNullValues(this.txtGrpName.getValue());
      String min = GlobalCC.checkNullValues(this.txtGrpMinimum.getValue());
      String max = GlobalCC.checkNullValues(this.txtGrpMax.getValue());
      if (name == null)
      {
        GlobalCC.errorValueNotEntered("Group name required::");
        return null;
      }
      if (min == null)
      {
        GlobalCC.errorValueNotEntered("Min number  required::");
        return null;
      }
      if (max == null)
      {
        GlobalCC.errorValueNotEntered("Max number required::");
        return null;
      }
      DBConnector dbCon = new DBConnector();
      OracleConnection conn = null;
      try
      {
        conn = dbCon.getDatabaseConnection();
        String query = "begin TQC_SETUPS_PKG.clientGroup_prc(?,?,?,?,?); end;";
        OracleCallableStatement cst = null;
        cst = (OracleCallableStatement)conn.prepareCall(query);
        cst.setString(1, "A");
        cst.setBigDecimal(2, null);
        cst.setString(3, name);
        cst.setBigDecimal(4, new BigDecimal(min));
        cst.setBigDecimal(5, new BigDecimal(max));
        cst.execute();
        cst.close();
        conn.commit();
        conn.close();
        GlobalCC.INFORMATIONREPORTING("Record Successfully saved");
        ADFUtils.findIterator("findClientGroupsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblClientGroup);
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:addGrpClient').hide(hints);");
        return null;
      }
      catch (Exception e)
      {
        e.printStackTrace();
        GlobalCC.EXCEPTIONREPORTING(conn, e);
        return null;
      }
    }
    String name = GlobalCC.checkNullValues(this.txtGrpName.getValue());
    String min = GlobalCC.checkNullValues(this.txtGrpMinimum.getValue());
    String max = GlobalCC.checkNullValues(this.txtGrpMax.getValue());
    String code = GlobalCC.checkNullValues(this.txtGrpCode.getValue());
    if (name == null)
    {
      GlobalCC.errorValueNotEntered("Group name required::");
      return null;
    }
    if (min == null)
    {
      GlobalCC.errorValueNotEntered("Min number  required::");
      return null;
    }
    if (max == null)
    {
      GlobalCC.errorValueNotEntered("Max number required::");
      return null;
    }
    if (code == null)
    {
      GlobalCC.errorValueNotEntered("Grp Code required::");
      return null;
    }
    DBConnector dbCon = new DBConnector();
    OracleConnection conn = null;
    try
    {
      conn = dbCon.getDatabaseConnection();
      String query = "begin TQC_SETUPS_PKG.clientGroup_prc(?,?,?,?,?); end;";
      OracleCallableStatement cst = null;
      cst = (OracleCallableStatement)conn.prepareCall(query);
      cst.setString(1, "E");
      cst.setBigDecimal(2, new BigDecimal(code));
      cst.setString(3, name);
      cst.setBigDecimal(4, new BigDecimal(min));
      cst.setBigDecimal(5, new BigDecimal(max));
      cst.execute();
      cst.close();
      conn.commit();
      conn.close();
      GlobalCC.INFORMATIONREPORTING("Record Successfully Updated");
      this.btnActionEditGroupClient.setDisabled(false);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.btnActionEditGroupClient);
      ADFUtils.findIterator("findClientGroupsIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblClientGroup);
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:addGrpClient').hide(hints);");
      return null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
      GlobalCC.EXCEPTIONREPORTING(conn, e);
    }
    return null;
  }

  public boolean checkIfAnyRowselected()
  {
    RowKeySetImpl rks = new RowKeySetImpl();
    int rowcount = this.tblClientPop.getRowCount();
    int count = 0;
    for (int i = 0; i < rowcount; i++)
    {
      this.tblClientPop.setRowIndex(i);
      Object key = this.tblClientPop.getRowKey();
      this.tblClientPop.setRowKey(key);
      JUCtrlHierNodeBinding nodeBinding = (JUCtrlHierNodeBinding)this.tblClientPop.getRowData();
      if (nodeBinding.getAttribute("selected").toString().equalsIgnoreCase("true")) {
        count++;
      }
    }
    if (count > 0) {
      return true;
    }
    return false;
  }

  public String selectAll()
  {
    RowKeySetImpl rks = new RowKeySetImpl();
    int rowcount = this.tblClientPop.getRowCount();
    for (int i = 0; i < rowcount; i++)
    {
      this.tblClientPop.setRowIndex(i);
      Object key = this.tblClientPop.getRowKey();
      this.tblClientPop.setRowKey(key);
      JUCtrlHierNodeBinding nodeBinding = (JUCtrlHierNodeBinding)this.tblClientPop.getRowData();
      this.columnSelect.setSelected(true);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.columnSelect);
    }
    return null;
  }

  public String actionAcceptClientLov()
  {
    if (checkIfAnyRowselected())
    {
      Object xy = null;
      RowKeySetImpl rks = new RowKeySetImpl();
      int rowcount = this.tblClientPop.getRowCount();
      for (int i = 0; i < rowcount; i++)
      {
        this.tblClientPop.setRowIndex(i);
        Object key = this.tblClientPop.getRowKey();
        this.tblClientPop.setRowKey(key);
        JUCtrlHierNodeBinding nodeBinding = (JUCtrlHierNodeBinding)this.tblClientPop.getRowData();
        Object selected = nodeBinding.getAttribute("selected");
        if (selected.toString().equalsIgnoreCase("true")) {
          if (this.session.getAttribute("grpCode") != null)
          {
            DBConnector dbConnector = new DBConnector();
            OracleConnection conn = null;
            OracleCallableStatement statement = null;
            try
            {
              conn = dbConnector.getDatabaseConnection();
              String query = "begin TQC_SETUPS_PKG.clientGroupMembers_prc(?,?,?,?); end;";
              statement = (OracleCallableStatement)conn.prepareCall(query);
              statement.setString(1, "A");
              statement.setBigDecimal(2, null);
              statement.setBigDecimal(3, new BigDecimal(nodeBinding.getAttribute("code").toString()));
              statement.setBigDecimal(4, new BigDecimal(this.session.getAttribute("grpCode").toString()));
              statement.execute();
              statement.close();
              conn.commit();
              conn.close();
            }
            catch (Exception e)
            {
              e.printStackTrace();
              GlobalCC.EXCEPTIONREPORTING(conn, e);
              return null;
            }
          }
          else
          {
            GlobalCC.INFORMATIONREPORTING("First Select Client Group ::");
            return null;
          }
        }
      }
      ADFUtils.findIterator("findClientGroupMembersIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblClientGrpMembers);
      ADFUtils.findIterator("fetchClientsByCriteriaIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblClientPop);
      GlobalCC.dismissPopUp("pt1", "addClientGrpPop");
      return null;
    }
    GlobalCC.INFORMATIONREPORTING("No Record Selected");
    return null;
  }

  public void actionTblClientGroupListener(SelectionEvent selectionEvent)
  {
    Object key2 = this.tblClientGroup.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.session.setAttribute("grpCode", nodeBinding.getAttribute("grp_Code"));
      this.btnActionEditGroupClient.setDisabled(false);
      this.btnActionDeleteGroupClient.setDisabled(false);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.btnActionEditGroupClient);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.btnActionDeleteGroupClient);
      ADFUtils.findIterator("findClientGroupMembersIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.tblClientGrpMembers);
    }
  }

  public String actionDeleteClntFromGroup()
  {
    Object key2 = this.tblClientGrpMembers.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      if (nodeBinding.getAttribute("grpd_Code") != null)
      {
        this.session.setAttribute("grpdCode", nodeBinding.getAttribute("grpd_Code"));
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:confirmDeleteClientGrpMember').show(hints);");
        return null;
      }
      GlobalCC.INFORMATIONREPORTING("No record selected::");
      return null;
    }
    GlobalCC.INFORMATIONREPORTING("No record selected::");
    return null;
  }

  public void actiontblGrpMemberListener(SelectionEvent selectionEvent)
  {
    Object key2 = this.tblClientGrpMembers.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.session.setAttribute("grpdCode", nodeBinding.getAttribute("grpd_Code"));
      this.btnRemoveClientFromGroup.setDisabled(false);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.btnRemoveClientFromGroup);
    }
  }

  public void setTxtGrpName(RichInputText txtGrpName)
  {
    this.txtGrpName = txtGrpName;
  }

  public RichInputText getTxtGrpName()
  {
    return this.txtGrpName;
  }

  public void setTxtGrpMinimum(RichInputNumberSpinbox txtGrpMinimum)
  {
    this.txtGrpMinimum = txtGrpMinimum;
  }

  public RichInputNumberSpinbox getTxtGrpMinimum()
  {
    return this.txtGrpMinimum;
  }

  public void setTxtGrpMax(RichInputNumberSpinbox txtGrpMax)
  {
    this.txtGrpMax = txtGrpMax;
  }

  public RichInputNumberSpinbox getTxtGrpMax()
  {
    return this.txtGrpMax;
  }

  public void setBtnsaveGrp(RichCommandButton btnsaveGrp)
  {
    this.btnsaveGrp = btnsaveGrp;
  }

  public RichCommandButton getBtnsaveGrp()
  {
    return this.btnsaveGrp;
  }

  public void setTxtGrpCode(RichInputText txtGrpCode)
  {
    this.txtGrpCode = txtGrpCode;
  }

  public RichInputText getTxtGrpCode()
  {
    return this.txtGrpCode;
  }

  public void setTblClientGroup(RichTable tblClientGroup)
  {
    this.tblClientGroup = tblClientGroup;
  }

  public RichTable getTblClientGroup()
  {
    return this.tblClientGroup;
  }

  public void setTblClientGrpMembers(RichTable tblClientGrpMembers)
  {
    this.tblClientGrpMembers = tblClientGrpMembers;
  }

  public RichTable getTblClientGrpMembers()
  {
    return this.tblClientGrpMembers;
  }

  public void setTblClientPop(RichTable tblClientPop)
  {
    this.tblClientPop = tblClientPop;
  }

  public RichTable getTblClientPop()
  {
    return this.tblClientPop;
  }

  public void setBtnRemoveClientFromGroup(RichCommandButton btnRemoveClientFromGroup)
  {
    this.btnRemoveClientFromGroup = btnRemoveClientFromGroup;
  }

  public RichCommandButton getBtnRemoveClientFromGroup()
  {
    return this.btnRemoveClientFromGroup;
  }

  public void setBtnActionEditGroupClient(RichCommandButton btnActionEditGroupClient)
  {
    this.btnActionEditGroupClient = btnActionEditGroupClient;
  }

  public RichCommandButton getBtnActionEditGroupClient()
  {
    return this.btnActionEditGroupClient;
  }

  public void setBtnActionDeleteGroupClient(RichCommandButton btnActionDeleteGroupClient)
  {
    this.btnActionDeleteGroupClient = btnActionDeleteGroupClient;
  }

  public RichCommandButton getBtnActionDeleteGroupClient()
  {
    return this.btnActionDeleteGroupClient;
  }

  public void setSearchCriteria(RichSelectOneChoice searchCriteria)
  {
    this.searchCriteria = searchCriteria;
  }

  public RichSelectOneChoice getSearchCriteria()
  {
    return this.searchCriteria;
  }

  public void setXtSearchSectorName(RichInputText txtSearchSectorName)
  {
    this.txtSearchSectorName = txtSearchSectorName;
  }

  public RichInputText getXtSearchSectorName()
  {
    return this.txtSearchSectorName;
  }

  public void setColumnSelect(RichSelectBooleanCheckbox columnSelect)
  {
    this.columnSelect = columnSelect;
  }

  public RichSelectBooleanCheckbox getColumnSelect()
  {
    return this.columnSelect;
  }

  public void setTxtSearchSector(RichInputText txtSearchSector)
  {
    this.txtSearchSector = txtSearchSector;
  }

  public RichInputText getTxtSearchSector()
  {
    return this.txtSearchSector;
  }

  public void setTxtSrchSectorName(RichInputText txtSrchSectorName)
  {
    this.txtSrchSectorName = txtSrchSectorName;
  }

  public RichInputText getTxtSrchSectorName()
  {
    return this.txtSrchSectorName;
  }

  public void setTxtAccountOfficerCode(RichInputText txtAccountOfficerCode)
  {
    this.txtAccountOfficerCode = txtAccountOfficerCode;
  }

  public RichInputText getTxtAccountOfficerCode()
  {
    return this.txtAccountOfficerCode;
  }

  public void setTxtAccountOfficerName(RichInputText txtAccountOfficerName)
  {
    this.txtAccountOfficerName = txtAccountOfficerName;
  }

  public RichInputText getTxtAccountOfficerName()
  {
    return this.txtAccountOfficerName;
  }

  public String actionAcceptAccountOfficer()
  {
    Object key2 = this.tblAccountOfficer.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.txtAccountOfficerCode.setValue(nodeBinding.getAttribute("userCode"));
      this.txtAccountOfficerName.setValue(nodeBinding.getAttribute("username"));
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtAccountOfficerName);
    }
    GlobalCC.dismissPopUp("pt1", "accountOfficersPop");
    return null;
  }

  public void setTblAccountOfficer(RichTable tblAccountOfficer)
  {
    this.tblAccountOfficer = tblAccountOfficer;
  }

  public RichTable getTblAccountOfficer()
  {
    return this.tblAccountOfficer;
  }

  public void setLaySignature(RichPanelGroupLayout laySignature)
  {
    this.laySignature = laySignature;
  }

  public RichPanelGroupLayout getLaySignature()
  {
    return this.laySignature;
  }

  public void setLayClientImage(RichPanelGroupLayout layClientImage)
  {
    this.layClientImage = layClientImage;
  }

  public RichPanelGroupLayout getLayClientImage()
  {
    return this.layClientImage;
  }

  public void setBtnDeleteClient(RichCommandButton btnDeleteClient)
  {
    this.btnDeleteClient = btnDeleteClient;
  }

  public RichCommandButton getBtnDeleteClient()
  {
    return this.btnDeleteClient;
  }

  public void setSearchFormHolder(RichPanelGroupLayout searchFormHolder)
  {
    this.searchFormHolder = searchFormHolder;
  }

  public RichPanelGroupLayout getSearchFormHolder()
  {
    return this.searchFormHolder;
  }

  public void setSEARCHHOLDER(RichPanelFormLayout SEARCHHOLDER)
  {
    this.SEARCHHOLDER = SEARCHHOLDER;
  }

  public RichPanelFormLayout getSEARCHHOLDER()
  {
    return this.SEARCHHOLDER;
  }

  public void setStatusHolder(RichPanelLabelAndMessage statusHolder)
  {
    this.statusHolder = statusHolder;
  }

  public RichPanelLabelAndMessage getStatusHolder()
  {
    return this.statusHolder;
  }

  public void setSearchClientType(RichPanelLabelAndMessage searchClientType)
  {
    this.searchClientType = searchClientType;
  }

  public RichPanelLabelAndMessage getSearchClientType()
  {
    return this.searchClientType;
  }

  public void setTabClientAccounts(RichShowDetailItem tabClientAccounts)
  {
    this.tabClientAccounts = tabClientAccounts;
  }

  public RichShowDetailItem getTabClientAccounts()
  {
    return this.tabClientAccounts;
  }

  public void setClientTab(RichPanelTabbed clientTab)
  {
    this.clientTab = clientTab;
  }

  public RichPanelTabbed getClientTab()
  {
    return this.clientTab;
  }

  public void actionConfirmDeleteDirectors(DialogEvent dialogEvent)
  {
    if ((!dialogEvent.getOutcome().equals(DialogEvent.Outcome.no)) && (dialogEvent.getOutcome().equals(DialogEvent.Outcome.yes)))
    {
      Object key2 = this.agentDirectorsTable.getSelectedRowData();
      JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
      DBConnector connection = new DBConnector();
      String query = "begin TQC_CLIENTS_PKG.TQC_CLIENT_DIRECTORS_PRC(?,?,?,?,?,?,?,?,?);end;";
      OracleConnection conn = null;
      OracleCallableStatement stmt = null;
      try
      {
        conn = connection.getDatabaseConnection();
        stmt = (OracleCallableStatement)conn.prepareCall(query);
        stmt.setString(1, "D");
        stmt.setBigDecimal(2, new BigDecimal(nodeBinding.getAttribute("clntdir_code").toString()));
        stmt.setBigDecimal(3, null);
        stmt.setBigDecimal(4, null);
        stmt.setString(5, null);
        stmt.setString(6, null);
        stmt.setBigDecimal(7, null);
        stmt.setString(8, null);
        stmt.registerOutParameter(9, 12);
        stmt.execute();
        String error = stmt.getString(9);
        stmt.close();
        conn.commit();
        conn.close();
        ADFUtils.findIterator("findClientsDirectorsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.agentDirectorsTable);
        String message = "Record DELETED Successfully!";
        GlobalCC.INFORMATIONREPORTING(message);
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(conn, e);
      }
    }
  }

  public void actionConfirmDeleteAuditor(DialogEvent dialogEvent)
  {
    if ((!dialogEvent.getOutcome().equals(DialogEvent.Outcome.no)) && (dialogEvent.getOutcome().equals(DialogEvent.Outcome.yes)))
    {
      Object key2 = this.agentAuditorsTable.getSelectedRowData();
      JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
      DBConnector connection = new DBConnector();
      String query = "begin TQC_CLIENTS_PKG.TQC_CLIENT_AUDITORS_PRC(?,?,?,?,?,?,?,?,?);end;";
      OracleConnection conn = null;
      OracleCallableStatement stmt = null;
      try
      {
        conn = connection.getDatabaseConnection();
        stmt = (OracleCallableStatement)conn.prepareCall(query);
        stmt.setString(1, "D");
        stmt.setBigDecimal(2, new BigDecimal(nodeBinding.getAttribute("clntaud_code").toString()));
        stmt.setBigDecimal(3, null);
        stmt.setBigDecimal(4, null);
        stmt.setString(5, null);
        stmt.setString(6, null);
        stmt.setBigDecimal(7, null);
        stmt.setString(8, null);
        stmt.registerOutParameter(9, 12);
        stmt.execute();
        String error = stmt.getString(9);
        stmt.close();
        conn.commit();
        conn.close();
        ADFUtils.findIterator("findClientsAuditorsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.agentAuditorsTable);
        String message = "Record DELETED Successfully!";
        GlobalCC.INFORMATIONREPORTING(message);
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(conn, e);
      }
    }
  }

  public void setPanelCollSearch(RichPanelCollection panelCollSearch)
  {
    this.panelCollSearch = panelCollSearch;
  }

  public RichPanelCollection getPanelCollSearch()
  {
    return this.panelCollSearch;
  }

  public void setTxtGender(RichSelectOneChoice txtGender)
  {
    this.txtGender = txtGender;
  }

  public RichSelectOneChoice getTxtGender()
  {
    return this.txtGender;
  }

  public void setPictureFile(UploadedFile pictureFile)
  {
    if (pictureFile != null)
    {
      this.filename = pictureFile.getFilename();
      this.filesize = pictureFile.getLength();
      fileContent = pictureFile.getContentType();
      try
      {
        fileStream = pictureFile.getInputStream();
      }
      catch (IOException e)
      {
        e.printStackTrace();
      }
    }
    this.pictureFile = pictureFile;
  }

  public UploadedFile getPictureFile()
  {
    return this.pictureFile;
  }

  public String saveYes()
  {
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:p2').hide(hints);");
    processCreateUpdateClient();
    return null;
  }

  public String saveSaccoYes()
  {
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:saccoReq').hide(hints);");
    processCreateUpdateClient();
    return null;
  }

  public String saveNo()
  {
    ADFUtils.findIterator("fetchAllClientsByNamesIterator").executeQuery();
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.tbClientListingBasedOnNames);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:p2').hide(hints);");
    return null;
  }

  public String saveSaccoNo()
  {
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:saccoReq').hide(hints);");
    return null;
  }

  public void setInputstream(InputStream inputstream)
  {
    this.inputstream = inputstream;
  }

  public InputStream getInputstream()
  {
    return this.inputstream;
  }

  public void setFileStream(InputStream fileStream) {}

  public InputStream getFileStream()
  {
    return fileStream;
  }

  public void setFilename(String filename)
  {
    this.filename = filename;
  }

  public String getFilename()
  {
    return this.filename;
  }

  public void setFilesize(long filesize)
  {
    this.filesize = filesize;
  }

  public long getFilesize()
  {
    return this.filesize;
  }

  public void setFileContent(String fileContent) {}

  public String getFileContent()
  {
    return fileContent;
  }

  public void setFiletype(String filetype)
  {
    this.filetype = filetype;
  }

  public String getFiletype()
  {
    return this.filetype;
  }

  public void setFileStream2(InputStream fileStream2) {}

  public InputStream getFileStream2()
  {
    return fileStream2;
  }

  public void setFilename2(String filename2)
  {
    this.filename2 = filename2;
  }

  public String getFilename2()
  {
    return this.filename2;
  }

  public void setFilesize2(long filesize2)
  {
    this.filesize2 = filesize2;
  }

  public long getFilesize2()
  {
    return this.filesize2;
  }

  public void setFileContent2(String fileContent2) {}

  public String getFileContent2()
  {
    return fileContent2;
  }

  public void setFiletype2(String filetype2)
  {
    this.filetype2 = filetype2;
  }

  public String getFiletype2()
  {
    return this.filetype2;
  }

  public void setSignatureFile(UploadedFile signatureFile)
  {
    if (signatureFile != null)
    {
      this.filename2 = signatureFile.getFilename();
      this.filesize2 = signatureFile.getLength();
      fileContent2 = signatureFile.getContentType();
      try
      {
        fileStream2 = signatureFile.getInputStream();
      }
      catch (IOException e) {}
    }
    this.signatureFile = signatureFile;
  }

  public UploadedFile getSignatureFile()
  {
    return this.signatureFile;
  }

  public void setTxtClientCellNos(RichInputText txtClientCellNos)
  {
    this.txtClientCellNos = txtClientCellNos;
  }

  public RichInputText getTxtClientCellNos()
  {
    return this.txtClientCellNos;
  }

  public void setTxtCltBankTelNo(RichInputText txtCltBankTelNo)
  {
    this.txtCltBankTelNo = txtCltBankTelNo;
  }

  public RichInputText getTxtCltBankTelNo()
  {
    return this.txtCltBankTelNo;
  }

  public void setTxtCltBankCellNo(RichInputText txtCltBankCellNo)
  {
    this.txtCltBankCellNo = txtCltBankCellNo;
  }

  public RichInputText getTxtCltBankCellNo()
  {
    return this.txtCltBankCellNo;
  }

  public void setTxtCltEmployerTelNo(RichInputText txtCltEmployerTelNo)
  {
    this.txtCltEmployerTelNo = txtCltEmployerTelNo;
  }

  public RichInputText getTxtCltEmployerTelNo()
  {
    return this.txtCltEmployerTelNo;
  }

  public void setTxtCltEmployerCellNo(RichInputText txtCltEmployerCellNo)
  {
    this.txtCltEmployerCellNo = txtCltEmployerCellNo;
  }

  public RichInputText getTxtCltEmployerCellNo()
  {
    return this.txtCltEmployerCellNo;
  }

  public void setGrpEmploymentDetails(RichPanelGroupLayout grpEmploymentDetails)
  {
    this.grpEmploymentDetails = grpEmploymentDetails;
  }

  public RichPanelGroupLayout getGrpEmploymentDetails()
  {
    return this.grpEmploymentDetails;
  }

  public void setTxtCltOccupation(RichInputText txtCltOccupation)
  {
    this.txtCltOccupation = txtCltOccupation;
  }

  public RichInputText getTxtCltOccupation()
  {
    return this.txtCltOccupation;
  }

  public void setPgridPersonnalDetails(HtmlPanelGrid pgridPersonnalDetails)
  {
    this.pgridPersonnalDetails = pgridPersonnalDetails;
  }

  public HtmlPanelGrid getPgridPersonnalDetails()
  {
    return this.pgridPersonnalDetails;
  }

  public void setDetailEmploymentDetails(RichShowDetailItem detailEmploymentDetails)
  {
    this.detailEmploymentDetails = detailEmploymentDetails;
  }

  public RichShowDetailItem getDetailEmploymentDetails()
  {
    return this.detailEmploymentDetails;
  }

  public void setTblAdminRegions(RichTable tblAdminRegions)
  {
    this.tblAdminRegions = tblAdminRegions;
  }

  public RichTable getTblAdminRegions()
  {
    return this.tblAdminRegions;
  }

  public void setPanMsgRegionTypeName(RichPanelLabelAndMessage panMsgRegionTypeName)
  {
    this.panMsgRegionTypeName = panMsgRegionTypeName;
  }

  public RichPanelLabelAndMessage getPanMsgRegionTypeName()
  {
    return this.panMsgRegionTypeName;
  }

  public void setDlgAdminRegionTypes(RichDialog dlgAdminRegionTypes)
  {
    this.dlgAdminRegionTypes = dlgAdminRegionTypes;
  }

  public RichDialog getDlgAdminRegionTypes()
  {
    return this.dlgAdminRegionTypes;
  }

  public void setTxtAdminRegionType(RichInputText txtAdminRegionType)
  {
    this.txtAdminRegionType = txtAdminRegionType;
  }

  public RichInputText getTxtAdminRegionType()
  {
    return this.txtAdminRegionType;
  }

  public void setTxtAdminRegionName(RichInputText txtAdminRegionName)
  {
    this.txtAdminRegionName = txtAdminRegionName;
  }

  public RichInputText getTxtAdminRegionName()
  {
    return this.txtAdminRegionName;
  }

  public void setTxtAdminRegionCode(RichInputText txtAdminRegionCode)
  {
    this.txtAdminRegionCode = txtAdminRegionCode;
  }

  public RichInputText getTxtAdminRegionCode()
  {
    return this.txtAdminRegionCode;
  }

  public void setPnMsgTownName(RichPanelLabelAndMessage pnMsgTownName)
  {
    this.pnMsgTownName = pnMsgTownName;
  }

  public RichPanelLabelAndMessage getPnMsgTownName()
  {
    return this.pnMsgTownName;
  }

  public String actionAcceptSystem()
  {
    return null;
  }

  public String actionCancelSytem()
  {
    return null;
  }

  public void setDlgNewEditAdminUnit(RichDialog dlgNewEditAdminUnit)
  {
    this.dlgNewEditAdminUnit = dlgNewEditAdminUnit;
  }

  public RichDialog getDlgNewEditAdminUnit()
  {
    return this.dlgNewEditAdminUnit;
  }

  public void setLbMsgState(RichPanelLabelAndMessage lbMsgState)
  {
    this.lbMsgState = lbMsgState;
  }

  public RichPanelLabelAndMessage getLbMsgState()
  {
    return this.lbMsgState;
  }

  public void setTxtAgencyName(RichInputText txtAgencyName)
  {
    this.txtAgencyName = txtAgencyName;
  }

  public RichInputText getTxtAgencyName()
  {
    return this.txtAgencyName;
  }

  public void setTxtAgencyCode(RichInputText txtAgencyCode)
  {
    this.txtAgencyCode = txtAgencyCode;
  }

  public RichInputText getTxtAgencyCode()
  {
    return this.txtAgencyCode;
  }

  public String actionAcceptAgency()
  {
    Object key = this.tblAgenciesLOV.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key;
    if (nodeBinding != null)
    {
      this.txtAgencyCode.setValue(nodeBinding.getAttribute("agentCode"));
      this.txtAgencyName.setValue(nodeBinding.getAttribute("name"));
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtAgencyName);
    }
    GlobalCC.dismissPopUp("pt1", "AgenciesLOVPOP");
    return null;
  }

  public void setTblAgenciesLOV(RichTable tblAgenciesLOV)
  {
    this.tblAgenciesLOV = tblAgenciesLOV;
  }

  public RichTable getTblAgenciesLOV()
  {
    return this.tblAgenciesLOV;
  }

  private void clientTypeChanged()
  {
    Util checkClientAgency = new Util();
    String clientCheck = checkClientAgency.getClientTying();
    try
    {
      if (this.txtClientTypes.getValue() != null) {
        if (this.txtClientTypes.getValue().toString().equalsIgnoreCase("Individual"))
        {
          this.session.setAttribute("clientTypeVAl", "I");
          this.session.setAttribute("clientTypes", "I");
          this.sbrIndividual.setSelected(true);
          this.sbrCorporate.setSelected(false);
          this.clientTitlePan.setVisible(true);
          this.txtTitle.setDisabled(false);
          this.txtTitle.setVisible(false);
          this.txtSurname.setLabel("Surname Name");
          this.txtDOB.setLabel("Date of Birth");
          this.txtOtherNames.setRendered(true);
          this.txtPhysicalAddress.setShowRequired(false);
          this.btnShowContactPersons.setVisible(false);
          this.btnShowContactPersons.setDisabled(true);
          this.txtWebsite.setVisible(false);
          this.txtAuditors.setVisible(false);
          this.txtParentCompany.setVisible(false);
          this.parentcompanyPan.setVisible(false);
          this.tabDirectors.setVisible(false);
          this.tabAuditors.setVisible(false);
          this.txtDLNo.setVisible(true);
          this.txtDateOfEmployment.setVisible(true);
          this.layClientImage.setVisible(true);
          this.txtGender.setRendered(true);
          this.grpEmploymentDetails.setRendered(true);
          this.txtDrvExperience.setRendered(true);
          this.layClientImage.setVisible(true);
          this.clientTitlePan.setRendered(true);
          this.txtClientTitle.setRendered(true);
          this.txtSelectClientTitle.setRendered(true);
          this.txtPassportNo.setVisible(true);
          if ((clientCheck.equals("Y")) || (clientCheck == null)) {
            this.pnLabelAgency.setVisible(true);
          } else {
            this.pnLabelAgency.setVisible(false);
          }
          this.txtAgencyName.setVisible(true);
          this.txtAgencies.setVisible(true);
          if (new Rendering().isClientId())
          {
            this.txtPIN.setDisabled(true);
            this.txtId.setDisabled(false);
            this.txtId.setRequired(true);
            this.txtDrvExperience.setRendered(true);
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtId);
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtPIN);
          }
        }
        else if (this.txtClientTypes.getValue().toString().equalsIgnoreCase("Staff"))
        {
          this.session.setAttribute("clientTypeVAl", "I");
          this.session.setAttribute("clientTypes", "I");
          this.sbrIndividual.setSelected(true);
          this.sbrCorporate.setSelected(false);
          this.clientTitlePan.setVisible(true);
          this.txtTitle.setDisabled(false);
          this.txtTitle.setVisible(false);
          this.txtSurname.setLabel("Surname Name");
          this.txtDOB.setLabel("Date of Birth");
          this.txtOtherNames.setRendered(true);
          this.txtPhysicalAddress.setShowRequired(false);
          this.btnShowContactPersons.setVisible(false);
          this.btnShowContactPersons.setDisabled(true);
          this.txtWebsite.setVisible(false);
          this.txtAuditors.setVisible(false);
          this.txtParentCompany.setVisible(false);
          this.parentcompanyPan.setVisible(false);
          this.tabDirectors.setVisible(false);
          this.tabAuditors.setVisible(false);
          this.txtDLNo.setVisible(true);
          this.txtDateOfEmployment.setVisible(true);
          this.layClientImage.setVisible(true);
          this.txtGender.setRendered(true);
          this.grpEmploymentDetails.setRendered(true);
          this.txtDrvExperience.setRendered(true);
          this.layClientImage.setVisible(true);
          this.clientTitlePan.setRendered(true);
          this.txtClientTitle.setRendered(true);
          this.txtPassportNo.setVisible(true);
          this.txtSelectClientTitle.setRendered(true);
          if ((clientCheck.equals("Y")) || (clientCheck == null)) {
            this.pnLabelAgency.setVisible(true);
          } else {
            this.pnLabelAgency.setVisible(false);
          }
          this.txtAgencyName.setVisible(true);
          this.txtAgencies.setVisible(true);
          this.txtDirectClient.setValue("Y");
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtDirectClient);
          if (new Rendering().isClientId())
          {
            this.txtPIN.setDisabled(true);
            this.txtId.setDisabled(false);
            this.txtId.setRequired(true);
            this.txtDrvExperience.setRendered(true);
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtId);
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtPIN);
          }
        }
        else
        {
          this.session.setAttribute("clientTypeVAl", "C");
          this.session.setAttribute("clientTypes", "C");
          this.txtPhysicalAddress.setShowRequired(true);
          this.sbrCorporate.setSelected(true);
          this.sbrIndividual.setSelected(false);
          this.grpEmploymentDetails.setRendered(false);
          this.clientTitlePan.setVisible(false);
          this.txtTitle.setVisible(false);
          this.txtTitle.setDisabled(true);
          this.txtSurname.setLabel("Corporate Name");
          this.txtDOB.setLabel("Date of Incorporation");
          this.txtOtherNames.setRendered(false);
          this.layClientImage.setVisible(false);
          this.txtOtherNames.setValue((Object)null);
          this.txtWebsite.setVisible(true);
          this.txtAuditors.setVisible(false);
          this.txtGender.setRendered(false);
          this.txtParentCompanyCode.setVisible(true);
          this.parentcompanyPan.setVisible(true);
          this.txtDLNo.setVisible(false);
          this.txtDateOfEmployment.setVisible(false);
          this.txtPassportNo.setVisible(false);
          this.tabAuditors.setVisible(true);
          this.tabDirectors.setVisible(true);
          this.txtDrvExperience.setRendered(false);
          this.btnShowContactPersons.setVisible(true);
          this.btnShowContactPersons.setDisabled(false);
          this.txtSelectClientTitle.setRendered(false);
          this.clientTitlePan.setRendered(false);
          this.txtClientTitle.setRendered(false);
          this.pnLabelAgency.setVisible(false);
          this.txtAgencyName.setVisible(false);
          this.txtAgencies.setVisible(false);
          if (new Rendering().isCooperatePin())
          {
            this.txtPIN.setDisabled(false);
            this.txtId.setDisabled(true);
            this.txtPIN.setRequired(true);
            this.txtDrvExperience.setRendered(false);
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtPIN);
            AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtId);
          }
        }
      }
    }
    catch (Exception e) {}
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtSelectClientTitle);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.sbrIndividual);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.sbrCorporate);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.clientTab);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.panelCreateClient);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.mainPanel);
    this.panelCreateClient.setVisible(true);
  }

  public void clientTypeChanged(ValueChangeEvent valueChangeEvent)
  {
    Util mand = new Util();
    String tying = mand.getClientTying();
    if (tying.equals("N")) {
      return;
    }
    if (this.txtDirectClient != null) {
      if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue())
      {
        if (this.txtDirectClient.getValue() == null)
        {
          this.pnLabelAgency.setVisible(false);
          this.txtAgencyName.setVisible(false);
          this.txtAgencies.setVisible(false);
          this.pnLabelAgency.setShowRequired(false);
          this.labelAndMessage.setShowRequired(true);
        }
        else if (this.txtDirectClient.getValue().equals("I"))
        {
          this.pnLabelAgency.setVisible(false);
          this.txtAgencyName.setVisible(false);
          this.txtAgencies.setVisible(false);
          this.pnLabelAgency.setShowRequired(false);
          this.labelAndMessage.setShowRequired(true);
        }
        else if (this.txtDirectClient.getValue().equals("C"))
        {
          this.pnLabelAgency.setVisible(true);
        }
        this.txtAgencyName.setVisible(true);
        this.txtAgencies.setVisible(true);
        this.pnLabelAgency.setShowRequired(true);
        this.labelAndMessage.setShowRequired(false);
      }
      else
      {
        this.pnLabelAgency.setVisible(false);
        this.txtAgencyName.setVisible(false);
        this.txtAgencies.setVisible(false);
        this.pnLabelAgency.setShowRequired(false);
        this.labelAndMessage.setShowRequired(true);
      }
    }
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.pnLabelAgency);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtAgencyName);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtAgencies);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.labelAndMessage);
  }

  public void setPnLabelAgency(RichPanelLabelAndMessage pnLabelAgency)
  {
    this.pnLabelAgency = pnLabelAgency;
  }

  public RichPanelLabelAndMessage getPnLabelAgency()
  {
    return this.pnLabelAgency;
  }

  public void setClntContacts(RichTable clntContacts)
  {
    this.clntContacts = clntContacts;
  }

  public RichTable getClntContacts()
  {
    return this.clntContacts;
  }

  public String newContact()
  {
    this.conCode.setValue((Object)null);
    this.conName.setValue((Object)null);
    this.conAddress.setValue((Object)null);
    this.conPhysi.setValue((Object)null);
    this.conSect.setValue((Object)null);
    this.conSect.setLabel(null);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:clntCont').show(hints);");
    return null;
  }

  public String editContact()
  {
    Object key2 = this.clntContacts.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding == null)
    {
      GlobalCC.INFORMATIONREPORTING("No record selected.");
      return null;
    }
    this.conCode.setValue(nodeBinding.getAttribute("clcoCode"));
    this.conName.setValue(nodeBinding.getAttribute("clcoName"));
    this.conAddress.setValue(nodeBinding.getAttribute("clcoPostAdd"));
    this.conPhysi.setValue(nodeBinding.getAttribute("clcoPhysAdd"));
    this.conSect.setValue(nodeBinding.getAttribute("secName"));
    this.conSect.setLabel(nodeBinding.getAttribute("secCode").toString());
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:clntCont').show(hints);");
    return null;
  }

  public String deleteContact()
  {
    Object key2 = this.clntContacts.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      String code = nodeBinding.getAttribute("clcoCode").toString();
      DBConnector dbConnector = new DBConnector();
      OracleConnection conn = null;
      OracleCallableStatement statement = null;
      try
      {
        conn = dbConnector.getDatabaseConnection();
        String query = "begin TQC_CLIENTS_PKG.client_contacts_proc(?,?,?); end;";
        ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor("TQC_CLIENT_CONTACTS_TAB", conn);
        ArrayList<UserSystem> activityList = new ArrayList();
        UserSystem conType = new UserSystem();
        conType.setSQLTypeName("TQC_CLIENT_CONTACTS_OBJ");
        conType.setClcoCode(new BigDecimal(code));
        activityList.add(conType);
        ARRAY array = new ARRAY(descriptor, conn, activityList.toArray());
        statement = (OracleCallableStatement)conn.prepareCall(query);
        statement.setString(1, "D");
        statement.setArray(2, array);
        statement.setObject(3, (Object)null);
        statement.execute();
        statement.close();
        conn.commit();
        conn.close();
        ADFUtils.findIterator("fetchClientContactsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget(this.clntContacts);
        String message = "Record DELETED Successfully!";
        GlobalCC.INFORMATIONREPORTING(message);
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(conn, e);
      }
    }
    else
    {
      GlobalCC.INFORMATIONREPORTING("You need to select an existing Record to proceed.");
      return null;
    }
    return null;
  }

  public void setConCode(RichInputText conCode)
  {
    this.conCode = conCode;
  }

  public RichInputText getConCode()
  {
    return this.conCode;
  }

  public void setConName(RichInputText conName)
  {
    this.conName = conName;
  }

  public RichInputText getConName()
  {
    return this.conName;
  }

  public void setConAddress(RichInputText conAddress)
  {
    this.conAddress = conAddress;
  }

  public RichInputText getConAddress()
  {
    return this.conAddress;
  }

  public void setConPhysi(RichInputText conPhysi)
  {
    this.conPhysi = conPhysi;
  }

  public RichInputText getConPhysi()
  {
    return this.conPhysi;
  }

  public void setConSect(RichInputText conSect)
  {
    this.conSect = conSect;
  }

  public RichInputText getConSect()
  {
    return this.conSect;
  }

  public String launchSector()
  {
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:conSector').show(hints);");
    return null;
  }

  public void setSector(RichTable sector)
  {
    this.sector = sector;
  }

  public RichTable getSector()
  {
    return this.sector;
  }

  public String sectorSelected()
  {
    Object key2 = this.sector.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.conSect.setValue(nodeBinding.getAttribute("name"));
      this.conSect.setLabel(nodeBinding.getAttribute("code").toString());
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.conSect);
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:conSector').hide(hints);");
    }
    return null;
  }

  public String HoldingCompanySelected()
  {
    Object key2 = this.holdingCompanyTbl.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.txtHoldingCompany.setValue(nodeBinding.getAttribute("CLNT_NAME"));
      this.session.setAttribute("ClnCode", nodeBinding.getAttribute("CLNT_CODE"));
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtHoldingCompany);
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:holdingCompanyPop').hide(hints);");
    }
    return null;
  }

  public String saveContact()
  {
    String conCodeVal = GlobalCC.checkNullValues(this.conCode.getValue());
    String conNameVal = GlobalCC.checkNullValues(this.conName.getValue());
    String address = GlobalCC.checkNullValues(this.conAddress.getValue());
    String phys = GlobalCC.checkNullValues(this.conPhysi.getValue());
    String sect = GlobalCC.checkNullValues(this.conSect.getValue());
    if (conNameVal == null)
    {
      GlobalCC.errorValueNotEntered("Error Value Missing: Name");
      return null;
    }
    if (sect != null) {
      sect = this.conSect.getLabel();
    }
    DBConnector dbConnector = new DBConnector();
    OracleConnection conn = null;
    OracleCallableStatement statement = null;
    try
    {
      conn = dbConnector.getDatabaseConnection();
      String query = "begin TQC_CLIENTS_PKG.client_contacts_proc(?,?,?); end;";
      ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor("TQC_CLIENT_CONTACTS_TAB", conn);
      ArrayList<UserSystem> activityList = new ArrayList();
      UserSystem conType = new UserSystem();
      conType.setSQLTypeName("TQC_CLIENT_CONTACTS_OBJ");
      if (conCodeVal != null) {
        conType.setClcoCode(new BigDecimal(conCodeVal));
      }
      conType.setClntCode(new BigDecimal(this.session.getAttribute("ClientCode").toString()));
      conType.setClcoName(conNameVal);
      conType.setClcoPhysAddress(phys);
      conType.setClcoPostAddress(address);
      if (sect != null) {
        conType.setClcoSecCode(new BigDecimal(sect));
      }
      activityList.add(conType);
      ARRAY array = new ARRAY(descriptor, conn, activityList.toArray());
      statement = (OracleCallableStatement)conn.prepareCall(query);
      if (conCodeVal != null) {
        statement.setString(1, "E");
      } else {
        statement.setString(1, "A");
      }
      statement.setArray(2, array);
      statement.setObject(3, (Object)null);
      statement.execute();
      statement.close();
      conn.commit();
      conn.close();
      ADFUtils.findIterator("fetchClientContactsIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.clntContacts);
      GlobalCC.dismissPopUp("pt1", "clntCont");
      String message = "Record saved Successfully!";
      GlobalCC.INFORMATIONREPORTING(message);
    }
    catch (Exception e)
    {
      GlobalCC.EXCEPTIONREPORTING(conn, e);
    }
    return null;
  }

  public void setLegacyShtDesc(RichInputText legacyShtDesc)
  {
    this.legacyShtDesc = legacyShtDesc;
  }

  public RichInputText getLegacyShtDesc()
  {
    return this.legacyShtDesc;
  }

  public void setTxtZipCode(RichInputText txtZipCode)
  {
    this.txtZipCode = txtZipCode;
  }

  public RichInputText getTxtZipCode()
  {
    return this.txtZipCode;
  }

  public void setTxtAnniversary(RichInputDate txtAnniversary)
  {
    this.txtAnniversary = txtAnniversary;
  }

  public RichInputDate getTxtAnniversary()
  {
    return this.txtAnniversary;
  }

  public void setTxtCreditRting(RichSelectOneChoice txtCreditRting)
  {
    this.txtCreditRting = txtCreditRting;
  }

  public RichSelectOneChoice getTxtCreditRting()
  {
    return this.txtCreditRting;
  }

  public void setTxtHoldingCompany(RichInputText txtHoldingCompany)
  {
    this.txtHoldingCompany = txtHoldingCompany;
  }

  public RichInputText getTxtHoldingCompany()
  {
    return this.txtHoldingCompany;
  }

  public void setHoldingCompanyTbl(RichTable holdingCompanyTbl)
  {
    this.holdingCompanyTbl = holdingCompanyTbl;
  }

  public RichTable getHoldingCompanyTbl()
  {
    return this.holdingCompanyTbl;
  }

  public void setTxtClientCategory(RichSelectOneChoice txtClientCategory)
  {
    this.txtClientCategory = txtClientCategory;
  }

  public RichSelectOneChoice getTxtClientCategory()
  {
    return this.txtClientCategory;
  }

  public void setClientSelected(UISelectItems clientSelected)
  {
    this.clientSelected = clientSelected;
  }

  public UISelectItems getClientSelected()
  {
    return this.clientSelected;
  }

  public void setSelectClientSelected(RichSelectItem selectClientSelected)
  {
    this.selectClientSelected = selectClientSelected;
  }

  public RichSelectItem getSelectClientSelected()
  {
    return this.selectClientSelected;
  }

  public void setClnt_code(BigDecimal clnt_code)
  {
    this.clnt_code = clnt_code;
  }

  public BigDecimal getClnt_code()
  {
    return this.clnt_code;
  }

  public void setTxtClientTypes(RichSelectOneChoice txtClientTypes)
  {
    this.txtClientTypes = txtClientTypes;
  }

  public RichSelectOneChoice getTxtClientTypes()
  {
    return this.txtClientTypes;
  }

  public void setTxtDrvExperience(RichInputText txtDrvExperience)
  {
    this.txtDrvExperience = txtDrvExperience;
  }

  public RichInputText getTxtDrvExperience()
  {
    return this.txtDrvExperience;
  }

  public void selectHoldingCompany(ValueChangeEvent valueChangeEvent)
  {
    if (this.txtProposer.getValue().toString().equalsIgnoreCase("N"))
    {
      this.session.setAttribute("HoldingCompany", "Y");
      this.txtHoldingCompany.setDisabled(true);
      this.txtCommandBtn.setDisabled(false);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtHoldingCompany);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtCommandBtn);
    }
    else if (this.txtProposer.getValue().toString().equalsIgnoreCase("Y"))
    {
      this.session.setAttribute("HoldingCompany", "N");
      this.txtHoldingCompany.setDisabled(true);
      this.txtCommandBtn.setDisabled(true);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtHoldingCompany);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtCommandBtn);
    }
  }

  public void setTxtHoldingCompanyCont(RichPanelLabelAndMessage txtHoldingCompanyCont)
  {
    this.txtHoldingCompanyCont = txtHoldingCompanyCont;
  }

  public RichPanelLabelAndMessage getTxtHoldingCompanyCont()
  {
    return this.txtHoldingCompanyCont;
  }

  public void setTxtCommandBtn(RichCommandButton txtCommandBtn)
  {
    this.txtCommandBtn = txtCommandBtn;
  }

  public RichCommandButton getTxtCommandBtn()
  {
    return this.txtCommandBtn;
  }

  public void setTxtSacco(RichSelectOneChoice txtSacco)
  {
    this.txtSacco = txtSacco;
  }

  public RichSelectOneChoice getTxtSacco()
  {
    return this.txtSacco;
  }

  public void saccoSelected(ValueChangeEvent valueChangeEvent) {}

  public void setTxtSelectClientTitle(RichCommandButton txtSelectClientTitle)
  {
    this.txtSelectClientTitle = txtSelectClientTitle;
  }

  public RichCommandButton getTxtSelectClientTitle()
  {
    return this.txtSelectClientTitle;
  }

  public void setComfirmContinue(RichDialog comfirmContinue)
  {
    this.comfirmContinue = comfirmContinue;
  }

  public RichDialog getComfirmContinue()
  {
    return this.comfirmContinue;
  }

  public void setTxtReasonForUpdate(RichInputText txtReasonForUpdate)
  {
    this.txtReasonForUpdate = txtReasonForUpdate;
  }

  public RichInputText getTxtReasonForUpdate()
  {
    return this.txtReasonForUpdate;
  }

  public void setWebClientName(RichInputText webClientName)
  {
    this.webClientName = webClientName;
  }

  public RichInputText getWebClientName()
  {
    return this.webClientName;
  }

  public void setWebClientShtDesc(RichInputText webClientShtDesc)
  {
    this.webClientShtDesc = webClientShtDesc;
  }

  public RichInputText getWebClientShtDesc()
  {
    return this.webClientShtDesc;
  }

  public void setSaveShtDesc(RichCommandButton saveShtDesc)
  {
    this.saveShtDesc = saveShtDesc;
  }

  public RichCommandButton getSaveShtDesc()
  {
    return this.saveShtDesc;
  }

  public void setAddClientBranches(RichCommandButton addClientBranches)
  {
    this.addClientBranches = addClientBranches;
  }

  public RichCommandButton getAddClientBranches()
  {
    return this.addClientBranches;
  }

  public void setEditClientBranches(RichCommandButton editClientBranches)
  {
    this.editClientBranches = editClientBranches;
  }

  public RichCommandButton getEditClientBranches()
  {
    return this.editClientBranches;
  }

  public void setDeleteClientBranches(RichCommandButton deleteClientBranches)
  {
    this.deleteClientBranches = deleteClientBranches;
  }

  public RichCommandButton getDeleteClientBranches()
  {
    return this.deleteClientBranches;
  }

  public String addClientBrches()
  {
    this.session.setAttribute("action", "A");
    this.webClientName.setValue((Object)null);
    this.webClientShtDesc.setValue((Object)null);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:webClientPop').show(hints);");
    return null;
  }

  public String editClntBranches()
  {
    this.session.setAttribute("action", "E");
    Object key2 = this.clientBranch.getSelectedRowData();
    JUCtrlValueBinding r = (JUCtrlValueBinding)key2;
    if (r == null) {
      GlobalCC.INFORMATIONREPORTING("Please Select A Branch to edit");
    }
    this.session.setAttribute("clientBankCode", r.getAttribute("clientBankCode"));
    this.webClientName.setValue(r.getAttribute("clientBankName"));
    this.webClientShtDesc.setValue(r.getAttribute("clientShtDesc"));
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:webClientPop').show(hints);");
    return null;
  }

  public String deleteClntBranches()
  {
    BigDecimal Code = this.session.getAttribute("clientBankCode") != null ? new BigDecimal(this.session.getAttribute("clientBankCode").toString()) : null;
    DBConnector dbCon = new DBConnector();
    OracleConnection conn = null;
    try
    {
      conn = dbCon.getDatabaseConnection();
      String query = "begin TQC_SETUPS_PKG.createBankBranches(?,?,?,?,?); end;";
      OracleCallableStatement cst = null;
      cst = (OracleCallableStatement)conn.prepareCall(query);
      cst.setString(1, "D");
      cst.setBigDecimal(2, Code);
      cst.setBigDecimal(3, null);
      cst.setString(4, null);
      cst.setString(5, null);
      cst.execute();
      cst.close();
      conn.commit();
      conn.close();
      GlobalCC.INFORMATIONREPORTING("Record Successfully Deleted");
    }
    catch (Exception e)
    {
      GlobalCC.EXCEPTIONREPORTING(e);
    }
    ADFUtils.findIterator("findWebClientBranchesIterator").executeQuery();
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.clientBranch);
    return null;
  }

  public void setClientBranch(RichTable clientBranch)
  {
    this.clientBranch = clientBranch;
  }

  public RichTable getClientBranch()
  {
    return this.clientBranch;
  }

  public String saveBranchDetails()
  {
    BigDecimal clientCode = null;
    BigDecimal Code = null;
    String Branchname = null;
    String BranchshtDesc = null;
    if (this.session.getAttribute("ClCode") == null)
    {
      GlobalCC.INFORMATIONREPORTING("Please select a client or Create one");
      return null;
    }
    clientCode = new BigDecimal(this.session.getAttribute("ClCode").toString());
    Code = this.session.getAttribute("clientBankCode") != null ? new BigDecimal(this.session.getAttribute("clientBankCode").toString()) : null;
    Branchname = this.webClientName.getValue() != null ? this.webClientName.getValue().toString() : null;
    BranchshtDesc = this.webClientShtDesc.getValue() != null ? this.webClientShtDesc.getValue().toString() : null;
    DBConnector dbCon = new DBConnector();
    OracleConnection conn = null;
    OracleCallableStatement cst = null;
    try
    {
      conn = dbCon.getDatabaseConnection();
      String query = "begin TQC_SETUPS_PKG.createBankBranches(?,?,?,?,?); end;";
      cst = (OracleCallableStatement)conn.prepareCall(query);
      cst.setString(1, this.session.getAttribute("action").toString());
      cst.setBigDecimal(2, Code);
      cst.setBigDecimal(3, clientCode);
      cst.setString(4, BranchshtDesc);
      cst.setString(5, Branchname);
      cst.execute();
      cst.close();
      conn.commit();
      conn.close();
      GlobalCC.INFORMATIONREPORTING("Record Successfully Updated");
    }
    catch (Exception e)
    {
      GlobalCC.EXCEPTIONREPORTING(e);
    }
    finally
    {
      DbUtils.closeQuietly(conn, cst, (ResultSet)null);
    }
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:webClientPop').hide(hints);");
    ADFUtils.findIterator("findWebClientBranchesIterator").executeQuery();
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.clientBranch);
    return null;
  }

  public String assignBank()
  {
    DBConnector datahandler = new DBConnector();
    OracleConnection conn = null;
    CallableStatement cst = null;
    int rowCount = this.unAssignedBank.getRowCount();
    if (rowCount < 1)
    {
      GlobalCC.INFORMATIONREPORTING("No Bank To Assign");
      return null;
    }
    conn = datahandler.getDatabaseConnection();
    try
    {
      for (int i = 0; i < rowCount; i++)
      {
        Boolean Accept = Boolean.valueOf(false);
        JUCtrlValueBinding r = (JUCtrlValueBinding)this.unAssignedBank.getRowData(i);
        Accept = (Boolean)r.getAttribute("select");
        if (r == null)
        {
          GlobalCC.INFORMATIONREPORTING("Please select a Bank To Assign");
          return null;
        }
        if (Accept.booleanValue())
        {
          String Query = "begin TQC_SETUPS_PKG.assignBankToClient(?,?,?); end;";
          datahandler = new DBConnector();
          conn = datahandler.getDatabaseConnection();
          cst = conn.prepareCall(Query);
          cst.setString(1, "A");
          cst.setBigDecimal(2, (BigDecimal)this.session.getAttribute("clientAccCode"));
          cst.setBigDecimal(3, (BigDecimal)r.getAttribute("CLNT_CODE"));
          cst.execute();
        }
      }
      ADFUtils.findIterator("findUnassignedCompaniesIterator").executeQuery();
      ADFUtils.findIterator("findassignedCompaniesIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.unAssignedBank);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.assignedBank);
      ADFUtils.findIterator("findDefaultBranchLovIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.defaultBranch);
    }
    catch (Exception e)
    {
      GlobalCC.EXCEPTIONREPORTING(e);
    }
    return null;
  }

  public void setUnAssignedBank(RichTable unAssignedBank)
  {
    this.unAssignedBank = unAssignedBank;
  }

  public RichTable getUnAssignedBank()
  {
    return this.unAssignedBank;
  }

  public void setUnAssigned(RichSelectBooleanCheckbox unAssigned)
  {
    this.unAssigned = unAssigned;
  }

  public RichSelectBooleanCheckbox getUnAssigned()
  {
    return this.unAssigned;
  }

  public void setAssignedBank(RichTable assignedBank)
  {
    this.assignedBank = assignedBank;
  }

  public RichTable getAssignedBank()
  {
    return this.assignedBank;
  }

  public void selectWebAccount(SelectionEvent selectionEvent)
  {
    Object keys = this.tblwebAccounts.getSelectedRowData();
    JUCtrlValueBinding r = (JUCtrlValueBinding)keys;
    if (r == null)
    {
      GlobalCC.INFORMATIONREPORTING("Please select A web Account");
      return;
    }
    this.session.setAttribute("clientAccCode", r.getAttribute("clientAccCode"));
    ADFUtils.findIterator("findUnassignedCompaniesIterator").executeQuery();
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.unAssignedBank);
    ADFUtils.findIterator("findassignedCompaniesIterator").executeQuery();
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.assignedBank);
    ADFUtils.findIterator("findDefaultBranchLovIterator").executeQuery();
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.defaultBranch);
  }

  public String unassignBank()
  {
    DBConnector datahandler = new DBConnector();
    OracleConnection conn = null;
    CallableStatement cst = null;
    int rowCount = this.assignedBank.getRowCount();
    if (rowCount < 1)
    {
      GlobalCC.INFORMATIONREPORTING("No Bank To Re-Assign");
      return null;
    }
    conn = datahandler.getDatabaseConnection();
    try
    {
      for (int i = 0; i < rowCount; i++)
      {
        Boolean Accept = Boolean.valueOf(false);
        JUCtrlValueBinding r = (JUCtrlValueBinding)this.assignedBank.getRowData(i);
        Accept = (Boolean)r.getAttribute("select");
        if (r == null)
        {
          GlobalCC.INFORMATIONREPORTING("Please select a Bank To Assign");
          return null;
        }
        if (Accept.booleanValue())
        {
          String Query = "begin TQC_SETUPS_PKG.assignBankToClient(?,?,?); end;";
          datahandler = new DBConnector();
          conn = datahandler.getDatabaseConnection();
          cst = conn.prepareCall(Query);
          cst.setString(1, "D");
          cst.setBigDecimal(2, null);
          cst.setBigDecimal(3, (BigDecimal)r.getAttribute("CLNT_CODE"));
          cst.execute();
        }
      }
      ADFUtils.findIterator("findUnassignedCompaniesIterator").executeQuery();
      ADFUtils.findIterator("findassignedCompaniesIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.unAssignedBank);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.assignedBank);
      ADFUtils.findIterator("findDefaultBranchLovIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.defaultBranch);
    }
    catch (Exception e)
    {
      GlobalCC.EXCEPTIONREPORTING(e);
    }
    return null;
  }

  public String assingAllBanks()
  {
    for (int j = 0; j < this.unAssignedBank.getRowCount(); j++)
    {
      JUCtrlValueBinding r = (JUCtrlValueBinding)this.unAssignedBank.getRowData(j);
      r.setAttribute("select", Boolean.valueOf(true));
      this.unAssigned.setSelected(true);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.unAssigned);
    }
    assignBank();
    return null;
  }

  public String unAssignAllBanks()
  {
    for (int j = 0; j < this.assignedBank.getRowCount(); j++)
    {
      JUCtrlValueBinding r = (JUCtrlValueBinding)this.assignedBank.getRowData(j);
      r.setAttribute("select", Boolean.valueOf(false));
      this.assignedCheck.setSelected(false);
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.assignedCheck);
    }
    unassignBank();
    return null;
  }

  public void setAssignedCheck(RichSelectBooleanCheckbox assignedCheck)
  {
    this.assignedCheck = assignedCheck;
  }

  public RichSelectBooleanCheckbox getAssignedCheck()
  {
    return this.assignedCheck;
  }

  public void setTxtDefaultBranch(RichInputText txtDefaultBranch)
  {
    this.txtDefaultBranch = txtDefaultBranch;
  }

  public RichInputText getTxtDefaultBranch()
  {
    return this.txtDefaultBranch;
  }

  public String addSaveDefaultBranch()
  {
    BigDecimal branchCode = this.session.getAttribute("clientBranchCode") != null ? new BigDecimal(this.session.getAttribute("clientBranchCode").toString()) : null;
    DBConnector dbCon = new DBConnector();
    OracleConnection conn = null;
    OracleCallableStatement cst = null;
    try
    {
      conn = dbCon.getDatabaseConnection();
      String query = "begin TQC_SETUPS_PKG.assignDefaultBranch(?); end;";
      cst = (OracleCallableStatement)conn.prepareCall(query);
      cst.setBigDecimal(1, branchCode);
      cst.execute();
      cst.close();
      conn.commit();
      conn.close();
    }
    catch (Exception e)
    {
      GlobalCC.EXCEPTIONREPORTING(e);
    }
    finally
    {
      DbUtils.closeQuietly(conn, cst, (ResultSet)null);
    }
    return null;
  }

  public String addClientDetails()
  {
    Object keys = this.defaultBranch.getSelectedRowData();
    JUCtrlValueBinding r = (JUCtrlValueBinding)keys;
    if (r == null)
    {
      GlobalCC.INFORMATIONREPORTING("Please select A Default Branch");
      return null;
    }
    this.session.setAttribute("clientBranchCode", r.getAttribute("clientBankCode"));
    this.txtDefaultBranch.setValue(r.getAttribute("clientBankName"));
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtDefaultBranch);
    addSaveDefaultBranch();
    GlobalCC.INFORMATIONREPORTING("Default Branch Set Successfully");
    return null;
  }

  public void setDefaultBranch(RichTable defaultBranch)
  {
    this.defaultBranch = defaultBranch;
  }

  public RichTable getDefaultBranch()
  {
    return this.defaultBranch;
  }

  public String addProductAttribute()
  {
    this.session.setAttribute("action", "A");
    this.txtWebProduct.setValue((Object)null);
    this.txtUserName.setValue((Object)null);
    this.txtDebitLimit.setValue((Object)null);
    this.txtCrLimits.setValue((Object)null);
    this.txtClientAccount.setValue((Object)null);
    this.txtPolicyCheck.setSelected(false);
    this.txtEndorsCheck.setSelected(false);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:productAttributePop').show(hints);");
    return null;
  }

  public String editProductAttribute()
  {
    this.session.setAttribute("action", "E");
    Object keys = this.webProductsDetails.getSelectedRowData();
    JUCtrlValueBinding r = (JUCtrlValueBinding)keys;
    if (r == null)
    {
      GlobalCC.INFORMATIONREPORTING("Please select A Web product");
      return null;
    }
    this.session.setAttribute("productCode1", r.getAttribute("productCode1"));
    this.session.setAttribute("webProductCode", r.getAttribute("productCode1"));
    this.session.setAttribute("WebuserCode", r.getAttribute("userCode1"));
    this.session.setAttribute("AccCode", r.getAttribute("clnaCode"));
    this.txtWebProduct.setValue(r.getAttribute("PRO_DESC"));
    this.txtUserName.setValue(r.getAttribute("userName1"));
    this.txtDebitLimit.setValue(r.getAttribute("drLimitAmount"));
    this.txtCrLimits.setValue(r.getAttribute("crLimitAmount"));
    if (r.getAttribute("polUse") != null)
    {
      if (r.getAttribute("polUse").equals("Y")) {
        this.txtPolicyCheck.setSelected(true);
      } else {
        this.txtPolicyCheck.setSelected(false);
      }
    }
    else {
      this.txtPolicyCheck.setSelected(false);
    }
    if (r.getAttribute("endosUse") != null)
    {
      if (r.getAttribute("endosUse").equals("Y")) {
        this.txtEndorsCheck.setSelected(true);
      } else {
        this.txtEndorsCheck.setSelected(false);
      }
    }
    else {
      this.txtEndorsCheck.setSelected(false);
    }
    if (r.getAttribute("clnaShtDesc") != null) {
      this.txtClientAccount.setValue(r.getAttribute("clnaShtDesc"));
    } else {
      this.txtClientAccount.setValue((Object)null);
    }
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:productAttributePop').show(hints);");
    return null;
  }

  public String deleteProductAttribute()
  {
    BigDecimal clientCode = this.session.getAttribute("ClientCode") != null ? new BigDecimal(this.session.getAttribute("ClientCode").toString()) : null;
    BigDecimal webProductCode = this.session.getAttribute("wbProductCode") != null ? new BigDecimal(this.session.getAttribute("wbProductCode").toString()) : null;
    DBConnector dbCon = new DBConnector();
    OracleConnection conn = null;
    try
    {
      conn = dbCon.getDatabaseConnection();
      String query = "begin TQC_SETUPS_PKG.createWebProductDetails(?,?,?,?,?,?,?,?,?); end;";
      OracleCallableStatement cst = null;
      cst = (OracleCallableStatement)conn.prepareCall(query);
      cst.setString(1, "D");
      cst.setBigDecimal(2, clientCode);
      cst.setBigDecimal(3, webProductCode);
      cst.setBigDecimal(4, null);
      cst.setString(5, null);
      cst.setBigDecimal(6, null);
      cst.setBigDecimal(7, null);
      cst.setString(8, null);
      cst.setString(9, null);
      cst.execute();
      cst.close();
      conn.commit();
      conn.close();
      ADFUtils.findIterator("findWebProductsDetailsIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.webProductsDetails);
      GlobalCC.INFORMATIONREPORTING("Record Successfully Deleted");
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:productAttributePop').hide(hints);");
    }
    catch (Exception e)
    {
      e.printStackTrace();
      GlobalCC.EXCEPTIONREPORTING(conn, e);
      return null;
    }
    return null;
  }

  public void setTxtDebitLimit(RichInputNumberSpinbox txtDebitLimit)
  {
    this.txtDebitLimit = txtDebitLimit;
  }

  public RichInputNumberSpinbox getTxtDebitLimit()
  {
    return this.txtDebitLimit;
  }

  public void setTxtCrLimits(RichInputNumberSpinbox txtCrLimits)
  {
    this.txtCrLimits = txtCrLimits;
  }

  public RichInputNumberSpinbox getTxtCrLimits()
  {
    return this.txtCrLimits;
  }

  public void setTxtWebProduct(RichInputText txtWebProduct)
  {
    this.txtWebProduct = txtWebProduct;
  }

  public RichInputText getTxtWebProduct()
  {
    return this.txtWebProduct;
  }

  public void setTxtUserName(RichInputText txtUserName)
  {
    this.txtUserName = txtUserName;
  }

  public RichInputText getTxtUserName()
  {
    return this.txtUserName;
  }

  public String saveProductAttribute()
  {
    BigDecimal accountCode = this.session.getAttribute("AccCode") != null ? new BigDecimal(this.session.getAttribute("AccCode").toString()) : null;
    BigDecimal clientCode = this.session.getAttribute("ClientCode") != null ? new BigDecimal(this.session.getAttribute("ClientCode").toString()) : null;
    BigDecimal webProductCode = this.session.getAttribute("webProductCode") != null ? new BigDecimal(this.session.getAttribute("webProductCode").toString()) : null;
    BigDecimal userCode = this.session.getAttribute("WebuserCode") != null ? new BigDecimal(this.session.getAttribute("WebuserCode").toString()) : null;
    String userName = this.session.getAttribute("WebuserName") != null ? this.session.getAttribute("WebuserName").toString() : null;
    BigDecimal DrLimits = this.txtDebitLimit.getValue() != null ? new BigDecimal(this.txtDebitLimit.getValue().toString()) : null;
    BigDecimal CrLimits = this.txtCrLimits.getValue() != null ? new BigDecimal(this.txtCrLimits.getValue().toString()) : null;
    String PolicyUse = this.txtPolicyCheck.isSelected() ? "Y" : "N";
    String endosUse = this.txtEndorsCheck.isSelected() ? "Y" : "N";
    DBConnector dbCon = new DBConnector();
    OracleConnection conn = null;
    try
    {
      conn = dbCon.getDatabaseConnection();
      String query = "begin TQC_SETUPS_PKG.createWebProductDetails(?,?,?,?,?,?,?,?,?,?); end;";
      OracleCallableStatement cst = null;
      cst = (OracleCallableStatement)conn.prepareCall(query);
      cst.setString(1, (String)this.session.getAttribute("action"));
      cst.setBigDecimal(2, clientCode);
      cst.setBigDecimal(3, webProductCode);
      cst.setBigDecimal(4, userCode);
      cst.setString(5, userName);
      cst.setBigDecimal(6, DrLimits);
      cst.setBigDecimal(7, CrLimits);
      cst.setString(8, PolicyUse);
      cst.setString(9, endosUse);
      cst.setBigDecimal(10, accountCode);
      cst.execute();
      cst.close();
      conn.commit();
      conn.close();
      ADFUtils.findIterator("findWebProductsDetailsIterator").executeQuery();
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.webProductsDetails);
      GlobalCC.INFORMATIONREPORTING("Record Successfully inserted");
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:productAttributePop').hide(hints);");
    }
    catch (Exception e)
    {
      e.printStackTrace();
      GlobalCC.EXCEPTIONREPORTING(conn, e);
      return null;
    }
    return null;
  }

  public void setWebProductTbl(RichTable webProductTbl)
  {
    this.webProductTbl = webProductTbl;
  }

  public RichTable getWebProductTbl()
  {
    return this.webProductTbl;
  }

  public String addWebproductDetails()
  {
    Object keys = this.webProductTbl.getSelectedRowData();
    JUCtrlValueBinding rows = (JUCtrlValueBinding)keys;
    if (rows == null)
    {
      GlobalCC.INFORMATIONREPORTING("No Record Selected");
      return null;
    }
    this.session.setAttribute("webProductCode", rows.getAttribute("webProductCode"));
    this.txtWebProduct.setValue(rows.getAttribute("productDesc"));
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtWebProduct);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:productAttributePop').show(hints);");
    return null;
  }

  public String addWebUser()
  {
    Object keys = this.tblUser.getSelectedRowData();
    JUCtrlValueBinding r = (JUCtrlValueBinding)keys;
    if (r == null)
    {
      GlobalCC.INFORMATIONREPORTING("Please select a user");
      return null;
    }
    this.session.setAttribute("WebuserCode", r.getAttribute("webUserCode"));
    this.session.setAttribute("WebuserName", r.getAttribute("userName"));
    this.txtUserName.setValue(r.getAttribute("userName"));
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtUserName);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:productAttributePop').show(hints);");
    return null;
  }

  public void setTblUser(RichTable tblUser)
  {
    this.tblUser = tblUser;
  }

  public RichTable getTblUser()
  {
    return this.tblUser;
  }

  public void setTxtPolicyCheck(RichSelectBooleanCheckbox txtPolicyCheck)
  {
    this.txtPolicyCheck = txtPolicyCheck;
  }

  public RichSelectBooleanCheckbox getTxtPolicyCheck()
  {
    return this.txtPolicyCheck;
  }

  public void setTxtEndorsCheck(RichSelectBooleanCheckbox txtEndorsCheck)
  {
    this.txtEndorsCheck = txtEndorsCheck;
  }

  public RichSelectBooleanCheckbox getTxtEndorsCheck()
  {
    return this.txtEndorsCheck;
  }

  public void setWebProductsDetails(RichTable webProductsDetails)
  {
    this.webProductsDetails = webProductsDetails;
  }

  public RichTable getWebProductsDetails()
  {
    return this.webProductsDetails;
  }

  public String selectProductPop()
  {
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:WebproductPop').show(hints);");
    return null;
  }

  public void selectWebProducts(SelectionEvent selectionEvent)
  {
    Object keys = this.webProductsDetails.getSelectedRowData();
    JUCtrlValueBinding r = (JUCtrlValueBinding)keys;
    if (r == null)
    {
      GlobalCC.INFORMATIONREPORTING("Please select a user");
      return;
    }
    this.session.setAttribute("wbProductCode", r.getAttribute("productCode1"));
  }

  public void selectEndorsment(ValueChangeEvent valueChangeEvent)
  {
    if (this.txtEndorsCheck.isSelected()) {
      this.txtPolicyCheck.setDisabled(true);
    } else {
      this.txtPolicyCheck.setDisabled(false);
    }
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtPolicyCheck);
  }

  public void selectPolicyCheck(ValueChangeEvent valueChangeEvent)
  {
    if (this.txtPolicyCheck.isSelected()) {
      this.txtEndorsCheck.setDisabled(true);
    } else {
      this.txtEndorsCheck.setDisabled(false);
    }
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtEndorsCheck);
  }

  public void setTxtAgencies(RichCommandButton txtAgencies)
  {
    this.txtAgencies = txtAgencies;
  }

  public RichCommandButton getTxtAgencies()
  {
    return this.txtAgencies;
  }

  public String checkIfIdIsUnique(String idRegNumber)
  {
    String message = null;
    DBConnector dbCon = new DBConnector();
    OracleConnection conn = null;
    OracleCallableStatement cst = null;
    try
    {
      conn = dbCon.getDatabaseConnection();
      String query = "begin TQC_CLIENTS_PKG.check_if_id_unique(?,?); end;";
      cst = (OracleCallableStatement)conn.prepareCall(query);
      cst.setString(1, idRegNumber);
      cst.registerOutParameter(2, 12);
      cst.execute();
      message = cst.getString(2);
      cst.close();
      conn.commit();
      conn.close();
    }
    catch (Exception e)
    {
      GlobalCC.EXCEPTIONREPORTING(e);
    }
    finally
    {
      DbUtils.closeQuietly(conn, cst, (ResultSet)null);
    }
    return message;
  }

  public String showSmsTemplates()
  {
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:smsTempPop').show(hints);");
    return null;
  }

  public String showEmailTempates()
  {
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:emailTemPop').show(hints);");
    return null;
  }

  public String selectSmsTemplate()
  {
    return null;
  }

  public String selectEmailTemplate()
  {
    return null;
  }

  public void setSmsTbl(RichTable smsTbl)
  {
    this.smsTbl = smsTbl;
  }

  public RichTable getSmsTbl()
  {
    return this.smsTbl;
  }

  public void setEmailTbl(RichTable emailTbl)
  {
    this.emailTbl = emailTbl;
  }

  public RichTable getEmailTbl()
  {
    return this.emailTbl;
  }

  public void setTxtPrefix(RichSelectOneChoice txtPrefix)
  {
    this.txtPrefix = txtPrefix;
  }

  public RichSelectOneChoice getTxtPrefix()
  {
    return this.txtPrefix;
  }

  public void setTxtClientAccount(RichInputText txtClientAccount)
  {
    this.txtClientAccount = txtClientAccount;
  }

  public RichInputText getTxtClientAccount()
  {
    return this.txtClientAccount;
  }

  public String addWebClientAccount()
  {
    return null;
  }

  public void setClientAccountTbl(RichTable clientAccountTbl)
  {
    this.clientAccountTbl = clientAccountTbl;
  }

  public RichTable getClientAccountTbl()
  {
    return this.clientAccountTbl;
  }

  public String addClientAccount()
  {
    Object key = this.clientAccountTbl.getSelectedRowData();
    JUCtrlValueBinding r = (JUCtrlValueBinding)key;
    if (r == null)
    {
      GlobalCC.INFORMATIONREPORTING("No Record Selected");
      return null;
    }
    this.txtClientAccount.setValue(r.getAttribute("clnaShtDesc"));
    this.session.setAttribute("AccCode", r.getAttribute("clnaCode"));
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtClientAccount);
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtUserName);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:productAttributePop').show(hints);");
    return null;
  }

  public void setMarketerTbl(RichTable marketerTbl)
  {
    this.marketerTbl = marketerTbl;
  }

  public RichTable getMarketerTbl()
  {
    return this.marketerTbl;
  }

  public String selectMarketer()
  {
    Object key = this.marketerTbl.getSelectedRowData();
    JUCtrlValueBinding r = (JUCtrlValueBinding)key;
    if (r == null)
    {
      GlobalCC.INFORMATIONREPORTING("No Record Selected");
      return null;
    }
    this.session.setAttribute("MarketeragentCode", r.getAttribute("agentCode"));
    this.txtAccountManager.setValue(r.getAttribute("agentName"));
    this.txtAccountManagerCode.setValue(r.getAttribute("agentCode"));
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtAccountManager);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:MarketerPop').hide(hints);");
    return null;
  }

  public void setLabelAndMessage(RichPanelLabelAndMessage labelAndMessage)
  {
    this.labelAndMessage = labelAndMessage;
  }

  public RichPanelLabelAndMessage getLabelAndMessage()
  {
    return this.labelAndMessage;
  }

  public void setRelationShipPop(RichCommandButton relationShipPop)
  {
    this.relationShipPop = relationShipPop;
  }

  public RichCommandButton getRelationShipPop()
  {
    return this.relationShipPop;
  }

  public void setTxtPrefixManager(RichInputText txtPrefixManager)
  {
    this.txtPrefixManager = txtPrefixManager;
  }

  public RichInputText getTxtPrefixManager()
  {
    return this.txtPrefixManager;
  }

  public void setPrefixPop(RichCommandButton prefixPop)
  {
    this.prefixPop = prefixPop;
  }

  public RichCommandButton getPrefixPop()
  {
    return this.prefixPop;
  }

  public String selectPrefix()
  {
    Object key = this.prefixTbl.getSelectedRowData();
    JUCtrlValueBinding r = (JUCtrlValueBinding)key;
    if (r == null)
    {
      GlobalCC.INFORMATIONREPORTING("No record Selected");
      return null;
    }
    this.session.setAttribute("mptpCode", r.getAttribute("mptpCode"));
    this.session.setAttribute("mptCode", r.getAttribute("mptCode"));
    this.txtPrefixManager.setValue(r.getAttribute("prefix"));
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtPrefixManager);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:prefixPOP').hide(hints);");
    return null;
  }

  public String selectPrefix2()
  {
    Object key = this.prefixTbl2.getSelectedRowData();
    JUCtrlValueBinding r = (JUCtrlValueBinding)key;
    if (r == null)
    {
      GlobalCC.INFORMATIONREPORTING("No record Selected");
      return null;
    }
    this.txtTelPayPrefix.setValue(r.getAttribute("prefix"));
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtTelPayPrefix);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:prefixPOP2').hide(hints);");
    return null;
  }

  public void setPrefixTbl(RichTable prefixTbl)
  {
    this.prefixTbl = prefixTbl;
  }

  public RichTable getPrefixTbl()
  {
    return this.prefixTbl;
  }

  public void selectPrefixFirst(FacesContext facesContext, UIComponent uIComponent, Object object)
  {
    if (this.txtPrefixManager.getValue() == null)
    {
      GlobalCC.errorValueNotEntered("Select Prefix First");
      return;
    }
  }

  public void selectPrefixFirst2(FacesContext facesContext, UIComponent uIComponent, Object object)
  {
    if (this.txtTelPayPrefix.getValue() == null)
    {
      GlobalCC.errorValueNotEntered("Select Prefix First");
      return;
    }
  }

  public void setPanelBinding(RichPanelFormLayout panelBinding)
  {
    this.panelBinding = panelBinding;
  }

  public RichPanelFormLayout getPanelBinding()
  {
    return this.panelBinding;
  }

  public void selectAnniversary(ActionEvent actionEvent) {}

  public void setTxtCreditAllowed(RichSelectOneChoice txtCreditAllowed)
  {
    this.txtCreditAllowed = txtCreditAllowed;
  }

  public RichSelectOneChoice getTxtCreditAllowed()
  {
    return this.txtCreditAllowed;
  }

  public void selectCredit(ValueChangeEvent valueChangeEvent)
  {
    if (valueChangeEvent.getOldValue() != valueChangeEvent.getNewValue()) {
      if (this.txtCreditAllowed.getValue() != null)
      {
        if (this.txtCreditAllowed.getValue().equals("Y")) {
          this.txtCreditLimit.setVisible(true);
        } else {
          this.txtCreditLimit.setVisible(false);
        }
      }
      else {
        this.txtCreditLimit.setVisible(false);
      }
    }
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtCreditLimit);
  }

  public void setTxtCreditLimit(RichInputNumberSpinbox txtCreditLimit)
  {
    this.txtCreditLimit = txtCreditLimit;
  }

  public RichInputNumberSpinbox getTxtCreditLimit()
  {
    return this.txtCreditLimit;
  }

  public void setTxtNationality(RichInputText txtNationality)
  {
    this.txtNationality = txtNationality;
  }

  public RichInputText getTxtNationality()
  {
    return this.txtNationality;
  }

  public void setTxtSurburbs(RichInputText txtSurburbs)
  {
    this.txtSurburbs = txtSurburbs;
  }

  public RichInputText getTxtSurburbs()
  {
    return this.txtSurburbs;
  }

  public String actionSelectLocation()
  {
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:locationPop').show(hints);");
    return null;
  }

  public void setTxtSurburbsLbl(RichPanelLabelAndMessage txtSurburbsLbl)
  {
    this.txtSurburbsLbl = txtSurburbsLbl;
  }

  public RichPanelLabelAndMessage getTxtSurburbsLbl()
  {
    return this.txtSurburbsLbl;
  }

  public void setLocationTbl(RichTable locationTbl)
  {
    this.locationTbl = locationTbl;
  }

  public RichTable getLocationTbl()
  {
    return this.locationTbl;
  }

  public String selectLocationDtls()
  {
    Object key = this.locationTbl.getSelectedRowData();
    JUCtrlValueBinding r = (JUCtrlValueBinding)key;
    if (r == null)
    {
      GlobalCC.INFORMATIONREPORTING("No Record Selected");
      return null;
    }
    this.session.setAttribute("locCode", r.getAttribute("locCode"));
    this.txtSurburbs.setValue(r.getAttribute("locName"));
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtSurburbs);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:locationPop').hide(hints);");
    return null;
  }

  public void validatePin(FacesContext facesContext, UIComponent uIComponent, Object object)
  {
    if (object != null)
    {
      String name = object.toString();
      String expression = "[A-Za-z]+[A-Za-z0-9.-]+[A-Za-z]{1,9,1}";
      String inputStr = name;
      Pattern pattern = Pattern.compile(expression);
      Matcher matcher = pattern.matcher(inputStr);
      String msg = "Email is not in Proper Format";
      if (!matcher.matches()) {
        throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR, msg, null));
      }
    }
  }

  public void selectPin(FacesContext facesContext, UIComponent uIComponent, Object object)
  {
    System.out.print("val 5345345534534");
    String name = object.toString();
    String expression = "[A-Za-z]+[A-Za-z0-9.-]+[A-Za-z]{1,9,1}";
    String inputStr = name;
    Pattern pattern = Pattern.compile(expression);
    Matcher matcher = pattern.matcher(inputStr);
    String msg = "Email is not in Proper Format";
    if (!matcher.matches())
    {
      System.out.print("val 5345345553534535354");
      GlobalCC.INFORMATIONREPORTING("Format not ok");
      return;
    }
    System.out.print("val 5345345534535354");
  }

  public void setTxtSector(RichInputText txtSector)
  {
    this.txtSector = txtSector;
  }

  public RichInputText getTxtSector()
  {
    return this.txtSector;
  }

  public String getAutoAuthirize()
  {
    DBConnector myConn = new DBConnector();
    OracleConnection conn = myConn.getDatabaseConnection();
    String delink = "NONE";
    CallableStatement cst = null;
    try
    {
      cst = conn.prepareCall("begin ? := TQC_PARAMETERS_PKG.GET_PARAM_VARCHAR(?); end;");
      cst.registerOutParameter(1, 12);
      cst.setString(2, "AUTHORISE_CLIENT_AUTO");
      cst.execute();
      delink = cst.getString(1);
      if (delink.equals("Y")) {
        this.txtStatus.setValue("A");
      } else {
        this.txtStatus.setValue("I");
      }
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtStatus);
    }
    catch (SQLException e) {}finally
    {
      DbUtils.closeQuietly(conn, cst, (ResultSet)null);
    }
    return delink;
  }

  public void setTxtSmsPrefix(RichInputText txtSmsPrefix)
  {
    this.txtSmsPrefix = txtSmsPrefix;
  }

  public RichInputText getTxtSmsPrefix()
  {
    return this.txtSmsPrefix;
  }

  public void setTxtBouncedCheque(RichSelectOneChoice txtBouncedCheque)
  {
    this.txtBouncedCheque = txtBouncedCheque;
  }

  public RichSelectOneChoice getTxtBouncedCheque()
  {
    return this.txtBouncedCheque;
  }

  public void enterClientId(ValueChangeEvent valueChangeEvent)
  {
    if ((valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) && (valueChangeEvent.getNewValue().toString() != null)) {
      this.session.setAttribute("idRegNumber", this.txtIdRegNum.getValue());
    }
  }

  public void enterCMId(ValueChangeEvent valueChangeEvent)
  {
    if ((valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) && (valueChangeEvent.getNewValue().toString() != null) && (this.session.getAttribute("CHANNEL_MANAGER") != null) && (this.session.getAttribute("CHANNEL_MANAGER").equals("Y")))
    {
      Map clntDtls = new HashMap();
      ChannelManager cm = new ChannelManager();
      clntDtls = cm.getCustomerInfo(valueChangeEvent.getNewValue().toString());
      if (clntDtls.size() > 0)
      {
        try
        {
          this.legacyShtDesc.setValue(clntDtls.get("customerId"));
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
        try
        {
          this.txtSurname.setValue(clntDtls.get("firstname"));
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
        try
        {
          this.txtOtherNames.setValue(clntDtls.get("otherNames"));
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
        try
        {
          this.txtPostalAddress.setValue(clntDtls.get("customerAddress"));
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
        try
        {
          this.txtIdRegNum.setValue(clntDtls.get("customerIdentifDoc"));
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
        try
        {
          this.txtEmail.setValue(clntDtls.get("emailAddress"));
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
        try
        {
          this.txtPhone1.setValue(clntDtls.get("offphone"));
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
        try
        {
          this.txtClientCellNos.setValue(clntDtls.get("phoneNumber"));
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
        try
        {
          this.txtPostalAddress.setValue(clntDtls.get("postalAdd"));
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
        try
        {
          this.txtGender.setValue(clntDtls.get("gender"));
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
        try
        {
          this.txtDOB.setValue(clntDtls.get("dateofbirth"));
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
        try
        {
          this.txtRegBranchCode.setValue(clntDtls.get("accountofficer"));
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
        try
        {
          this.txtMaritalStatus.setValue(clntDtls.get("maritalstatus"));
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
        try
        {
          this.txtCltOccupation.setValue(clntDtls.get("occupation"));
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
        try
        {
          this.txtClientTypes.setValue(clntDtls.get("localref"));
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
        if (this.legacyShtDesc != null) {
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.legacyShtDesc);
        }
        if (this.txtSurname != null) {
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtSurname);
        }
        if (this.txtOtherNames != null) {
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtOtherNames);
        }
        if (this.txtPostalAddress != null) {
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtPostalAddress);
        }
        if (this.txtIdRegNum != null) {
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtIdRegNum);
        }
        if (this.txtEmail != null) {
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtEmail);
        }
        if (this.txtPhone1 != null) {
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtPhone1);
        }
        if (this.txtClientCellNos != null) {
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtClientCellNos);
        }
        if (this.txtPostalAddress != null) {
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtPostalAddress);
        }
        if (this.txtGender != null) {
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtGender);
        }
        if (this.txtDOB != null) {
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtDOB);
        }
        if (this.txtRegBranchCode != null) {
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtRegBranchCode);
        }
        if (this.txtMaritalStatus != null) {
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtMaritalStatus);
        }
        if (this.txtCltOccupation != null) {
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtCltOccupation);
        }
        if (this.txtClientTypes != null) {
          AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtClientTypes);
        }
      }
    }
  }

  public void clientVaraibleInitialization(Connection conn)
  {
    try
    {
      HttpSession session = (HttpSession)FacesContext.getCurrentInstance().getExternalContext().getSession(false);
      String globalUserVar = "begin pkg_global_vars.set_pvar(?,?); end;";
      OracleCallableStatement callStmt = (OracleCallableStatement)conn.prepareCall("begin pkg_global_vars.set_pvar(?,?); end;");
      callStmt.setString(1, "pkg_global_vars.pvg_username");
      callStmt.setString(2, (String)session.getAttribute("Username"));
      callStmt.execute();
      callStmt = (OracleCallableStatement)conn.prepareCall(globalUserVar);
      callStmt.setString(1, "Pkg_Global_Vars.Pvg_ClientCode");
      callStmt.setString(2, (String)session.getAttribute("ClientCode"));
      callStmt.execute();
    }
    catch (Exception e)
    {
      e.printStackTrace();
      GlobalCC.EXCEPTIONREPORTING(e);
    }
  }

  public void setTxtMaritalStatus(RichSelectOneChoice txtMaritalStatus)
  {
    this.txtMaritalStatus = txtMaritalStatus;
  }

  public RichSelectOneChoice getTxtMaritalStatus()
  {
    return this.txtMaritalStatus;
  }

  public void setTxtModeOfComm(RichSelectOneChoice txtModeOfComm)
  {
    this.txtModeOfComm = txtModeOfComm;
  }

  public RichSelectOneChoice getTxtModeOfComm()
  {
    return this.txtModeOfComm;
  }

  public void setTxtPayroll(RichInputText txtPayroll)
  {
    this.txtPayroll = txtPayroll;
  }

  public RichInputText getTxtPayroll()
  {
    return this.txtPayroll;
  }

  public void setTxtMinSalary(RichInputNumberSpinbox txtMinSalary)
  {
    this.txtMinSalary = txtMinSalary;
  }

  public RichInputNumberSpinbox getTxtMinSalary()
  {
    return this.txtMinSalary;
  }

  public void setTxtMaxSalary(RichInputNumberSpinbox txtMaxSalary)
  {
    this.txtMaxSalary = txtMaxSalary;
  }

  public void setTxtType(RichSelectOneChoice txtType)
  {
    this.txtType = txtType;
  }

  public RichSelectOneChoice getTxtType()
  {
    return this.txtType;
  }

  public void setTxtBussinessPerson(RichInputText txtBussinessPerson)
  {
    this.txtBussinessPerson = txtBussinessPerson;
  }

  public RichInputText getTxtBussinessPerson()
  {
    return this.txtBussinessPerson;
  }

  public void setBussinesPersonTbl(RichTable bussinesPersonTbl)
  {
    this.bussinesPersonTbl = bussinesPersonTbl;
  }

  public RichTable getBussinesPersonTbl()
  {
    return this.bussinesPersonTbl;
  }

  public String selectBussinessPerson()
  {
    Object key = this.bussinesPersonTbl.getSelectedRowData();
    JUCtrlValueBinding r = (JUCtrlValueBinding)key;
    if (r == null)
    {
      GlobalCC.INFORMATIONREPORTING("No Record Selected");
      return null;
    }
    System.out.println("This is bpnCode" + r.getAttribute("bpnCode"));
    this.session.setAttribute("bpnCodeVal", r.getAttribute("bpnCode"));
    this.txtBussinessPerson.setValue(r.getAttribute("bpnName"));
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtBussinessPerson);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:BussinessPop').hide(hints);");
    return null;
  }

  public String selectBussinessPersonPop()
  {
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:BussinessPop').show(hints);");
    return null;
  }

  public void setOccupationTbl(RichTable occupationTbl)
  {
    this.occupationTbl = occupationTbl;
  }

  public RichTable getOccupationTbl()
  {
    return this.occupationTbl;
  }

  public String selectOccupation()
  {
    Object key = this.occupationTbl.getSelectedRowData();
    JUCtrlValueBinding r = (JUCtrlValueBinding)key;
    if (r == null)
    {
      GlobalCC.INFORMATIONREPORTING("No Record selected");
      return null;
    }
    this.txtCltOccupation.setValue(r.getAttribute("occName"));
    this.session.setAttribute("occCode", r.getAttribute("occCode"));
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtCltOccupation);
    return null;
  }

  public String selectOccupationDetails()
  {
    Object key = this.occupationTbl.getSelectedRowData();
    JUCtrlValueBinding r = (JUCtrlValueBinding)key;
    if (r == null)
    {
      GlobalCC.INFORMATIONREPORTING("No Record selected");
      return null;
    }
    this.txtCltOccupation.setValue(r.getAttribute("occName"));
    this.session.setAttribute("occCode", r.getAttribute("occCode"));
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.txtCltOccupation);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:occupationPop').hide(hints);");
    return null;
  }

  public void setConfirmPin(RichDialog confirmPin)
  {
    this.confirmPin = confirmPin;
  }

  public RichInputNumberSpinbox getTxtMaxSalary()
  {
    return this.txtMaxSalary;
  }

  public RichDialog getConfirmPin()
  {
    return this.confirmPin;
  }

  public void confirmPinContinue(DialogEvent dialogEvent)
  {
    this.session.setAttribute("pinStatus", (Object)null);
    if (dialogEvent.getOutcome().equals(DialogEvent.Outcome.no))
    {
      this.session.setAttribute("pinStatus", "NO");
    }
    else if (dialogEvent.getOutcome().equals(DialogEvent.Outcome.yes))
    {
      this.session.setAttribute("pinStatus", "YES");
      checkIfSSuchRecorDExist();
    }
  }

  public void setTxtDlIssueDate(RichInputDate txtDlIssueDate)
  {
    this.txtDlIssueDate = txtDlIssueDate;
  }

  public RichInputDate getTxtDlIssueDate()
  {
    return this.txtDlIssueDate;
  }

  public void setTxtWorkPermit(RichInputText txtWorkPermit)
  {
    this.txtWorkPermit = txtWorkPermit;
  }

  public RichInputText getTxtWorkPermit()
  {
    return this.txtWorkPermit;
  }

  public boolean isForegn()
  {
    String defaultCountry = "NONE";
    defaultCountry = (String)this.session.getAttribute("COUNTRY_NAME");
    if (defaultCountry.equalsIgnoreCase((String)this.txtCountryName.getValue())) {
      return false;
    }
    return true;
  }

  public void setUpFile(RichInputFile upFile)
  {
    this.upFile = upFile;
  }

  public RichInputFile getUpFile()
  {
    return this.upFile;
  }

  public void setDocTbl(RichTable docTbl)
  {
    this.docTbl = docTbl;
  }

  public RichTable getDocTbl()
  {
    return this.docTbl;
  }

  public String launchDebtor()
  {
    ADFUtils.findIterator("fetchClientAccountsIterator").executeQuery();
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.debtor);
    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:conDebtor').show(hints);");
    return null;
  }

  public void setDebtor(RichTable debtor)
  {
    this.debtor = debtor;
  }

  public RichTable getDebtor()
  {
    return this.debtor;
  }

  public String debtorSelected()
  {
    Object key2 = this.debtor.getSelectedRowData();
    JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
    if (nodeBinding != null)
    {
      this.conSect.setValue(nodeBinding.getAttribute("name"));
      this.conSect.setLabel(nodeBinding.getAttribute("code").toString());
      AdfFacesContext.getCurrentInstance().addPartialTarget(this.conSect);
      ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
      erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:conDebtor').hide(hints);");
    }
    return null;
  }

  public void setPrefixTbl2(RichTable prefixTbl2)
  {
    this.prefixTbl2 = prefixTbl2;
  }

  public RichTable getPrefixTbl2()
  {
    return this.prefixTbl2;
  }

  public void setTxtTelPayPrefix(RichInputText txtTelPayPrefix)
  {
    this.txtTelPayPrefix = txtTelPayPrefix;
  }

  public RichInputText getTxtTelPayPrefix()
  {
    return this.txtTelPayPrefix;
  }

  public void setTxtPayTel(RichInputText txtPayTel)
  {
    this.txtPayTel = txtPayTel;
  }

  public RichInputText getTxtPayTel()
  {
    return this.txtPayTel;
  }

  public void uploadDoc(ValueChangeEvent valueChangeEvent)
  {
    if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue())
    {
      UploadedFile _file;
      this.uploadedFile = (_file = (UploadedFile)valueChangeEvent.getNewValue());
      this.filename = _file.getFilename();
      this.filesize = _file.getLength();
      this.filetype = _file.getContentType();
      try
      {
        CSVtoADFTableProcessor CSVManip = new CSVtoADFTableProcessor();
        FileNameMap fileNameMap = URLConnection.getFileNameMap();
        String mimeType = fileNameMap.getContentTypeFor(_file.getFilename());
        CSVManip.uploadClientDocuments(this.uploadedFile.getInputStream(), _file.getFilename(), mimeType);
      }
      catch (Exception e)
      {
        GlobalCC.EXCEPTIONREPORTING(e);
      }
    }
  }

  public String generateDoc()
  {
    Object key2 = this.docTbl.getSelectedRowData();
    JUCtrlValueBinding r = (JUCtrlValueBinding)key2;
    if (r == null)
    {
      GlobalCC.errorValueNotEntered("No Record Selected");
      return null;
    }
    String mimeType = (String)r.getAttribute("mimeType");
    String filename = (String)r.getAttribute("actualName");
    String id = (String)r.getAttribute("id");
    try
    {
      Session sessions = new EcmHelper().getCmisSession();
      Document document = (Document)sessions.getObject(id);
      InputStream inputStream = document.getContentStream().getStream();
      String file = "/Reports/" + filename;
      FacesContext context = FacesContext.getCurrentInstance();
      ServletContext sc = (ServletContext)context.getExternalContext().getContext();
      file = sc.getRealPath(file);
      File toPrint = new File(file);
      FileOutputStream out = new FileOutputStream(toPrint);
      int read = 0;
      byte[] bytes = new byte[1024];
      while ((read = inputStream.read(bytes)) != -1) {
        out.write(bytes, 0, read);
      }
      inputStream.close();
      out.flush();
      out.close();
      if (toPrint != null)
      {
        HttpServletRequest request = (HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();
        String scheme = request.getScheme();
        String serverName = request.getServerName();
        int portNumber = request.getServerPort();
        String contextPath = request.getContextPath();
        String url = scheme + "://" + serverName + ":" + portNumber + contextPath + "/viewer.html";
        String pdf = "?file=" + scheme + "://" + serverName + ":" + portNumber + contextPath + "/Reports/" + filename;
        this.session.setAttribute("toPrint", url + pdf);
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService(FacesContext.getCurrentInstance().getRenderKit(), ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:p201').show(hints);");
      }
    }
    catch (FileNotFoundException e)
    {
      e.printStackTrace();
    }
    catch (IOException e)
    {
      e.printStackTrace();
    }
    return null;
  }

  public String refreshDocs()
  {
    ADFUtils.findIterator("enquireDocsIterator").executeQuery();
    AdfFacesContext.getCurrentInstance().addPartialTarget(this.docTbl);
    return null;
  }

  public void setUploadedFile(UploadedFile uploadedFile)
  {
    this.uploadedFile = uploadedFile;
    System.out.println(this.uploadedFile);
    this.filename = uploadedFile.getFilename();
    System.out.println(this.filename);
    this.filesize = uploadedFile.getLength();
    System.out.println(this.filesize);
    this.filetype = uploadedFile.getContentType();
    System.out.println(this.filetype);
  }

  public UploadedFile getUploadedFile()
  {
    return this.uploadedFile;
  }

    /**
     * Controls which tabs get shown necessary to perform the task at hand.
     */
    public enum mode {
        /**
         * Shows only the tabs with the relevant information to allow for editing.
         */
        EDIT_MODE,

        /**
         * Shows only the bare minimum tabs to allow a new client to be created
         */
        NEW_MODE,

        /**
         * Shows the Search Client tab as the default tab.
         */
        DEFAULT_MODE;
    }
}
