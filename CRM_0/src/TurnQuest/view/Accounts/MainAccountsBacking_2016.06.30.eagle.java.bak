/*
 * Decompiled with CFR 0_115.
 * 
 * Could not load the following classes:
 *  TurnQuest.view.Accounts.AgDirector
 *  TurnQuest.view.Accounts.AgencyReferee
 *  TurnQuest.view.Accounts.AgentRegistration
 *  TurnQuest.view.Accounts.WebUser
 *  TurnQuest.view.Base.ADFUtils
 *  TurnQuest.view.Base.GlobalCC
 *  TurnQuest.view.Base.Rendering
 *  TurnQuest.view.Base.Util
 *  TurnQuest.view.Connect.Authorization
 *  TurnQuest.view.Connect.DBConnector
 *  TurnQuest.view.commons.UtilDAO
 *  TurnQuest.view.models.AgencySystem
 *  javax.faces.application.Application
 *  javax.faces.component.UIComponent
 *  javax.faces.component.UISelectItems
 *  javax.faces.component.html.HtmlPanelGrid
 *  javax.faces.context.ExternalContext
 *  javax.faces.context.FacesContext
 *  javax.faces.event.ActionEvent
 *  javax.faces.event.ValueChangeEvent
 *  javax.faces.model.SelectItem
 *  javax.faces.render.RenderKit
 *  javax.servlet.http.HttpSession
 *  oracle.adf.model.binding.DCIteratorBinding
 *  oracle.adf.view.rich.component.rich.RichDialog
 *  oracle.adf.view.rich.component.rich.RichPopup
 *  oracle.adf.view.rich.component.rich.data.RichTable
 *  oracle.adf.view.rich.component.rich.data.RichTree
 *  oracle.adf.view.rich.component.rich.input.RichInputDate
 *  oracle.adf.view.rich.component.rich.input.RichInputNumberSpinbox
 *  oracle.adf.view.rich.component.rich.input.RichInputText
 *  oracle.adf.view.rich.component.rich.input.RichSelectBooleanCheckbox
 *  oracle.adf.view.rich.component.rich.input.RichSelectBooleanRadio
 *  oracle.adf.view.rich.component.rich.input.RichSelectManyShuttle
 *  oracle.adf.view.rich.component.rich.input.RichSelectOneChoice
 *  oracle.adf.view.rich.component.rich.input.RichSelectOneRadio
 *  oracle.adf.view.rich.component.rich.layout.RichPanelBox
 *  oracle.adf.view.rich.component.rich.layout.RichPanelFormLayout
 *  oracle.adf.view.rich.component.rich.layout.RichPanelGroupLayout
 *  oracle.adf.view.rich.component.rich.layout.RichPanelLabelAndMessage
 *  oracle.adf.view.rich.component.rich.layout.RichPanelTabbed
 *  oracle.adf.view.rich.component.rich.layout.RichShowDetailItem
 *  oracle.adf.view.rich.component.rich.nav.RichCommandButton
 *  oracle.adf.view.rich.component.rich.output.RichOutputLabel
 *  oracle.adf.view.rich.component.rich.output.RichOutputText
 *  oracle.adf.view.rich.component.rich.output.RichPanelCollection
 *  oracle.adf.view.rich.context.AdfFacesContext
 *  oracle.adf.view.rich.event.DialogEvent
 *  oracle.adf.view.rich.event.DialogEvent$Outcome
 *  oracle.binding.BindingContainer
 *  oracle.jbo.Key
 *  oracle.jbo.Row
 *  oracle.jbo.uicli.binding.JUCtrlHierNodeBinding
 *  oracle.jbo.uicli.binding.JUCtrlValueBinding
 *  oracle.jdbc.OracleCallableStatement
 *  oracle.jdbc.OracleConnection
 *  oracle.sql.ARRAY
 *  oracle.sql.ArrayDescriptor
 *  org.apache.myfaces.trinidad.event.SelectionEvent
 *  org.apache.myfaces.trinidad.model.RowKeySet
 *  org.apache.myfaces.trinidad.render.ExtendedRenderKitService
 *  org.apache.myfaces.trinidad.util.Service
 */
package TurnQuest.view.Accounts;

import TurnQuest.view.Accounts.AgDirector;
import TurnQuest.view.Accounts.AgencyReferee;
import TurnQuest.view.Accounts.AgentRegistration;
import TurnQuest.view.Accounts.WebUser;
import TurnQuest.view.Base.ADFUtils;
import TurnQuest.view.Base.GlobalCC;
import TurnQuest.view.Base.Rendering;
import TurnQuest.view.Base.Util;
import TurnQuest.view.Connect.Authorization;
import TurnQuest.view.Connect.DBConnector;
import TurnQuest.view.commons.UtilDAO;
import TurnQuest.view.models.AgencySystem;
import java.io.PrintStream;
import java.math.BigDecimal;
import java.sql.Array;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import javax.faces.application.Application;
import javax.faces.component.UIComponent;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;
import javax.faces.render.RenderKit;
import javax.servlet.http.HttpSession;
import oracle.adf.model.binding.DCIteratorBinding;
import oracle.adf.view.rich.component.rich.RichDialog;
import oracle.adf.view.rich.component.rich.RichPopup;
import oracle.adf.view.rich.component.rich.data.RichTable;
import oracle.adf.view.rich.component.rich.data.RichTree;
import oracle.adf.view.rich.component.rich.input.RichInputDate;
import oracle.adf.view.rich.component.rich.input.RichInputNumberSpinbox;
import oracle.adf.view.rich.component.rich.input.RichInputText;
import oracle.adf.view.rich.component.rich.input.RichSelectBooleanCheckbox;
import oracle.adf.view.rich.component.rich.input.RichSelectBooleanRadio;
import oracle.adf.view.rich.component.rich.input.RichSelectManyShuttle;
import oracle.adf.view.rich.component.rich.input.RichSelectOneChoice;
import oracle.adf.view.rich.component.rich.input.RichSelectOneRadio;
import oracle.adf.view.rich.component.rich.layout.RichPanelBox;
import oracle.adf.view.rich.component.rich.layout.RichPanelFormLayout;
import oracle.adf.view.rich.component.rich.layout.RichPanelGroupLayout;
import oracle.adf.view.rich.component.rich.layout.RichPanelLabelAndMessage;
import oracle.adf.view.rich.component.rich.layout.RichPanelTabbed;
import oracle.adf.view.rich.component.rich.layout.RichShowDetailItem;
import oracle.adf.view.rich.component.rich.nav.RichCommandButton;
import oracle.adf.view.rich.component.rich.output.RichOutputLabel;
import oracle.adf.view.rich.component.rich.output.RichOutputText;
import oracle.adf.view.rich.component.rich.output.RichPanelCollection;
import oracle.adf.view.rich.context.AdfFacesContext;
import oracle.adf.view.rich.event.DialogEvent;
import oracle.binding.BindingContainer;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.uicli.binding.JUCtrlHierNodeBinding;
import oracle.jbo.uicli.binding.JUCtrlValueBinding;
import oracle.jdbc.OracleCallableStatement;
import oracle.jdbc.OracleConnection;
import oracle.sql.ARRAY;
import oracle.sql.ArrayDescriptor;
import org.apache.myfaces.trinidad.event.SelectionEvent;
import org.apache.myfaces.trinidad.model.RowKeySet;
import org.apache.myfaces.trinidad.render.ExtendedRenderKitService;
import org.apache.myfaces.trinidad.util.Service;

public class MainAccountsBacking {
    public static final String SETUPS_AGENCIES_PRC = "begin TQC_SETUPS_PKG.agencies_prc(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
    HttpSession session = (HttpSession)FacesContext.getCurrentInstance().getExternalContext().getSession(false);
    private List<SelectItem> accountsTypeElements = new ArrayList<SelectItem>();
    private String accountsTypeSelectedValue;
    private BindingContainer bindings;
    private RichTree treeAgencies;
    private RichPanelBox panelAgencyDetails;
    private RichInputText txtAgencyCode;
    private RichInputText txtAccountTypeCode;
    private RichInputText txtShortDesc;
    private RichInputText txtAgencyName;
    private RichInputText txtAgencyPhysicalAddress;
    private RichInputText txtAgencyPostalAddress;
    private RichInputText txtAgencyCountryCode;
    private RichInputText txtAgencyCountryName;
    private RichInputText txtAgencyTownCode;
    private RichInputText txtAgencyTownName;
    private RichInputText txtAgencyEmail;
    private RichInputText txtAgencyWebAddress;
    private RichInputText txtAgencyPostalCode;
    private RichInputText txtContactPerson;
    private RichInputText txtContactTitle;
    private RichInputText txtAgencyPhone1;
    private RichInputText txtAgencyPhone2;
    private RichInputText txtAgencyFax;
    private RichInputText txtAgencyAccountNumber;
    private RichInputText txtAgencyPIN;
    private RichInputNumberSpinbox txtAgencyCommission;
    private RichInputNumberSpinbox txtCommLevyRate;
    private RichSelectOneChoice txtCreditAllowed;
    private RichInputNumberSpinbox txtAgencyWthTx;
    private RichSelectOneChoice txtAgencyPrintdebitNote;
    private RichSelectOneChoice txtAgencyStatus;
    private RichInputDate txtDateCreated;
    private RichInputText txtCreatedBy;
    private RichInputText txtRegistartionCode;
    private RichInputText txtCommReserveRate;
    private RichInputText txtAnnualBudget;
    private RichInputDate txtStaEffectiveDate;
    private RichInputText txtCreditPeriod;
    private RichInputDate txtCommStatEffectiveDate;
    private RichInputDate txtCommStatusDate;
    private RichSelectOneChoice txtCommAllowed;
    private RichSelectOneChoice txtAgencyChecked;
    private RichInputText txtAgencyCheckedBy;
    private RichInputDate txtAgencyCheckDate;
    private RichSelectOneChoice txtCompCommArrears;
    private RichSelectOneChoice txtAgencyReinsurer;
    private RichInputText txtStatusDesc;
    private RichInputText txtAgencyIDNum;
    private RichInputText txtAgencyContractCode;
    private RichInputText txtAgencyAgentCode;
    private RichInputText txtAgencySms;
    private RichInputText txtAgencyHoldingCompanyCode;
    private RichInputText txtAgencySectorCode;
    private RichInputText txtAgencyClassCode;
    private RichInputDate txtAgencyExpiriyDate;
    private RichInputText txtAgencyLicenseNum;
    private RichSelectOneChoice txtAgencyRunoff;
    private RichSelectOneChoice txtAgencyLicensed;
    private RichSelectOneChoice txtCreditRting;
    private RichInputText txtLicenseGracePeriod;
    private RichInputText txtOldAccountNum;
    private RichInputText txtAgencyStatusRemarks;
    private RichCommandButton btnCreateUpdateAgency;
    private RichCommandButton btnCancelAgency;
    private RichInputText txtAgencyBranchCode;
    private RichInputText txtAgencySBUCode;
    private RichTable tblAgencyCountry;
    private RichTable tblAgencyTown;
    private RichTable tblAgencyHoldingCompany;
    private RichInputText txtAgencyHoldingCompanyName;
    private RichTable tblAgencyClasses;
    private RichTable tblAgencySector;
    private RichInputText txtAgencySectorName;
    private RichInputText txtAgencyClassName;
    private RichTable tblAgencyBranch;
    private RichTable tblAgencySBU;
    private RichInputText txtAgencyBranchName;
    private RichInputText txtAgencySBUName;
    private RichTable registrationTable;
    private RichCommandButton saveRegistrationDetails;
    private RichInputText regkey;
    private RichInputDate regyear;
    private RichInputText regno;
    private RichInputDate regWef;
    private RichInputDate regWet;
    private RichSelectOneChoice regAccepted;
    private RichTable agentDirectorsTable;
    private RichInputText agencyDirectorId;
    private RichInputDate directYr;
    private RichInputText directname;
    private RichInputText directQualifications;
    private RichInputNumberSpinbox directshare;
    private RichCommandButton saveAgDirectorButton;
    private RichTable agencyRefereeTable;
    private RichCommandButton saveRefereeAgButton;
    private RichInputText refereeId;
    private RichInputText refereeName;
    private RichInputText refereephAddress;
    private RichInputText refereePostAddress;
    private RichInputText refereeIDNo;
    private RichInputText refereeEmail;
    private RichInputText refereeTelNo;
    private List<SelectItem> selectValues = new ArrayList<SelectItem>();
    private List<String> displayValue = new ArrayList<String>();
    private RichSelectManyShuttle systemShuttle;
    private UISelectItems systemSelectItem;
    private RichTable webUsersTable;
    private RichCommandButton saveWebUsersButton;
    private RichInputText webUserId;
    private RichInputText webusername;
    private RichInputText webfullNames;
    private RichInputText webPassword;
    private RichInputText webEmail;
    private RichInputText webPersonalRank;
    private RichSelectOneRadio webAllowLogin;
    private RichSelectOneChoice webUserStatus;
    private RichSelectOneRadio webReset;
    private RichSelectOneChoice accountTypeSelector;
    private RichPanelBox panelAccountSystems;
    private RichCommandButton btnCreateUpdateCurrentAgency;
    private RichPanelBox panelDetailSystems;
    private RichInputText txtSelectedUserSystemCode;
    private RichCommandButton btnAddAccountSystem;
    private RichCommandButton btnRemoveAccountSystem;
    private RichTree treeUnassignedSystems;
    private RichTree treeAssignedSystems;
    private RichTable tblAgencyInfo;
    private RichOutputText textToShow;
    private RichInputText hiddenAccountCode;
    private RichTable tblAgencyAccounts;
    private RichInputText txtAccountCode;
    private RichInputText txtAccShortDesc;
    private RichInputText txtAccName;
    private RichInputText txtAccAgencyCode;
    private RichInputText txtAccCreatedBy;
    private RichInputDate txtAccDateCreated;
    private RichSelectOneChoice txtAgencyAccStatus;
    private RichInputText txtAccRemarks;
    private RichInputDate txtAccWef;
    private RichInputDate txtAccWet;
    private RichCommandButton btnSaveUpdateAgencyAccount;
    private RichTable tblGlAccounts;
    private RichInputText txtDivCode;
    private RichTable divisionLov;
    private RichPanelTabbed mainPanelTab;
    private RichPanelBox pbMainPanelDetail;
    private RichTable tblAccountTypesPop;
    private RichInputText txtMainAccountType;
    private RichInputText txtMainAccountTypeCode;
    private RichInputText txtDivName;
    private RichTable tblAssignedAgencySystems;
    private RichPanelBox panelAgencySystem;
    private RichInputText txtAsysSysCode;
    private RichInputText txtAsysAgnCode;
    private RichInputDate txtAsysWef;
    private RichInputDate txtAsysWet;
    private RichInputText txtAsysCode;
    private RichInputText txtAsysOsdCode;
    private RichInputText txtOsdName;
    private RichCommandButton btnSaveUpdateAgencySystem;
    private RichInputText txtAsysComments;
    private RichTable tblOrgSubDivisions;
    private RichSelectBooleanRadio genAcSelectYes;
    private RichSelectBooleanRadio genAccNoSelect;
    private RichPanelGroupLayout shortDescYesOrNoLayout;
    private RichTable tbListAgencies;
    private RichInputText txtStateCode;
    private RichInputText txtStateName;
    private RichTable tblStates;
    private RichTable tblTownPop;
    private RichCommandButton actionShowStates;
    private RichTable tbTownListing;
    private RichInputText txtAStateName;
    private RichInputText txtAStateCode;
    private RichCommandButton btnDeleteAgency;
    private RichOutputLabel genAccLabel;
    private RichPopup agentAccountPop;
    private RichTable tblAdminRegions;
    private RichPanelLabelAndMessage pnmsgAdminRegionName;
    private RichPanelLabelAndMessage pnmsgTownName;
    private RichPanelFormLayout frmLoadAdminTownDetails;
    private RichDialog dlgAdminRegionList;
    private RichInputText txtBankBranch;
    private RichInputText txtBankName;
    private RichInputText txtBankCode;
    private RichInputText txtBankBranchCode;
    private RichTable tblBanks;
    private RichTable tblBankBranches;
    private RichInputText txtAccountNo;
    private RichInputText txtPrefix;
    private RichTable tblAssignedClients;
    private RichTable tblUnAssignedClients;
    private RichSelectBooleanCheckbox chBoxUnAssigedClients;
    private RichSelectBooleanCheckbox chBoxAssigedClients;
    private RichTable tblPersonnel;
    private RichInputNumberSpinbox txtAsysOsdId;
    private RichTable tblAccountTypesPopEdit;
    private RichTable unAssignedServiceProviders;
    private RichSelectBooleanCheckbox chAssignServiceprovs;
    private RichTable selected;
    private RichTable asssignedServiceProviders;
    private RichSelectBooleanCheckbox cbBoxassignedServiceProviders;
    private RichTable agentTbl;
    private RichInputText txtAgent;
    private RichCommandButton txtAgntLov;
    private RichShowDetailItem subAgntDetailsTab;
    private RichTable agentsTbl;
    private RichInputText telNo;
    private RichPanelLabelAndMessage txtAgentsAccountsLabel;
    private RichInputText txtSaccoName;
    private RichInputText txtSacco;
    private RichTable txtSaccoTbl;
    private RichInputText txtMarketer;
    private RichTable marketerTbl;
    private RichInputText txtBranches;
    private RichTable txtSystems;
    private RichTable unitManagerTbl;
    private RichInputText txtUnitManager;
    private RichPanelBox pbPromManager;
    private RichSelectBooleanRadio txtPromote;
    private RichSelectOneRadio txtAgentChoices;
    private RichTable branchTbl;
    private RichInputText txtBranchName;
    private RichInputDate txtEffectiveDate;
    private RichCommandButton clbPromote;
    private RichCommandButton clbDemote;
    private RichSelectOneChoice txtOneChoice;
    private RichOutputLabel lblBranch;
    private RichCommandButton clbBranchDrop;
    private RichSelectOneChoice txtOneChoiceDem;
    private RichOutputLabel lblAgencyBranch;
    private RichCommandButton clbUnitManager;
    private RichCommandButton clbDemoteCmb;
    private RichCommandButton clbAuthDemotion;
    private RichOutputLabel txtTransactionType;
    private RichInputNumberSpinbox txtAgencyPrefix;
    private RichInputNumberSpinbox txtUnitPrefix;
    private RichInputNumberSpinbox txtAgencySeq;
    private RichOutputLabel lblEffectiveDate;
    private RichOutputLabel lblAgencyPrefix;
    private RichOutputLabel lblUnitPrefix;
    private RichOutputLabel lblAgencySeq;
    private RichOutputLabel precontractCode;
    private RichInputNumberSpinbox txtPrecontractCode;
    private RichInputNumberSpinbox txtCreditLimit;
    private RichInputText txtPhoneNumber;
    private RichInputText txtBranchUnits;
    private RichTable branchUnitsTbl;
    private RichSelectOneChoice txtLocalInt;
    private RichSelectOneChoice txtPrincipleDirector;
    private RichInputText txtIraRegNumber;
    private RichCommandButton txtAuthorised;
    private RichTable countryTbl;
    private RichInputText txtNationality;
    private RichInputText txtRatingOrg;
    private RichInputText txtRating;
    private RichTable orgRatingTbl;
    private RichTable ratingTbl;
    private RichSelectOneChoice txtAgencySelected;
    private RichSelectOneChoice txtIssueCert;
    private RichTable branchTblDtls;
    private RichInputText txtBranch;
    private RichTable countryTblDtls;
    private RichInputText txtCountry;
    private RichTable prefixTbl;
    private RichInputText txtPrefixVals;
    private RichTable clientTitleTbl;
    private RichTable bankTbl;
    private RichTable bankBranchTbl;
    private RichTable sectorTbl;
    private RichInputText txtSector;
    private RichInputText txtShtDesc;
    private RichInputText txtPhysicalAddress;
    private RichInputText txtPostalAddress;
    private RichCommandButton txtSelectClientTitle;
    private RichInputText txtClientTitle;
    private RichTable clientTitleTblDtls;
    private RichInputText txtName;
    private RichInputText txtEmail;
    private RichInputText txtFax;
    private RichInputText txtBankAccountNumber;
    private RichInputText txtZip;
    private RichInputText txtOffice;
    private RichInputText txtIdNumber;
    private RichInputText txtOldAccount;
    private RichInputDate txtWef;
    private RichInputDate txtWet;
    private RichTable townPopTbl;
    private RichCommandButton txtNextBtn;
    private RichInputText txtSectors;
    private RichInputText txtTown;
    private RichInputText txtSms;
    private HtmlPanelGrid gridClientSearchDetails;
    private RichPanelGroupLayout searchFormHolder;
    private RichPanelFormLayout SEARCHHOLDER;
    private RichInputText txtSearchName;
    private RichInputText txtSearchShortDesc;
    private RichInputText txtSearchPhysical;
    private RichInputText txtSearchPostal;
    private RichInputText txtSearchSector;
    private RichPanelLabelAndMessage resetSearchContainer;
    private RichInputText txtSrchSectorName;
    private RichCommandButton btnSectorLov;
    private RichPanelLabelAndMessage statusHolder;
    private RichSelectOneChoice txtSearchStatus;
    private RichInputDate clntDateCreatedFrom;
    private RichInputDate clntDateCreatedTo;
    private RichInputText pinNumber;
    private RichSelectBooleanRadio rbtnSearchAccountNo;
    private RichSelectBooleanRadio rbtnPartOfAnyName;
    private RichSelectBooleanRadio rbtnExactName;
    private RichSelectBooleanRadio rbtnStatus;
    private RichSelectBooleanRadio rbtnShortDesc;
    private RichSelectBooleanRadio rbtnShortDescLeg;
    private RichSelectBooleanRadio rbtnPhySicalAddr;
    private RichSelectBooleanRadio rbtnPostalAddr;
    private RichSelectBooleanRadio rbtnCustomerId;
    private RichSelectBooleanRadio rbtnOldNames;
    private RichSelectBooleanRadio txtPinNumber;
    private RichPanelCollection panelCollSearch;
    private RichSelectBooleanRadio rbtnSector;
    private RichSelectBooleanRadio rbtnDateCreated;
    private RichSelectBooleanRadio rdoDateCreatedFrom;
    private RichTable holdingCompaniesTbl;
    private RichInputText txtPrefixManager;
    private RichCommandButton prefixPop;
    private RichInputText txtSmsPrefix;
    private RichSelectOneChoice txtBouncedCheque;
    private RichSelectOneChoice txtModeOfComm;
    private RichInputText txtBussinessPersons;
    private RichTable bussinessPersonTbl;
    private RichInputText txtAgentType;
    private RichInputText txtAgentGroup;
    private RichTable agentTypeTbl;
    private RichTable accountGroupsTbl;
    private RichSelectOneChoice txtWithTax;
    private RichSelectOneChoice txtVatApp;
    private RichSelectOneChoice txtCommLevyApp;
    private RichTable unAssignedProductsTbl;
    private RichTable assignedProductsTbl;
    private RichSelectBooleanCheckbox chkAssignedProducts;
    private RichSelectBooleanCheckbox chkUnAssignedProducts;
    private RichInputText txtTelPay;
    private RichInputText txtTelPayPrefix;
    private RichTable prefixTbl2;
    private RichSelectOneChoice txtFrequencyofPayment;
    private RichSelectOneChoice txtModeofPayment;
    private List<SelectItem> paymentModes = new ArrayList<SelectItem>();
    private RichSelectOneChoice txtPmntDtlsValidated;
    private RichSelectOneChoice txtAgnIDNODocUsed;
    private RichSelectOneChoice txtAgnMaritalStatus;
    private RichSelectOneChoice txtAgnQualification;
    private RichInputDate txtAgnDOB;
    private RichInputDate txtAgnBenStartDate;
    private RichInputText txtAgencyRegionName;
    private RichTable tblRegion;
    private RichInputText txtAgencyRegionCode;
    private RichPopup branchUnitPopUp;

    public void setSession(HttpSession session) {
        this.session = session;
    }

    public HttpSession getSession() {
        return this.session;
    }

    public List<SelectItem> getAccountsTypeElements() {
        BindingContainer bindings;
        DCIteratorBinding iterator;
        if (this.accountsTypeElements.size() >= 0) {
            this.accountsTypeElements.clear();
        }
        int length = (iterator = (DCIteratorBinding)(bindings = this.getBindings()).get((Object)"fetchAllAccountTypesIterator")).getRangeSize() > 0 ? iterator.getRangeSize() : new Long(iterator.getEstimatedRowCount()).intValue();
        this.accountsTypeElements = new ArrayList<SelectItem>();
        SelectItem item = null;
        for (int i = 0; i < length; ++i) {
            Row row = iterator.getRowAtRangeIndex(i);
            if (row != null) {
                item = new SelectItem();
                item.setValue((Object)row.getAttribute("code").toString());
                item.setLabel(row.getAttribute("accountType").toString());
            }
            this.accountsTypeElements.add(item);
        }
        return this.accountsTypeElements;
    }

    public void setAccountsTypeSelectedValue(String accountsTypeSelectedValue) {
        this.accountsTypeSelectedValue = accountsTypeSelectedValue;
    }

    public String getAccountsTypeSelectedValue() {
        return this.accountsTypeSelectedValue;
    }

    public void setBindings(BindingContainer bindings) {
        this.bindings = bindings;
    }

    public BindingContainer getBindings() {
        if (this.bindings == null) {
            FacesContext fc = FacesContext.getCurrentInstance();
            this.bindings = (BindingContainer)fc.getApplication().evaluateExpressionGet(fc, "#{bindings}", (Class)BindingContainer.class);
        }
        return this.bindings;
    }

    public void setTreeAgencies(RichTree treeAgencies) {
        this.treeAgencies = treeAgencies;
    }

    public RichTree getTreeAgencies() {
        return this.treeAgencies;
    }

    public void setPanelAgencyDetails(RichPanelBox panelAgencyDetails) {
        this.panelAgencyDetails = panelAgencyDetails;
    }

    public RichPanelBox getPanelAgencyDetails() {
        return this.panelAgencyDetails;
    }

    public void setTxtAgencyCode(RichInputText txtAgencyCode) {
        this.txtAgencyCode = txtAgencyCode;
    }

    public RichInputText getTxtAgencyCode() {
        return this.txtAgencyCode;
    }

    public void setTxtAccountTypeCode(RichInputText txtAccountTypeCode) {
        this.txtAccountTypeCode = txtAccountTypeCode;
    }

    public RichInputText getTxtAccountTypeCode() {
        return this.txtAccountTypeCode;
    }

    public void setTxtShortDesc(RichInputText txtShortDesc) {
        this.txtShortDesc = txtShortDesc;
    }

    public RichInputText getTxtShortDesc() {
        return this.txtShortDesc;
    }

    public void setTxtAgencyName(RichInputText txtAgencyName) {
        this.txtAgencyName = txtAgencyName;
    }

    public RichInputText getTxtAgencyName() {
        return this.txtAgencyName;
    }

    public void setTxtAgencyPhysicalAddress(RichInputText txtAgencyPhysicalAddress) {
        this.txtAgencyPhysicalAddress = txtAgencyPhysicalAddress;
    }

    public RichInputText getTxtAgencyPhysicalAddress() {
        return this.txtAgencyPhysicalAddress;
    }

    public void setTxtAgencyPostalAddress(RichInputText txtAgencyPostalAddress) {
        this.txtAgencyPostalAddress = txtAgencyPostalAddress;
    }

    public RichInputText getTxtAgencyPostalAddress() {
        return this.txtAgencyPostalAddress;
    }

    public void setTxtAgencyCountryCode(RichInputText txtAgencyCountryCode) {
        this.txtAgencyCountryCode = txtAgencyCountryCode;
    }

    public RichInputText getTxtAgencyCountryCode() {
        return this.txtAgencyCountryCode;
    }

    public void setTxtAgencyCountryName(RichInputText txtAgencyCountryName) {
        this.txtAgencyCountryName = txtAgencyCountryName;
    }

    public RichInputText getTxtAgencyCountryName() {
        return this.txtAgencyCountryName;
    }

    public void setTxtAgencyTownCode(RichInputText txtAgencyTownCode) {
        this.txtAgencyTownCode = txtAgencyTownCode;
    }

    public RichInputText getTxtAgencyTownCode() {
        return this.txtAgencyTownCode;
    }

    public void setTxtAgencyTownName(RichInputText txtAgencyTownName) {
        this.txtAgencyTownName = txtAgencyTownName;
    }

    public RichInputText getTxtAgencyTownName() {
        return this.txtAgencyTownName;
    }

    public void setTxtAgencyEmail(RichInputText txtAgencyEmail) {
        this.txtAgencyEmail = txtAgencyEmail;
    }

    public RichInputText getTxtAgencyEmail() {
        return this.txtAgencyEmail;
    }

    public void setTxtAgencyWebAddress(RichInputText txtAgencyWebAddress) {
        this.txtAgencyWebAddress = txtAgencyWebAddress;
    }

    public RichInputText getTxtAgencyWebAddress() {
        return this.txtAgencyWebAddress;
    }

    public void setTxtAgencyPostalCode(RichInputText txtAgencyPostalCode) {
        this.txtAgencyPostalCode = txtAgencyPostalCode;
    }

    public RichInputText getTxtAgencyPostalCode() {
        return this.txtAgencyPostalCode;
    }

    public void setTxtContactPerson(RichInputText txtContactPerson) {
        this.txtContactPerson = txtContactPerson;
    }

    public RichInputText getTxtContactPerson() {
        return this.txtContactPerson;
    }

    public void setTxtContactTitle(RichInputText txtContactTitle) {
        this.txtContactTitle = txtContactTitle;
    }

    public RichInputText getTxtContactTitle() {
        return this.txtContactTitle;
    }

    public void setTxtAgencyPhone1(RichInputText txtAgencyPhone1) {
        this.txtAgencyPhone1 = txtAgencyPhone1;
    }

    public RichInputText getTxtAgencyPhone1() {
        return this.txtAgencyPhone1;
    }

    public void setTxtAgencyPhone2(RichInputText txtAgencyPhone2) {
        this.txtAgencyPhone2 = txtAgencyPhone2;
    }

    public RichInputText getTxtAgencyPhone2() {
        return this.txtAgencyPhone2;
    }

    public void setTxtAgencyFax(RichInputText txtAgencyFax) {
        this.txtAgencyFax = txtAgencyFax;
    }

    public RichInputText getTxtAgencyFax() {
        return this.txtAgencyFax;
    }

    public void setTxtAgencyAccountNumber(RichInputText txtAgencyAccountNumber) {
        this.txtAgencyAccountNumber = txtAgencyAccountNumber;
    }

    public RichInputText getTxtAgencyAccountNumber() {
        return this.txtAgencyAccountNumber;
    }

    public void setTxtAgencyPIN(RichInputText txtAgencyPIN) {
        this.txtAgencyPIN = txtAgencyPIN;
    }

    public RichInputText getTxtAgencyPIN() {
        return this.txtAgencyPIN;
    }

    public void setTxtAgencyCommission(RichInputNumberSpinbox txtAgencyCommission) {
        this.txtAgencyCommission = txtAgencyCommission;
    }

    public RichInputNumberSpinbox getTxtAgencyCommission() {
        return this.txtAgencyCommission;
    }

    public void setTxtCreditAllowed(RichSelectOneChoice txtCreditAllowed) {
        this.txtCreditAllowed = txtCreditAllowed;
    }

    public RichSelectOneChoice getTxtCreditAllowed() {
        return this.txtCreditAllowed;
    }

    public void setTxtAgencyWthTx(RichInputNumberSpinbox txtAgencyWthTx) {
        this.txtAgencyWthTx = txtAgencyWthTx;
    }

    public RichInputNumberSpinbox getTxtAgencyWthTx() {
        return this.txtAgencyWthTx;
    }

    public void setTxtAgencyPrintdebitNote(RichSelectOneChoice txtAgencyPrintdebitNote) {
        this.txtAgencyPrintdebitNote = txtAgencyPrintdebitNote;
    }

    public RichSelectOneChoice getTxtAgencyPrintdebitNote() {
        return this.txtAgencyPrintdebitNote;
    }

    public void setTxtAgencyStatus(RichSelectOneChoice txtAgencyStatus) {
        this.txtAgencyStatus = txtAgencyStatus;
    }

    public RichSelectOneChoice getTxtAgencyStatus() {
        return this.txtAgencyStatus;
    }

    public void setTxtDateCreated(RichInputDate txtDateCreated) {
        this.txtDateCreated = txtDateCreated;
    }

    public RichInputDate getTxtDateCreated() {
        return this.txtDateCreated;
    }

    public void setTxtCreatedBy(RichInputText txtCreatedBy) {
        this.txtCreatedBy = txtCreatedBy;
    }

    public RichInputText getTxtCreatedBy() {
        return this.txtCreatedBy;
    }

    public void setTxtRegistartionCode(RichInputText txtRegistartionCode) {
        this.txtRegistartionCode = txtRegistartionCode;
    }

    public RichInputText getTxtRegistartionCode() {
        return this.txtRegistartionCode;
    }

    public void setTxtCommReserveRate(RichInputText txtCommReserveRate) {
        this.txtCommReserveRate = txtCommReserveRate;
    }

    public RichInputText getTxtCommReserveRate() {
        return this.txtCommReserveRate;
    }

    public void setTxtAnnualBudget(RichInputText txtAnnualBudget) {
        this.txtAnnualBudget = txtAnnualBudget;
    }

    public RichInputText getTxtAnnualBudget() {
        return this.txtAnnualBudget;
    }

    public void setTxtStaEffectiveDate(RichInputDate txtStaEffectiveDate) {
        this.txtStaEffectiveDate = txtStaEffectiveDate;
    }

    public RichInputDate getTxtStaEffectiveDate() {
        return this.txtStaEffectiveDate;
    }

    public void setTxtCreditPeriod(RichInputText txtCreditPeriod) {
        this.txtCreditPeriod = txtCreditPeriod;
    }

    public RichInputText getTxtCreditPeriod() {
        return this.txtCreditPeriod;
    }

    public void setTxtCommStatEffectiveDate(RichInputDate txtCommStatEffectiveDate) {
        this.txtCommStatEffectiveDate = txtCommStatEffectiveDate;
    }

    public RichInputDate getTxtCommStatEffectiveDate() {
        return this.txtCommStatEffectiveDate;
    }

    public void setTxtCommStatusDate(RichInputDate txtCommStatusDate) {
        this.txtCommStatusDate = txtCommStatusDate;
    }

    public RichInputDate getTxtCommStatusDate() {
        return this.txtCommStatusDate;
    }

    public void setTxtCommAllowed(RichSelectOneChoice txtCommAllowed) {
        this.txtCommAllowed = txtCommAllowed;
    }

    public RichSelectOneChoice getTxtCommAllowed() {
        return this.txtCommAllowed;
    }

    public void setTxtAgencyChecked(RichSelectOneChoice txtAgencyChecked) {
        this.txtAgencyChecked = txtAgencyChecked;
    }

    public RichSelectOneChoice getTxtAgencyChecked() {
        return this.txtAgencyChecked;
    }

    public void setTxtAgencyCheckedBy(RichInputText txtAgencyCheckedBy) {
        this.txtAgencyCheckedBy = txtAgencyCheckedBy;
    }

    public RichInputText getTxtAgencyCheckedBy() {
        return this.txtAgencyCheckedBy;
    }

    public void setTxtAgencyCheckDate(RichInputDate txtAgencyCheckDate) {
        this.txtAgencyCheckDate = txtAgencyCheckDate;
    }

    public RichInputDate getTxtAgencyCheckDate() {
        return this.txtAgencyCheckDate;
    }

    public void setTxtCompCommArrears(RichSelectOneChoice txtCompCommArrears) {
        this.txtCompCommArrears = txtCompCommArrears;
    }

    public RichSelectOneChoice getTxtCompCommArrears() {
        return this.txtCompCommArrears;
    }

    public void setTxtAgencyReinsurer(RichSelectOneChoice txtAgencyReinsurer) {
        this.txtAgencyReinsurer = txtAgencyReinsurer;
    }

    public RichSelectOneChoice getTxtAgencyReinsurer() {
        return this.txtAgencyReinsurer;
    }

    public void setTxtStatusDesc(RichInputText txtStatusDesc) {
        this.txtStatusDesc = txtStatusDesc;
    }

    public RichInputText getTxtStatusDesc() {
        return this.txtStatusDesc;
    }

    public void setTxtAgencyIDNum(RichInputText txtAgencyIDNum) {
        this.txtAgencyIDNum = txtAgencyIDNum;
    }

    public RichInputText getTxtAgencyIDNum() {
        return this.txtAgencyIDNum;
    }

    public void setTxtAgencyContractCode(RichInputText txtAgencyContractCode) {
        this.txtAgencyContractCode = txtAgencyContractCode;
    }

    public RichInputText getTxtAgencyContractCode() {
        return this.txtAgencyContractCode;
    }

    public void setTxtAgencyAgentCode(RichInputText txtAgencyAgentCode) {
        this.txtAgencyAgentCode = txtAgencyAgentCode;
    }

    public RichInputText getTxtAgencyAgentCode() {
        return this.txtAgencyAgentCode;
    }

    public void setTxtAgencySms(RichInputText txtAgencySms) {
        this.txtAgencySms = txtAgencySms;
    }

    public RichInputText getTxtAgencySms() {
        return this.txtAgencySms;
    }

    public void setTxtAgencyHoldingCompanyCode(RichInputText txtAgencyHoldingCompanyCode) {
        this.txtAgencyHoldingCompanyCode = txtAgencyHoldingCompanyCode;
    }

    public RichInputText getTxtAgencyHoldingCompanyCode() {
        return this.txtAgencyHoldingCompanyCode;
    }

    public void setTxtAgencySectorCode(RichInputText txtAgencySectorCode) {
        this.txtAgencySectorCode = txtAgencySectorCode;
    }

    public RichInputText getTxtAgencySectorCode() {
        return this.txtAgencySectorCode;
    }

    public void setTxtAgencyClassCode(RichInputText txtAgencyClassCode) {
        this.txtAgencyClassCode = txtAgencyClassCode;
    }

    public RichInputText getTxtAgencyClassCode() {
        return this.txtAgencyClassCode;
    }

    public void setTxtAgencyExpiriyDate(RichInputDate txtAgencyExpiriyDate) {
        this.txtAgencyExpiriyDate = txtAgencyExpiriyDate;
    }

    public RichInputDate getTxtAgencyExpiriyDate() {
        return this.txtAgencyExpiriyDate;
    }

    public void setTxtAgencyLicenseNum(RichInputText txtAgencyLicenseNum) {
        this.txtAgencyLicenseNum = txtAgencyLicenseNum;
    }

    public RichInputText getTxtAgencyLicenseNum() {
        return this.txtAgencyLicenseNum;
    }

    public void setTxtAgencyRunoff(RichSelectOneChoice txtAgencyRunoff) {
        this.txtAgencyRunoff = txtAgencyRunoff;
    }

    public RichSelectOneChoice getTxtAgencyRunoff() {
        return this.txtAgencyRunoff;
    }

    public void setTxtAgencyLicensed(RichSelectOneChoice txtAgencyLicensed) {
        this.txtAgencyLicensed = txtAgencyLicensed;
    }

    public RichSelectOneChoice getTxtAgencyLicensed() {
        return this.txtAgencyLicensed;
    }

    public void setTxtLicenseGracePeriod(RichInputText txtLicenseGracePeriod) {
        this.txtLicenseGracePeriod = txtLicenseGracePeriod;
    }

    public RichInputText getTxtLicenseGracePeriod() {
        return this.txtLicenseGracePeriod;
    }

    public void setTxtOldAccountNum(RichInputText txtOldAccountNum) {
        this.txtOldAccountNum = txtOldAccountNum;
    }

    public RichInputText getTxtOldAccountNum() {
        return this.txtOldAccountNum;
    }

    public void setTxtAgencyStatusRemarks(RichInputText txtAgencyStatusRemarks) {
        this.txtAgencyStatusRemarks = txtAgencyStatusRemarks;
    }

    public RichInputText getTxtAgencyStatusRemarks() {
        return this.txtAgencyStatusRemarks;
    }

    public void setBtnCreateUpdateAgency(RichCommandButton btnCreateUpdateAgency) {
        this.btnCreateUpdateAgency = btnCreateUpdateAgency;
    }

    public RichCommandButton getBtnCreateUpdateAgency() {
        return this.btnCreateUpdateAgency;
    }

    public void setBtnCancelAgency(RichCommandButton btnCancelAgency) {
        this.btnCancelAgency = btnCancelAgency;
    }

    public RichCommandButton getBtnCancelAgency() {
        return this.btnCancelAgency;
    }

    public void setTxtAgencyBranchCode(RichInputText txtAgencyBranchCode) {
        this.txtAgencyBranchCode = txtAgencyBranchCode;
    }

    public RichInputText getTxtAgencyBranchCode() {
        return this.txtAgencyBranchCode;
    }

    public void setDivisionLov(RichTable divisionLov) {
        this.divisionLov = divisionLov;
    }

    public RichTable getDivisionLov() {
        return this.divisionLov;
    }

    public void setMainPanelTab(RichPanelTabbed mainPanelTab) {
        this.mainPanelTab = mainPanelTab;
    }

    public RichPanelTabbed getMainPanelTab() {
        return this.mainPanelTab;
    }

    public void setPbMainPanelDetail(RichPanelBox pbMainPanelDetail) {
        this.pbMainPanelDetail = pbMainPanelDetail;
    }

    public RichPanelBox getPbMainPanelDetail() {
        return this.pbMainPanelDetail;
    }

    public void setTblAccountTypesPop(RichTable tblAccountTypesPop) {
        this.tblAccountTypesPop = tblAccountTypesPop;
    }

    public RichTable getTblAccountTypesPop() {
        return this.tblAccountTypesPop;
    }

    public void setTxtMainAccountType(RichInputText txtMainAccountType) {
        this.txtMainAccountType = txtMainAccountType;
    }

    public RichInputText getTxtMainAccountType() {
        return this.txtMainAccountType;
    }

    public void setTxtMainAccountTypeCode(RichInputText txtMainAccountTypeCode) {
        this.txtMainAccountTypeCode = txtMainAccountTypeCode;
    }

    public RichInputText getTxtMainAccountTypeCode() {
        return this.txtMainAccountTypeCode;
    }

    public void accountTypeChangeListener(ValueChangeEvent valueChangeEvent) {
        if (valueChangeEvent.getNewValue() != this.session.getAttribute("accountTypeVal")) {
            String accountTypeCode = valueChangeEvent.getNewValue().toString();
            this.session.setAttribute("accountTypeCode", (Object)accountTypeCode);
            ADFUtils.findIterator((String)"fetchAllAccountAgenciesInfoOnlyIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAgencyInfo);
            this.refreshAgencyDetailSection();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.panelAgencyDetails);
        }
        this.session.setAttribute("accountTypeVal", this.accountTypeSelector.getValue());
    }

    public void accountTypeChangeListener2(ValueChangeEvent valueChangeEvent) {
        if (valueChangeEvent.getNewValue() != this.session.getAttribute("accountTypeVal")) {
            Integer accTypeIndex = (Integer)valueChangeEvent.getNewValue();
            DCIteratorBinding accTypeListIter = ADFUtils.findIterator((String)"fetchAllAccountTypesIterator");
            Row accTypeRow = accTypeListIter.getRowAtRangeIndex(accTypeIndex.intValue());
            if (accTypeRow == null) {
                String accountTypeCode = this.accountTypeSelector.getValue().toString();
                this.session.setAttribute("accountTypeCode", (Object)accountTypeCode);
                ADFUtils.findIterator((String)"fetchAllAccountAgenciesInfoOnlyIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAgencyInfo);
                this.refreshAgencyDetailSection();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.panelAgencyDetails);
            } else {
                String currentAccType;
                String accountTypeCode = currentAccType = (String)accTypeRow.getAttribute("code");
                this.session.setAttribute("accountTypeCode", (Object)accountTypeCode);
                ADFUtils.findIterator((String)"fetchAllAccountAgenciesInfoOnlyIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAgencyInfo);
                this.refreshAgencyDetailSection();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.panelAgencyDetails);
            }
        }
    }

    public void tblAgenciesInfoSelectionListener(SelectionEvent selectionEvent) {
        try {
            this.session.setAttribute("PayeeType", (Object)"A");
            Object key2 = this.tblAgencyInfo.getSelectedRowData();
            JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
            if (nodeBinding != null) {
                boolean t;
                String prefix;
                String smNo;
                Object couAdminUnit;
                String agencyCode = nodeBinding.getAttribute("code").toString();
                this.session.setAttribute("agencyCode", (Object)agencyCode);
                this.session.setAttribute("ClientCode", (Object)agencyCode);
                this.btnDeleteAgency.setDisabled(false);
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.btnDeleteAgency);
                this.hiddenAccountCode.setValue((Object)agencyCode);
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.panelDetailSystems);
                this.txtAgencyCode.setValue(nodeBinding.getAttribute("code"));
                this.txtAccountTypeCode.setValue(nodeBinding.getAttribute("accountCode"));
                this.txtShortDesc.setValue(nodeBinding.getAttribute("shortDesc"));
                this.session.setAttribute("agentCodeType", nodeBinding.getAttribute("mainAgnCode"));
                this.txtAgent.setValue(nodeBinding.getAttribute("mainAgent"));
                this.txtAgencyName.setValue(nodeBinding.getAttribute("name"));
                this.txtAgencyPhysicalAddress.setValue(nodeBinding.getAttribute("physicalAddress"));
                this.txtAgencyPostalAddress.setValue(nodeBinding.getAttribute("postalAddress"));
                this.txtAgencyCountryCode.setValue(nodeBinding.getAttribute("countryCode"));
                this.session.setAttribute("countryCode", this.txtAgencyCountryCode.getValue());
                this.session.setAttribute("bru_code", nodeBinding.getAttribute("bru_code"));
                this.session.setAttribute("accountManagerCode", nodeBinding.getAttribute("accountManagerCode"));
                this.txtAgencyCountryName.setValue((Object)UtilDAO.fetchCountryName((String)((String)nodeBinding.getAttribute("countryCode"))));
                ADFUtils.findIterator((String)"fetchAlLMobileTypePrefixIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtSmsPrefix);
                this.txtAgencyTownCode.setValue(nodeBinding.getAttribute("townCode"));
                this.txtAgencyTownName.setValue((Object)UtilDAO.fetchTownName((String)((String)nodeBinding.getAttribute("townCode"))));
                this.txtAgencyEmail.setValue(nodeBinding.getAttribute("emailAddress"));
                this.txtAgencyWebAddress.setValue(nodeBinding.getAttribute("webAddress"));
                this.txtAgencyPostalCode.setValue(nodeBinding.getAttribute("zip"));
                this.txtContactPerson.setValue(nodeBinding.getAttribute("contactPerson"));
                this.txtContactTitle.setValue(nodeBinding.getAttribute("contactTitle"));
                this.txtAgencyPhone1.setValue(nodeBinding.getAttribute("telephone1"));
                this.txtAgencyPhone2.setValue(nodeBinding.getAttribute("telephone2"));
                this.txtAgencyFax.setValue(nodeBinding.getAttribute("fax"));
                this.txtAgencyAccountNumber.setValue(nodeBinding.getAttribute("accountNum"));
                this.txtAgencyPIN.setValue(nodeBinding.getAttribute("PIN"));
                this.txtAgencyCommission.setValue(nodeBinding.getAttribute("commission"));
                this.txtCreditAllowed.setValue(nodeBinding.getAttribute("creditAllowed"));
                this.txtAgencyWthTx.setValue(nodeBinding.getAttribute("witholdTx"));
                this.txtAgencyPrintdebitNote.setValue(nodeBinding.getAttribute("printDbNote"));
                if (nodeBinding.getAttribute("status") == null) {
                    this.txtAgencyStatus.setValue((Object)"ACTIVE");
                } else {
                    this.txtAgencyStatus.setValue(nodeBinding.getAttribute("status"));
                }
                this.txtDateCreated.setValue(nodeBinding.getAttribute("dateCreated"));
                this.txtCreatedBy.setValue(nodeBinding.getAttribute("createdBy"));
                this.txtRegistartionCode.setValue(nodeBinding.getAttribute("registrationCode"));
                this.txtCommReserveRate.setValue(nodeBinding.getAttribute("commReserverate"));
                this.txtAnnualBudget.setValue(nodeBinding.getAttribute("annualBudget"));
                this.txtStaEffectiveDate.setValue(nodeBinding.getAttribute("statusEffectiveDate"));
                this.txtCreditPeriod.setValue(nodeBinding.getAttribute("creditPeriod"));
                this.txtCommStatEffectiveDate.setValue(nodeBinding.getAttribute("commStatEffectiveDate"));
                this.txtCommStatusDate.setValue(nodeBinding.getAttribute("commStatusDate"));
                this.txtCommAllowed.setValue(nodeBinding.getAttribute("commAllowed"));
                this.txtAgencyChecked.setValue(nodeBinding.getAttribute("checked"));
                this.txtAgencyCheckedBy.setValue(nodeBinding.getAttribute("checkedBy"));
                this.txtAgencyCheckDate.setValue(nodeBinding.getAttribute("checkDate"));
                this.txtCompCommArrears.setValue(nodeBinding.getAttribute("compCommArrears"));
                this.txtAgencyReinsurer.setValue(nodeBinding.getAttribute("reinsurer"));
                this.txtAgencyBranchCode.setValue(nodeBinding.getAttribute("branchCode"));
                this.txtAgencyBranchName.setValue((Object)UtilDAO.fetchBranchName((String)((String)nodeBinding.getAttribute("branchCode"))));
                this.txtStatusDesc.setValue(nodeBinding.getAttribute("statusDesc"));
                this.txtAgencyIDNum.setValue(nodeBinding.getAttribute("IDNum"));
                this.txtAgencyContractCode.setValue(nodeBinding.getAttribute("conCode"));
                this.txtAgencyAgentCode.setValue(nodeBinding.getAttribute("agentCode"));
                this.txtBranchUnits.setValue(nodeBinding.getAttribute("bruName"));
                this.txtIraRegNumber.setValue(nodeBinding.getAttribute("regulatorNumber"));
                this.txtIssueCert.setValue(nodeBinding.getAttribute("allocateCerts"));
                this.txtBouncedCheque.setValue(nodeBinding.getAttribute("bouncedCheque"));
                this.txtAgencyHoldingCompanyName.setValue(nodeBinding.getAttribute("holdingCompany"));
                this.txtModeOfComm.setValue(nodeBinding.getAttribute("defaultCommMode"));
                this.txtBussinessPersons.setValue(nodeBinding.getAttribute("bpnName"));
                this.txtCommLevyRate.setValue(nodeBinding.getAttribute("AGN_COMM_LEVY_RATE"));
                this.txtCommLevyApp.setValue(nodeBinding.getAttribute("AGN_COMM_LEVY_APP"));
                this.txtAgencyRegionName.setValue(nodeBinding.getAttribute("regionName"));
                this.txtAgencyRegionCode.setValue(nodeBinding.getAttribute("regionCode"));
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtCommLevyRate);
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtCommLevyApp);
                this.session.setAttribute("bpnCode", nodeBinding.getAttribute("agnBpnCode"));
                this.txtAgentType.setValue(nodeBinding.getAttribute("agencyType"));
                this.txtAgentGroup.setValue(nodeBinding.getAttribute("agencyGroup"));
                if (nodeBinding.getAttribute("authorised") != null) {
                    if (nodeBinding.getAttribute("authorised").equals("Y")) {
                        this.txtAuthorised.setDisabled(true);
                    } else {
                        this.txtAuthorised.setDisabled(false);
                    }
                } else {
                    this.txtAuthorised.setDisabled(false);
                }
                this.session.setAttribute("bruCode", nodeBinding.getAttribute("bruCode"));
                this.session.setAttribute("zipCode", nodeBinding.getAttribute("couZipCode"));
                if (nodeBinding.getAttribute("creditAllowed") != null) {
                    if (nodeBinding.getAttribute("creditAllowed").equals("Y")) {
                        this.txtCreditLimit.setVisible(true);
                        this.txtCreditLimit.setValue(nodeBinding.getAttribute("agencyLimit"));
                    } else {
                        this.txtCreditLimit.setVisible(false);
                        this.txtCreditLimit.setValue((Object)null);
                    }
                } else {
                    this.txtCreditLimit.setVisible(false);
                    this.txtCreditLimit.setValue((Object)null);
                }
                try {
                    prefix = null;
                    smNo = null;
                    t = false;
                    if (nodeBinding.getAttribute("sms") != null && nodeBinding.getAttribute("couZipCode") != null) {
                        prefix = nodeBinding.getAttribute("sms").toString().replace(nodeBinding.getAttribute("couZipCode").toString(), "");
                        prefix = prefix.replace("+", "0");
                        if (this.txtSmsPrefix.isVisible()) {
                            smNo = prefix.substring(4);
                            prefix = prefix.substring(0, 4);
                        } else {
                            smNo = prefix;
                        }
                    }
                    this.txtSmsPrefix.setValue((Object)prefix);
                    this.txtAgencySms.setValue((Object)smNo);
                }
                catch (Exception e) {
                    // empty catch block
                }
                try {
                    prefix = null;
                    smNo = null;
                    t = false;
                    if (nodeBinding.getAttribute("telPay") != null && nodeBinding.getAttribute("couZipCode") != null) {
                        prefix = nodeBinding.getAttribute("telPay").toString().replace(nodeBinding.getAttribute("couZipCode").toString(), "");
                        prefix = prefix.replace("+", "0");
                        if (this.txtTelPayPrefix.isVisible()) {
                            smNo = prefix.substring(4);
                            prefix = prefix.substring(0, 4);
                        } else {
                            smNo = prefix;
                        }
                    }
                    this.txtTelPayPrefix.setValue((Object)prefix);
                    this.txtTelPay.setValue((Object)smNo);
                }
                catch (Exception e) {
                    // empty catch block
                }
                this.txtAgencyHoldingCompanyCode.setValue(nodeBinding.getAttribute("holdCompanyCode"));
                this.txtAgencyHoldingCompanyName.setValue((Object)UtilDAO.fetchHoldingCompanyName((String)((String)nodeBinding.getAttribute("holdCompanyCode"))));
                this.txtAgencySectorCode.setValue(nodeBinding.getAttribute("sectorCode"));
                this.txtAgencySectorName.setValue((Object)UtilDAO.fetchSectorName((String)((String)nodeBinding.getAttribute("sectorCode"))));
                this.txtAgencyClassCode.setValue(nodeBinding.getAttribute("classCode"));
                this.session.setAttribute("brnCode", nodeBinding.getAttribute("brnCode"));
                this.txtAgencyClassName.setValue((Object)UtilDAO.fetchAgencyClassName((String)((String)nodeBinding.getAttribute("classCode"))));
                this.txtAgencyExpiriyDate.setValue(nodeBinding.getAttribute("expiriyDate"));
                this.txtAgencyLicenseNum.setValue(nodeBinding.getAttribute("licenseNum"));
                this.txtAgencyRunoff.setValue(nodeBinding.getAttribute("runOff"));
                this.txtAgencyLicensed.setValue(nodeBinding.getAttribute("licensed"));
                this.txtLicenseGracePeriod.setValue(nodeBinding.getAttribute("licenseGracePeriod"));
                this.txtOldAccountNum.setValue(nodeBinding.getAttribute("oldAccountNum"));
                this.txtAgencyStatusRemarks.setValue(nodeBinding.getAttribute("statusRemarks"));
                this.txtBankName.setValue(nodeBinding.getAttribute("bankName"));
                this.txtBankBranchCode.setValue(nodeBinding.getAttribute("bankBranchCode"));
                this.txtBankBranch.setValue(nodeBinding.getAttribute("bankBranchName"));
                this.txtAccountNo.setValue(nodeBinding.getAttribute("accountNo"));
                this.txtPrefix.setValue(nodeBinding.getAttribute("agentPrefix"));
                this.txtAStateCode.setValue(nodeBinding.getAttribute("agentStateCode"));
                this.session.setAttribute("stateCode", this.txtAStateCode.getValue());
                this.txtAStateName.setValue(nodeBinding.getAttribute("agentStateName"));
                this.txtCreditRting.setValue(nodeBinding.getAttribute("agentCrRating"));
                this.txtSacco.setValue(nodeBinding.getAttribute("clientName"));
                this.txtMarketer.setValue(nodeBinding.getAttribute("accountManager"));
                this.txtAgencyHoldingCompanyCode.setValue(nodeBinding.getAttribute("holdCompanyCode"));
                this.txtRating.setValue(nodeBinding.getAttribute("orsDesc"));
                this.txtRatingOrg.setValue(nodeBinding.getAttribute("rorgDesc"));
                this.txtVatApp.setValue(nodeBinding.getAttribute("vatApplicable"));
                this.txtWithTax.setValue(nodeBinding.getAttribute("whtaxApplicable"));
                this.txtFrequencyofPayment.setValue(nodeBinding.getAttribute("pmtFreq"));
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtModeofPayment);
                this.txtModeofPayment.setValue(nodeBinding.getAttribute("cpmMode"));
                this.txtPmntDtlsValidated.setValue(nodeBinding.getAttribute("pmtValidated"));
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtModeofPayment);
                System.out.println("cpmMode " + (BigDecimal)nodeBinding.getAttribute("cpmMode"));
                this.session.setAttribute("cpmModeDesc", nodeBinding.getAttribute("cpmModeDesc"));
                this.session.setAttribute("pymtMode", nodeBinding.getAttribute("cpmMode"));
                this.session.setAttribute("PM_MODE", nodeBinding.getAttribute("cpmMode"));
                this.session.setAttribute("rorgCode", nodeBinding.getAttribute("rorgCode"));
                this.session.setAttribute("orsCode", nodeBinding.getAttribute("orsCode"));
                if (nodeBinding.getAttribute("accountCode").equals("6")) {
                    this.txtLocalInt.setVisible(true);
                    this.txtLocalInt.setValue(nodeBinding.getAttribute("localInternational"));
                } else {
                    this.txtLocalInt.setVisible(false);
                }
                if (nodeBinding.getAttribute("transType") != null) {
                    if (nodeBinding.getAttribute("transType").toString().equalsIgnoreCase("AGP")) {
                        this.txtEffectiveDate.setVisible(true);
                        this.txtEffectiveDate.setValue(nodeBinding.getAttribute("promTransDate"));
                        this.txtAgentChoices.setVisible(true);
                        this.txtAgentChoices.setValue(nodeBinding.getAttribute("transType"));
                        this.txtTransactionType.setVisible(true);
                        this.txtOneChoice.setValue(nodeBinding.getAttribute("promDemType"));
                        this.txtBranchName.setVisible(true);
                        this.txtBranchName.setValue(nodeBinding.getAttribute("brnName"));
                        this.txtAgencyPrefix.setValue(nodeBinding.getAttribute("agencyPrefix"));
                        this.txtUnitPrefix.setValue(nodeBinding.getAttribute("unitPrefix"));
                        this.txtAgencySeq.setValue(nodeBinding.getAttribute("agencySeqNumber"));
                        this.txtPrecontractCode.setValue(nodeBinding.getAttribute("precontractCode"));
                        this.clbPromote.setVisible(true);
                        this.txtOneChoice.setVisible(true);
                        this.lblBranch.setVisible(true);
                        this.clbBranchDrop.setVisible(true);
                        this.txtOneChoiceDem.setVisible(false);
                        this.lblAgencyBranch.setVisible(false);
                        this.txtUnitManager.setVisible(false);
                        this.clbUnitManager.setVisible(false);
                        this.clbDemoteCmb.setVisible(false);
                        this.lblEffectiveDate.setVisible(true);
                        this.txtTransactionType.setVisible(true);
                        this.txtAgencyPrefix.setVisible(true);
                        this.txtUnitPrefix.setVisible(true);
                        this.txtAgencySeq.setVisible(true);
                        this.lblAgencyPrefix.setVisible(true);
                        this.lblUnitPrefix.setVisible(true);
                        this.lblAgencySeq.setVisible(true);
                        this.txtPrecontractCode.setVisible(true);
                        this.precontractCode.setVisible(true);
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencyPrefix);
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtUnitPrefix);
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencySeq);
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.lblAgencyPrefix);
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.lblUnitPrefix);
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.lblAgencySeq);
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtPrecontractCode);
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.precontractCode);
                    } else if (nodeBinding.getAttribute("transType").toString().equalsIgnoreCase("AGD")) {
                        this.txtAgentChoices.setVisible(true);
                        this.txtAgentChoices.setValue(nodeBinding.getAttribute("transType"));
                        this.txtOneChoiceDem.setVisible(true);
                        this.txtOneChoiceDem.setValue(nodeBinding.getAttribute("promDemType"));
                        this.txtUnitManager.setVisible(true);
                        this.txtUnitManager.setValue(nodeBinding.getAttribute("braName"));
                        this.clbPromote.setVisible(false);
                        this.txtEffectiveDate.setVisible(true);
                        this.txtBranchName.setVisible(false);
                        this.txtOneChoice.setVisible(false);
                        this.lblBranch.setVisible(false);
                        this.clbBranchDrop.setVisible(false);
                        this.txtOneChoiceDem.setVisible(true);
                        this.lblAgencyBranch.setVisible(true);
                        this.txtUnitManager.setVisible(true);
                        this.clbUnitManager.setVisible(true);
                        this.clbDemoteCmb.setVisible(true);
                        this.txtTransactionType.setVisible(true);
                        this.lblEffectiveDate.setVisible(true);
                        this.txtAgencyPrefix.setVisible(false);
                        this.txtUnitPrefix.setVisible(true);
                        this.txtAgencySeq.setVisible(false);
                        this.lblAgencyPrefix.setVisible(false);
                        this.lblUnitPrefix.setVisible(true);
                        this.lblAgencySeq.setVisible(false);
                        this.txtPrecontractCode.setVisible(true);
                        this.precontractCode.setVisible(true);
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtPrecontractCode);
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.precontractCode);
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencyPrefix);
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtUnitPrefix);
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencySeq);
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.lblAgencyPrefix);
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.lblUnitPrefix);
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.lblAgencySeq);
                    }
                }
                if ((couAdminUnit = nodeBinding.getAttribute("couAdminType")) == null) {
                    this.pnmsgAdminRegionName.setVisible(false);
                    this.pnmsgTownName.setVisible(false);
                } else {
                    this.pnmsgAdminRegionName.setVisible(true);
                    this.pnmsgTownName.setVisible(true);
                    this.pnmsgAdminRegionName.setLabel(GlobalCC.formatAdminUnitSingular((Object)couAdminUnit) + ":");
                    this.dlgAdminRegionList.setTitle(GlobalCC.formatAdminUnitPlural((Object)couAdminUnit) + " List");
                }
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.panelAgencyDetails);
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtMarketer);
                ADFUtils.findIterator((String)"fetchAgencyAccountsIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAgencyAccounts);
                ADFUtils.findIterator((String)"findAgentsRegistrationIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.registrationTable);
                ADFUtils.findIterator((String)"findAgentsDirectorsIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.agentDirectorsTable);
                ADFUtils.findIterator((String)"findAgentsRefereesIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.agencyRefereeTable);
                ADFUtils.findIterator((String)"fetchUnassignedAccountSystemsIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.treeUnassignedSystems);
                ADFUtils.findIterator((String)"fetchAllAgencyAssignedSystemsIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAssignedAgencySystems);
                ADFUtils.findIterator((String)"findwebUserAccountsIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.webUsersTable);
                this.mainPanelTab.setVisible(true);
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.pbMainPanelDetail);
                ADFUtils.findIterator((String)"fetchSubAgentsDetailsIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.agencyRefereeTable);
                ADFUtils.findIterator((String)"findServiceprovidersIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.unAssignedServiceProviders);
                ADFUtils.findIterator((String)"fetchAgencyServiceProvidersIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.asssignedServiceProviders);
            }
            this.btnCreateUpdateCurrentAgency.setText("Update");
            this.btnCreateUpdateAgency.setText("Update");
            this.btnCreateUpdateAgency.setDisabled(true);
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void refreshAgencyDetailSection() {
        String adminRegionType;
        Util ut = new Util();
        this.txtBussinessPersons.setValue((Object)null);
        this.txtAgencyCode.setValue((Object)null);
        this.txtAccountTypeCode.setValue((Object)null);
        this.txtShortDesc.setValue((Object)null);
        this.txtAgencyName.setValue((Object)null);
        this.txtAgent.setValue((Object)null);
        this.txtAgencyPhysicalAddress.setValue((Object)null);
        this.txtAgencyPostalAddress.setValue((Object)null);
        this.txtAgencyCountryCode.setValue(this.session.getAttribute("COUNTRY_CODE"));
        this.txtAgencyCountryName.setValue(this.session.getAttribute("COUNTRY_NAME"));
        if (this.session.getAttribute("COUNTRY_NAME") != null && this.session.getAttribute("COUNTRY_NAME").equals("KENYA")) {
            this.pnmsgAdminRegionName.setLabel("County Name");
        }
        String string = adminRegionType = this.session.getAttribute("ADMIN_REG_TYPE") != null ? (String)this.session.getAttribute("ADMIN_REG_TYPE") : null;
        if (adminRegionType != null) {
            this.pnmsgAdminRegionName.setLabel(GlobalCC.formatAdminUnitSingular((Object)adminRegionType) + ":");
            this.dlgAdminRegionList.setTitle(GlobalCC.formatAdminUnitPlural((Object)adminRegionType) + " List");
            this.txtAStateCode.setValue((Object)null);
            this.txtAStateName.setValue((Object)null);
            this.txtAgencyTownCode.setValue((Object)null);
            this.txtAgencyTownName.setValue((Object)null);
            this.pnmsgAdminRegionName.setVisible(true);
            this.pnmsgTownName.setVisible(true);
        }
        this.txtAgencyTownCode.setValue((Object)null);
        this.txtAStateCode.setValue((Object)null);
        this.txtAStateName.setValue((Object)null);
        this.txtAgencyTownName.setValue((Object)null);
        this.txtAgencyEmail.setValue((Object)null);
        this.txtAgencyWebAddress.setValue((Object)null);
        this.txtAgencyPostalCode.setValue((Object)null);
        this.txtContactPerson.setValue((Object)null);
        this.txtContactTitle.setValue((Object)null);
        this.txtAgencyPhone1.setValue((Object)null);
        this.txtAgencyPhone2.setValue((Object)null);
        this.txtAgencyFax.setValue((Object)null);
        this.txtAgencyAccountNumber.setValue((Object)null);
        this.txtAgencyPIN.setValue((Object)null);
        this.txtAgencyCommission.setValue((Object)null);
        this.txtCreditAllowed.setValue((Object)null);
        this.txtAgencyWthTx.setValue((Object)null);
        this.txtAgencyPrintdebitNote.setValue((Object)null);
        this.txtDateCreated.setValue((Object)null);
        this.txtCreatedBy.setValue((Object)null);
        this.txtRegistartionCode.setValue((Object)null);
        this.txtCommReserveRate.setValue((Object)null);
        this.txtAnnualBudget.setValue((Object)null);
        this.txtStaEffectiveDate.setValue((Object)null);
        this.txtCreditPeriod.setValue((Object)null);
        this.txtCommStatEffectiveDate.setValue((Object)null);
        this.txtCommStatusDate.setValue((Object)null);
        this.txtCommAllowed.setValue((Object)null);
        this.txtAgencyChecked.setValue((Object)null);
        this.txtAgencyCheckedBy.setValue((Object)null);
        this.txtAgencyCheckDate.setValue((Object)null);
        this.txtCompCommArrears.setValue((Object)null);
        this.txtAgencyReinsurer.setValue((Object)null);
        if (ut.defaultUserBranch().equals("N")) {
            this.txtAgencyBranchCode.setValue((Object)null);
            this.txtAgencyBranchName.setValue((Object)null);
        } else {
            this.txtAgencyBranchCode.setValue(this.session.getAttribute("branchCode"));
            this.txtAgencyBranchName.setValue(this.session.getAttribute("branchName"));
        }
        this.txtStatusDesc.setValue((Object)null);
        this.txtAgencyIDNum.setValue((Object)null);
        this.txtAgencyContractCode.setValue((Object)null);
        this.txtAgencyAgentCode.setValue((Object)null);
        this.txtSmsPrefix.setValue((Object)null);
        this.txtAgencySms.setValue((Object)null);
        this.txtTelPayPrefix.setValue((Object)null);
        this.txtTelPay.setValue((Object)null);
        this.txtAgencyHoldingCompanyCode.setValue((Object)null);
        this.txtAgencyHoldingCompanyName.setValue((Object)null);
        this.txtAgencySectorCode.setValue((Object)null);
        this.txtAgencySectorName.setValue((Object)null);
        this.txtAgencyClassCode.setValue((Object)null);
        this.txtAgencyClassName.setValue((Object)null);
        this.txtAgencyExpiriyDate.setValue((Object)null);
        this.txtAgencyLicenseNum.setValue((Object)null);
        this.txtAgencyLicensed.setValue((Object)null);
        this.txtLicenseGracePeriod.setValue((Object)null);
        this.txtOldAccountNum.setValue((Object)null);
        this.txtAgencyStatusRemarks.setValue((Object)null);
        this.txtBankBranch.setValue((Object)null);
        this.txtBankName.setValue((Object)null);
        this.txtBankCode.setValue((Object)null);
        this.txtBankBranchCode.setValue((Object)null);
        this.txtAccountNo.setValue((Object)null);
        this.txtPrefix.setValue((Object)null);
        this.txtCreditRting.setValue((Object)null);
        this.txtBranchUnits.setValue((Object)null);
        this.txtRatingOrg.setValue((Object)null);
        this.txtRating.setValue((Object)null);
        this.txtIssueCert.setValue((Object)null);
        this.txtAgentType.setValue((Object)null);
        this.txtAgentGroup.setValue((Object)null);
        this.txtBussinessPersons.setValue((Object)null);
        this.btnCreateUpdateAgency.setDisabled(true);
        int accountCode = Integer.parseInt(this.session.getAttribute("accountTypeCode").toString());
        this.txtCreditLimit.setValue((Object)null);
        if (accountCode == 6) {
            this.txtLocalInt.setVisible(true);
            this.txtLocalInt.setValue((Object)null);
        } else {
            this.txtLocalInt.setVisible(false);
        }
        this.txtVatApp.setValue((Object)"Y");
        this.txtWithTax.setValue((Object)"Y");
    }

    public String actionNewAgency() {
        this.session.setAttribute("PayeeType", (Object)"A");
        this.txtAgent.setValue((Object)"");
        this.txtMarketer.setValue((Object)null);
        if (this.session.getAttribute("accountTypeCode") == null || this.session.getAttribute("accountTypeCode") == "") {
            GlobalCC.INFORMATIONREPORTING((String)"You need to select an Account Type first!");
        } else {
            this.refreshAgencyDetailSection();
            this.txtAccountTypeCode.setValue(this.session.getAttribute("accountTypeCode"));
            this.btnCreateUpdateCurrentAgency.setText("Save");
            this.btnCreateUpdateAgency.setText("Save");
            this.btnCreateUpdateAgency.setDisabled(false);
            this.mainPanelTab.setVisible(true);
            this.pnmsgAdminRegionName.setVisible(true);
            this.session.setAttribute("otherNames", (Object)null);
            this.session.setAttribute("count", (Object)null);
            ADFUtils.findIterator((String)"fetchAllAccountAgenciesBasedOnNamesIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tbListAgencies);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgent);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.pbMainPanelDetail);
        }
        return null;
    }

    public String checkIfAgencyExist() {
        this.session.setAttribute("PayeeType", (Object)"A");
        String pmtFreq = GlobalCC.checkNullValues((Object)this.txtFrequencyofPayment.getValue());
        String pmtMode = GlobalCC.checkNullValues((Object)this.txtModeofPayment.getValue());
        this.session.setAttribute("PAYMENT_FREQ", (Object)GlobalCC.checkNullValues((Object)pmtFreq));
        String agencyStatus = (String)this.txtAgencyStatus.getValue();
        if (agencyStatus.equals("ACTIVE") && this.txtAgencyRunoff.equals("N")) {
            if (this.txtCreditAllowed.getValue() != null) {
                BigDecimal amount = this.txtCreditAllowed.getValue().equals("Y") ? (this.txtCreditLimit.getValue() != null ? new BigDecimal(this.txtCreditLimit.getValue().toString()) : null) : null;
                Authorization auth = new Authorization();
                String process = "AMA";
                String processArea = "CRLMT";
                String processSubArea = "CRDET";
                String AccessGranted = auth.checkUserRights(process, processArea, processSubArea, amount, null);
                if (!AccessGranted.equalsIgnoreCase("Y") && AccessGranted.equalsIgnoreCase("N") && this.txtCreditAllowed.getValue().equals("Y")) {
                    GlobalCC.INFORMATIONREPORTING((String)"You do not have the right to allow credit limits");
                    return null;
                }
            }
            String accountTypeCode = GlobalCC.checkNullValues((Object)this.session.getAttribute("accountTypeCode"));
            String shortDesc = GlobalCC.checkNullValues((Object)this.txtShortDesc.getValue());
            String agencyName = GlobalCC.checkNullValues((Object)this.txtAgencyName.getValue());
            String branchCode = GlobalCC.checkNullValues((Object)this.txtAgencyBranchCode.getValue());
            String runoff = GlobalCC.checkNullValues((Object)this.txtAgencyRunoff.getValue());
            String physicalAddress = GlobalCC.checkNullValues((Object)this.txtAgencyPhysicalAddress.getValue());
            String emailAddress = GlobalCC.checkNullValues((Object)this.txtAgencyEmail.getValue());
            String telephone1 = GlobalCC.checkNullValues((Object)this.txtAgencyPhone1.getValue());
            String regionTypeName = GlobalCC.checkNullValues((Object)this.txtAStateName.getValue());
            String townName = GlobalCC.checkNullValues((Object)this.txtAgencyTownName.getValue());
            String creditLimit = GlobalCC.checkNullValues((Object)this.txtCreditLimit.getValue());
            String commLevyApp = GlobalCC.checkNullValues((Object)this.txtCommLevyApp.getValue());
            BigDecimal commLevyRate = GlobalCC.checkBDNullValues((Object)this.txtCommLevyRate.getValue());
            String agencySBU = GlobalCC.checkNullValues((Object)this.txtAgencySBUCode.getValue());
            Rendering render = new Rendering();
            boolean relation = render.isAgencyRelationShipManager();
            boolean account = render.isBankBranchAccountMand();
            boolean accountEmail = render.isAccountEmailMand();
            boolean couMand = render.isCountryMandatory();
            boolean countyMand = render.isAgencyCountyMand();
            boolean townMand = render.isAgencyTowmMand();
            if (render.isAGENT_REGION_REQUIRED() && this.txtAgencyRegionCode.getValue() == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please Select Region!");
                return null;
            }
            if (couMand && this.txtAgencyCountryName.getValue() == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please select country");
                return null;
            }
            if (countyMand && this.txtAStateName.getValue() == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please select County/State");
                return null;
            }
            if (townMand && this.txtAgencyTownName.getValue() == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please select Town");
                return null;
            }
            if (accountEmail && this.txtAgencyEmail.getValue() == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please select email address");
                return null;
            }
            if (account && this.txtBankName.getValue() == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please Select Bank Branch ");
                return null;
            }
            if (account && this.txtBankBranch.getValue() == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please Select Bank Branch ");
                return null;
            }
            if (account && this.txtAccountNo.getValue() == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please Enter Account Number");
                return null;
            }
            if (relation && this.txtMarketer.getValue() == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please select a relationship manager");
                return null;
            }
            if (render.isPHYSICAL_ADDRESS_REQUIRED() && (physicalAddress == null || physicalAddress == "")) {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Enter Physical address");
                return null;
            }
            if (render.isAgencyPinMand() && this.txtAgencyPIN.getValue() == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please enter Pin Number");
                return null;
            }
            if (render.isRegCodeMand() && this.txtRegistartionCode.getValue() == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please enter the Registration code");
                return null;
            }
            if (render.isAGENT_POSTAL_ADDRESS_REQUIRED() && (this.txtAgencyPostalAddress.getValue() == null || this.txtAgencyPostalAddress.getValue() == "")) {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Enter Postal address");
                return null;
            }
            if (render.isEmailRequired() && (emailAddress == null || emailAddress == "")) {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Enter Email address");
                return null;
            }
            if (render.isTelephoneRequired() && (telephone1 == null || telephone1 == "")) {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Enter Telephone 1");
                return null;
            }
            if (render.isSMSRequired() && this.txtAgencySms.getValue() == null) {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Enter the SMS No.");
                return null;
            }
            if (render.isAgencyDOBMandatory() && GlobalCC.isEmptyStr((Object)this.txtAgnDOB.getValue())) {
                GlobalCC.INFORMATIONREPORTING((String)"Please enter Date Of Birth!");
                return null;
            }
            if (render.isAgencyCommStartDateMandatory() && GlobalCC.isEmptyStr((Object)this.txtAgnBenStartDate.getValue())) {
                GlobalCC.INFORMATIONREPORTING((String)"Please enter Pin Number!");
                return null;
            }
            if (render.isAgencyQualificationMandatory() && GlobalCC.isEmptyStr((Object)this.txtAgnQualification.getValue())) {
                GlobalCC.INFORMATIONREPORTING((String)"Please select Qualification!");
                return null;
            }
            if (render.isAgencyMaritalStatusMandatory() && GlobalCC.isEmptyStr((Object)this.txtAgnMaritalStatus.getValue())) {
                GlobalCC.INFORMATIONREPORTING((String)"Please Select Marital Status!");
                return null;
            }
            if (render.isAGENT_SBU_REQUIRED() && agencySBU == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please Select SBU!");
                return null;
            }
            if (accountTypeCode != null && accountTypeCode != "") {
                if (agencyName == null || agencyName == "") {
                    GlobalCC.errorValueNotEntered((String)"Error Value Missing: Enter the Agency Name");
                    return null;
                }
                if (branchCode == null || branchCode == "") {
                    GlobalCC.errorValueNotEntered((String)"Error Value Missing: Select a branch");
                    return null;
                }
                if (runoff == null || runoff == "") {
                    GlobalCC.errorValueNotEntered((String)"Error Value Missing: Select Runoff value");
                    return null;
                }
            }
            if (this.btnCreateUpdateCurrentAgency.getText().equals("Update")) {
                this.actionCreateNewAgency();
            } else {
                this.session.setAttribute("otherNames", (Object)agencyName);
                System.out.println("Email address" + emailAddress);
                this.session.setAttribute("emailAddress", (Object)emailAddress);
                if (this.txtAgencyPIN.getValue() != null) {
                    this.session.setAttribute("pinNumber", this.txtAgencyPIN.getValue());
                } else {
                    this.session.setAttribute("pinNumber", (Object)null);
                }
                this.session.setAttribute("telNumber", (Object)telephone1);
                this.session.setAttribute("physicalAddress", (Object)physicalAddress);
                this.session.setAttribute("agencySearch", (Object)"agencySearch");
                ADFUtils.findIterator((String)"fetchAllAccountAgenciesInfoOnlyIterator").executeQuery();
                ADFUtils.findIterator((String)"fetchAllAccountAgenciesBasedOnNamesIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tbListAgencies);
                this.session.setAttribute("agencySearch", (Object)null);
                int counter = 0;
                if (this.session.getAttribute("countAgents") != null) {
                    String noOfRecords = this.session.getAttribute("countAgents").toString();
                    counter = Integer.parseInt(noOfRecords);
                    if (counter > 0) {
                        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
                        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:confirmSaveAgency').show(hints);");
                        return null;
                    }
                    this.actionCreateNewAgency();
                } else {
                    this.actionCreateNewAgency();
                }
            }
        } else {
            this.actionCreateNewAgency();
        }
        return null;
    }

    public void confirmSaveAgencyDialogListener(DialogEvent dialogEvent) {
        if (!dialogEvent.getOutcome().equals((Object)DialogEvent.Outcome.no) && dialogEvent.getOutcome().equals((Object)DialogEvent.Outcome.yes)) {
            this.actionCreateNewAgency();
        }
    }

    public String actionShowStates() {
        if (this.txtAgencyCountryCode.getValue() == null) {
            GlobalCC.INFORMATIONREPORTING((String)"You need to select a Country first to proceed.");
            return null;
        }
        this.session.setAttribute("countryCode", this.txtAgencyCountryCode.getValue());
        ADFUtils.findIterator((String)"fetchStatesByCountryIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAdminRegions);
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:statesPop').show(hints);");
        return null;
    }

    public String actionAcceptState() {
        Object key2 = this.tblAdminRegions.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding != null) {
            this.txtAStateCode.setValue(nodeBinding.getAttribute("stateCode"));
            this.txtAStateName.setValue(nodeBinding.getAttribute("stateName"));
            this.session.setAttribute("stateCode", nodeBinding.getAttribute("stateCode"));
            this.txtAgencyTownCode.setValue((Object)null);
            this.txtAgencyTownName.setValue((Object)null);
            ADFUtils.findIterator((String)"fetchTownsByStateIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tbTownListing);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAStateName);
        }
        GlobalCC.dismissPopUp((String)"pt1", (String)"statesPop");
        return null;
    }

    public String actionAcceptAgencyTown() {
        Object key2 = this.tbTownListing.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding != null) {
            this.txtAgencyTownName.setValue(nodeBinding.getAttribute("name"));
            this.txtAgencyTownCode.setValue(nodeBinding.getAttribute("code"));
            System.out.println("Town = " + nodeBinding.getAttribute("code"));
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencyTownName);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencyTownCode);
        }
        GlobalCC.dismissPopUp((String)"pt1", (String)"townListing");
        return null;
    }

    public String btnEditAgency() {
        return null;
    }

    public String actionEditAgency() {
        this.btnCreateUpdateAgency.setText("Update");
        this.btnCreateUpdateAgency.setDisabled(false);
        return null;
    }

    public String actionDeleteAgency() {
        Object key2 = this.tblAgencyInfo.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding != null) {
            String agencyCode = nodeBinding.getAttribute("code").toString();
            ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
            erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:confirmAgencyDeletePop').show(hints);");
        } else {
            GlobalCC.INFORMATIONREPORTING((String)"No Recocrd Selected");
        }
        return null;
    }

    public String actionCreateUpdateAgency() {
        System.out.println("This is the relationship manager" + this.session.getAttribute("accountManagerCode"));
        BigDecimal accountManagerCode = this.session.getAttribute("accountManagerCode") != null ? new BigDecimal(this.session.getAttribute("accountManagerCode").toString()) : null;
        BigDecimal clnCode = this.session.getAttribute("CLCode") == null ? null : new BigDecimal(this.session.getAttribute("CLCode").toString());
        String localReins = this.txtLocalInt.getValue() != null ? this.txtLocalInt.getValue().toString() : null;
        String agencyCode = GlobalCC.checkNullValues((Object)this.txtAgencyCode.getValue());
        String accountTypeCode = GlobalCC.checkNullValues((Object)this.session.getAttribute("accountTypeCode"));
        String shortDesc = GlobalCC.checkNullValues((Object)this.txtShortDesc.getValue());
        String agencyName = GlobalCC.checkNullValues((Object)this.txtAgencyName.getValue());
        String branchCode = GlobalCC.checkNullValues((Object)this.txtAgencyBranchCode.getValue());
        String runoff = GlobalCC.checkNullValues((Object)this.txtAgencyRunoff.getValue());
        String physicalAddress = GlobalCC.checkNullValues((Object)this.txtAgencyPhysicalAddress.getValue());
        String emailAddress = GlobalCC.checkNullValues((Object)this.txtAgencyEmail.getValue());
        String telephone1 = GlobalCC.checkNullValues((Object)this.txtAgencyPhone1.getValue());
        String agencyWithTax = GlobalCC.checkNullValues((Object)this.txtAgencyWthTx.getValue());
        String agencyComm = GlobalCC.checkNullValues((Object)this.txtAgencyCommission.getValue());
        String creditLimit = GlobalCC.checkNullValues((Object)this.txtCreditLimit.getValue());
        String agencyStatus = (String)this.txtAgencyStatus.getValue();
        String benefitStartDate = GlobalCC.checkNullValues((Object)this.txtAgnBenStartDate.getValue());
        String dob = GlobalCC.checkNullValues((Object)this.txtAgnDOB.getValue());
        String qualification = GlobalCC.checkNullValues((Object)this.txtAgnQualification.getValue());
        String maritalStatus = GlobalCC.checkNullValues((Object)this.txtAgnMaritalStatus.getValue());
        String IDNODocUsed = GlobalCC.checkNullValues((Object)this.txtAgnIDNODocUsed.getValue());
        BigDecimal agencySBU = GlobalCC.checkBDNullValues((Object)this.txtAgencySBUCode.getValue());
        String commLevyApp = GlobalCC.checkNullValues((Object)this.txtCommLevyApp.getValue());
        BigDecimal commLevyRate = GlobalCC.checkBDNullValues((Object)this.txtCommLevyRate.getValue());
        BigDecimal regionCode = GlobalCC.checkBDNullValues((Object)this.txtAgencyRegionCode.getValue());
        String regionName = GlobalCC.checkNullValues((Object)this.txtAgencyRegionName.getValue());
        if (agencyStatus.equals("ACTIVE") && this.txtAgencyRunoff.equals("N")) {
            if (agencyCode == null || agencyCode == "") {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: The record code is missing");
                return null;
            }
            if (shortDesc == null || shortDesc == "") {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Enter the Agency ID");
                return null;
            }
            if (agencyName == null || agencyName == "") {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Enter the Agency Name");
                return null;
            }
            if (branchCode == null || branchCode == "") {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Select a branch");
                return null;
            }
            if (runoff == null || runoff == "") {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Select Runoff value");
                return null;
            }
            Rendering renderer = new Rendering();
            if (renderer.isCreditRatingRequired() && this.txtCreditRting.getValue() == null) {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Enter Client Credit Rating");
                return null;
            }
            if (this.txtAgencyPIN.isShowRequired() && this.txtAgencyPIN.getValue() == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please select the agent Pin");
                return null;
            }
            if (this.txtAgencyIDNum.isShowRequired() && this.txtAgencyIDNum.getValue() == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please select the agent Id");
                return null;
            }
            if (renderer.isAgencyBranchUnitMandatory() && GlobalCC.isEmptyStr((Object)this.txtBranchUnits.getValue())) {
                GlobalCC.INFORMATIONREPORTING((String)"Please select Branch Unit");
                return null;
            }
        }
        String Query = SETUPS_AGENCIES_PRC;
        DBConnector connector = new DBConnector();
        OracleCallableStatement cst = null;
        OracleConnection conn = null;
        try {
            conn = connector.getDatabaseConnection();
            cst = (OracleCallableStatement)conn.prepareCall(Query);
            SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
            java.util.Date staEffectiveDate = new java.util.Date();
            if (this.txtStaEffectiveDate.getValue() != null && !this.txtStaEffectiveDate.getValue().equals("")) {
                String date1 = df.format(this.txtStaEffectiveDate.getValue());
                staEffectiveDate = df.parse(date1);
            }
            java.util.Date commStatEffectiveDate = new java.util.Date();
            if (this.txtCommStatEffectiveDate.getValue() != null && !this.txtCommStatEffectiveDate.getValue().equals("")) {
                String date2 = df.format(this.txtCommStatEffectiveDate.getValue());
                commStatEffectiveDate = df.parse(date2);
            }
            java.util.Date commStatusDate = new java.util.Date();
            if (this.txtCommStatusDate.getValue() != null && !this.txtCommStatusDate.getValue().equals("")) {
                String date3 = df.format(this.txtCommStatusDate.getValue());
                commStatusDate = df.parse(date3);
            }
            java.util.Date agencyCheckDate = new java.util.Date();
            if (this.txtAgencyCheckDate.getValue() != null && !this.txtAgencyCheckDate.getValue().equals("")) {
                String date4 = df.format(this.txtAgencyCheckDate.getValue());
                agencyCheckDate = df.parse(date4);
            }
            cst.setString(1, "E");
            try {
                cst.setBigDecimal(2, new BigDecimal(agencyCode));
            }
            catch (NumberFormatException e) {
                GlobalCC.INFORMATIONREPORTING((String)"Agency code  should be a Number");
                return null;
            }
            System.out.println("Town code 2 =" + (String)this.txtAgencyTownCode.getValue());
            cst.setString(3, accountTypeCode);
            cst.setString(4, shortDesc);
            cst.setString(5, agencyName);
            cst.setString(6, (String)this.txtAgencyPhysicalAddress.getValue());
            cst.setString(7, (String)this.txtAgencyPostalAddress.getValue());
            cst.setString(8, (String)this.txtAgencyTownCode.getValue());
            cst.setString(9, (String)this.txtAgencyCountryCode.getValue());
            cst.setString(10, (String)this.txtAgencyEmail.getValue());
            cst.setString(11, (String)this.txtAgencyWebAddress.getValue());
            cst.setString(12, (String)this.txtAgencyPostalCode.getValue());
            cst.setString(13, (String)this.txtContactPerson.getValue());
            cst.setString(14, (String)this.txtContactTitle.getValue());
            cst.setString(15, (String)this.txtAgencyPhone1.getValue());
            cst.setString(16, (String)this.txtAgencyPhone2.getValue());
            cst.setString(17, (String)this.txtAgencyFax.getValue());
            cst.setString(18, (String)this.txtAgencyAccountNumber.getValue());
            cst.setString(19, (String)this.txtAgencyPIN.getValue());
            cst.setString(20, agencyComm);
            cst.setString(21, (String)this.txtCreditAllowed.getValue());
            if (agencyWithTax == null || agencyWithTax == "") {
                cst.setBigDecimal(22, null);
            } else {
                try {
                    cst.setBigDecimal(22, agencyWithTax == null ? null : new BigDecimal(agencyWithTax));
                }
                catch (NumberFormatException e) {
                    GlobalCC.INFORMATIONREPORTING((String)"Witholding Tax  should be a Number");
                }
            }
            cst.setString(23, (String)this.txtAgencyPrintdebitNote.getValue());
            cst.setString(24, (String)this.txtAgencyStatus.getValue());
            cst.setDate(25, new Date(new java.util.Date().getTime()));
            cst.setString(26, (String)this.session.getAttribute("Username"));
            cst.setString(27, (String)this.txtRegistartionCode.getValue());
            cst.setString(28, (String)this.txtCommReserveRate.getValue());
            cst.setString(29, (String)this.txtAnnualBudget.getValue());
            cst.setDate(30, new Date(staEffectiveDate.getTime()));
            cst.setString(31, (String)this.txtCreditPeriod.getValue());
            cst.setDate(32, new Date(commStatEffectiveDate.getTime()));
            cst.setDate(33, new Date(commStatusDate.getTime()));
            cst.setString(34, (String)this.txtCommAllowed.getValue());
            cst.setString(35, (String)this.txtAgencyChecked.getValue());
            cst.setString(36, (String)this.txtAgencyCheckedBy.getValue());
            cst.setDate(37, new Date(agencyCheckDate.getTime()));
            cst.setString(38, (String)this.txtCompCommArrears.getValue());
            cst.setString(39, (String)this.txtAgencyReinsurer.getValue());
            cst.setObject(40, this.txtAgencyBranchCode.getValue());
            cst.setString(41, (String)this.txtAgencyTownName.getValue());
            cst.setString(42, (String)this.txtAgencyCountryName.getValue());
            cst.setString(43, (String)this.txtStatusDesc.getValue());
            cst.setString(44, (String)this.txtAgencyIDNum.getValue());
            cst.setString(45, (String)this.txtAgencyContractCode.getValue());
            cst.setString(46, (String)this.txtAgencyAgentCode.getValue());
            String sms = GlobalCC.checkNullValues((Object)this.txtAgencySms.getValue());
            String prefix = GlobalCC.checkNullValues((Object)this.txtSmsPrefix.getValue());
            if (this.txtSmsPrefix.isVisible()) {
                if (prefix != null) {
                    if (prefix.startsWith("0")) {
                        prefix = prefix.replaceFirst("0", "");
                    }
                    sms = this.session.getAttribute("zipCode") == null ? prefix + "" + sms : "+" + this.session.getAttribute("zipCode").toString() + prefix + "" + sms;
                }
            } else if (sms != null) {
                if (sms.startsWith("0")) {
                    sms = sms.substring(1);
                    sms = "+" + this.session.getAttribute("zipCode").toString() + sms;
                } else {
                    sms = "+" + this.session.getAttribute("zipCode").toString() + sms;
                }
            }
            cst.setString(47, sms);
            cst.setString(48, (String)this.txtAgencyHoldingCompanyCode.getValue());
            cst.setString(49, (String)this.txtAgencySectorCode.getValue());
            cst.setString(50, (String)this.txtAgencyClassCode.getValue());
            if (this.txtAgencyExpiriyDate.getValue() != null) {
                if (this.txtAgencyExpiriyDate.getValue().toString().contains(":")) {
                    cst.setObject(51, (Object)GlobalCC.parseDate((Object)this.txtAgencyExpiriyDate.getValue()));
                } else {
                    cst.setObject(51, (Object)GlobalCC.upDateParseDate((String)this.txtAgencyExpiriyDate.getValue().toString()));
                }
            } else {
                cst.setString(51, null);
            }
            cst.setString(52, (String)this.txtAgencyLicenseNum.getValue());
            cst.setString(53, (String)this.txtAgencyRunoff.getValue());
            cst.setString(54, (String)this.txtAgencyLicensed.getValue());
            cst.setString(55, (String)this.txtLicenseGracePeriod.getValue());
            cst.setString(56, (String)this.txtOldAccountNum.getValue());
            cst.setString(57, (String)this.txtAgencyStatusRemarks.getValue());
            cst.setObject(58, this.txtBankBranchCode.getValue());
            cst.setObject(59, this.txtAccountNo.getValue());
            cst.setObject(60, this.txtPrefix.getValue());
            cst.setObject(61, this.session.getAttribute("stateCode"));
            cst.setObject(62, this.txtCreditRting.getValue());
            BigDecimal agentCode = this.session.getAttribute("agentCodeType") == null || this.session.getAttribute("agentCodeType").equals("") ? null : new BigDecimal(this.session.getAttribute("agentCodeType").toString());
            String SubAgentName = this.txtAgencyName.getValue() == null ? null : this.txtAgencyName.getValue().toString();
            cst.setString(63, SubAgentName);
            cst.setBigDecimal(64, agentCode);
            cst.setBigDecimal(65, clnCode);
            cst.setBigDecimal(66, accountManagerCode);
            cst.setString(67, creditLimit);
            cst.setObject(68, this.session.getAttribute("bruCode"));
            cst.setObject(69, (Object)localReins);
            cst.setObject(70, this.txtIraRegNumber.getValue());
            cst.setObject(71, this.session.getAttribute("rorgCode"));
            cst.setObject(72, this.session.getAttribute("orsCode"));
            cst.setObject(73, this.txtIssueCert.getValue());
            cst.setObject(74, this.txtBouncedCheque.getValue());
            cst.setObject(75, this.txtModeOfComm.getValue());
            cst.setObject(76, this.session.getAttribute("bpnCode"));
            cst.setObject(77, this.txtAgentType.getValue());
            cst.setObject(78, this.txtAgentGroup.getValue());
            cst.setObject(79, this.txtVatApp.getValue());
            cst.setObject(80, this.txtWithTax.getValue());
            sms = GlobalCC.checkNullValues((Object)this.txtTelPay.getValue());
            prefix = GlobalCC.checkNullValues((Object)this.txtTelPayPrefix.getValue());
            if (this.txtTelPayPrefix.isVisible()) {
                if (prefix != null) {
                    if (prefix.startsWith("0")) {
                        prefix = prefix.replaceFirst("0", "");
                    }
                    sms = this.session.getAttribute("zipCode") == null ? prefix + "" + sms : "+" + this.session.getAttribute("zipCode").toString() + prefix + "" + sms;
                }
            } else if (sms != null) {
                if (sms.startsWith("0")) {
                    sms = sms.substring(1);
                    sms = "+" + this.session.getAttribute("zipCode").toString() + sms;
                } else {
                    sms = "+" + this.session.getAttribute("zipCode").toString() + sms;
                }
            }
            cst.setString(81, sms);
            String resetCode = null;
            Random rnd = new Random();
            Integer n = 10000000 + rnd.nextInt(99999999);
            resetCode = n.toString();
            cst.setString(82, resetCode);
            cst.setString(83, GlobalCC.checkNullValues((Object)this.session.getAttribute("PAYMENT_FREQ")));
            cst.setString(84, GlobalCC.checkNullValues((Object)this.session.getAttribute("PM_MODE")));
            cst.setString(85, (String)this.txtPmntDtlsValidated.getValue());
            cst.setDate(86, GlobalCC.extractDate((RichInputDate)this.txtAgnBenStartDate));
            cst.setDate(87, GlobalCC.extractDate((RichInputDate)this.txtAgnDOB));
            cst.setString(88, qualification);
            cst.setString(89, maritalStatus);
            cst.setString(90, IDNODocUsed);
            cst.setBigDecimal(91, agencySBU);
            cst.setString(92, commLevyApp);
            cst.setBigDecimal(93, commLevyRate);
            cst.setBigDecimal(94, regionCode);
            cst.setString(95, regionName);
            cst.execute();
            BigDecimal accTypeCode = null;
            if (this.session.getAttribute("accountTypeCode") != null) {
                try {
                    accTypeCode = new BigDecimal(this.session.getAttribute("accountTypeCode").toString());
                }
                catch (NumberFormatException e) {
                    GlobalCC.INFORMATIONREPORTING((String)"Acount  Type   Code  should be a Number");
                }
            }
            this.session.setAttribute("accountTypeCode", (Object)null);
            this.session.removeAttribute("accountTypeCode");
            this.session.setAttribute("accountTypeCode", (Object)(accTypeCode == null ? null : accTypeCode.toString()));
            ADFUtils.findIterator((String)"fetchAllAccountAgenciesInfoOnlyIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAgencyInfo);
            cst.close();
            conn.commit();
            conn.close();
            this.refreshAgencyDetailSection();
            String message = "Agent UPDATED Successfully!";
            GlobalCC.INFORMATIONREPORTING((String)message);
        }
        catch (Exception e) {
            GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
        }
        return null;
    }

    public String actionCreateNewAgency() {
        BigDecimal accountCode = null;
        System.out.println("This is the relationship manager" + this.session.getAttribute("accountManagerCode"));
        BigDecimal accountManagerCode = this.session.getAttribute("accountManagerCode") != null ? new BigDecimal(this.session.getAttribute("accountManagerCode").toString()) : null;
        String localReins = this.txtLocalInt.getValue() != null ? this.txtLocalInt.getValue().toString() : null;
        BigDecimal clnCode = this.session.getAttribute("CLCode") == null ? null : new BigDecimal(this.session.getAttribute("CLCode").toString());
        if (this.session.getAttribute("accountTypeCode") == null) {
            this.session.setAttribute("accountTypeCode", this.session.getAttribute("accType"));
        }
        if (this.btnCreateUpdateCurrentAgency.getText().equals("Update")) {
            String status = this.actionCreateUpdateAgency();
        } else {
            String agencyStatus;
            String accountTypeCode = GlobalCC.checkNullValues((Object)this.session.getAttribute("accountTypeCode"));
            String shortDesc = GlobalCC.checkNullValues((Object)this.txtShortDesc.getValue());
            String agencyName = GlobalCC.checkNullValues((Object)this.txtAgencyName.getValue());
            String branchCode = GlobalCC.checkNullValues((Object)this.txtAgencyBranchCode.getValue());
            String runoff = GlobalCC.checkNullValues((Object)this.txtAgencyRunoff.getValue());
            String physicalAddress = GlobalCC.checkNullValues((Object)this.txtAgencyPhysicalAddress.getValue());
            String emailAddress = GlobalCC.checkNullValues((Object)this.txtAgencyEmail.getValue());
            String telephone1 = GlobalCC.checkNullValues((Object)this.txtAgencyPhone1.getValue());
            String agencyComm = GlobalCC.checkNullValues((Object)this.txtAgencyCommission.getValue());
            String creditLimit = GlobalCC.checkNullValues((Object)this.txtCreditLimit.getValue());
            String benefitStartDate = GlobalCC.checkNullValues((Object)this.txtAgnBenStartDate.getValue());
            String dob = GlobalCC.checkNullValues((Object)this.txtAgnDOB.getValue());
            String qualification = GlobalCC.checkNullValues((Object)this.txtAgnQualification.getValue());
            String maritalStatus = GlobalCC.checkNullValues((Object)this.txtAgnMaritalStatus.getValue());
            String IDNODocUsed = GlobalCC.checkNullValues((Object)this.txtAgnIDNODocUsed.getValue());
            BigDecimal agencySBU = GlobalCC.checkBDNullValues((Object)this.txtAgencySBUCode.getValue());
            String commLevyApp = GlobalCC.checkNullValues((Object)this.txtCommLevyApp.getValue());
            BigDecimal commLevyRate = GlobalCC.checkBDNullValues((Object)this.txtCommLevyRate.getValue());
            BigDecimal regionCode = GlobalCC.checkBDNullValues((Object)this.txtAgencyRegionCode.getValue());
            String regionName = GlobalCC.checkNullValues((Object)this.txtAgencyRegionName.getValue());
            System.out.println("dob: " + dob);
            System.out.println("benefitStartDate: " + benefitStartDate);
            System.out.println("qualification: " + qualification);
            System.out.println("maritalStatus: " + maritalStatus);
            System.out.println("IDNODocUsed: " + IDNODocUsed);
            System.out.println("agencySBU: " + agencySBU);
            System.out.println("This is it" + this.session.getAttribute("accType"));
            if (this.session.getAttribute("accType") != null) {
                accountCode = new BigDecimal(this.session.getAttribute("accType").toString());
            }
            if ((agencyStatus = (String)this.txtAgencyStatus.getValue()).equals("ACTIVE") && this.txtAgencyRunoff.equals("N")) {
                if (agencyName == null || agencyName == "") {
                    GlobalCC.errorValueNotEntered((String)"Error Value Missing: Enter the Agency Name");
                    return null;
                }
                if (branchCode == null || branchCode == "") {
                    GlobalCC.errorValueNotEntered((String)"Error Value Missing: Select a branch");
                    return null;
                }
                if (runoff == null || runoff == "") {
                    GlobalCC.errorValueNotEntered((String)"Error Value Missing: Select Runoff value");
                    return null;
                }
                Rendering renderer = new Rendering();
                if (renderer.isCreditRatingRequired() && this.txtCreditRting.getValue() == null) {
                    GlobalCC.errorValueNotEntered((String)"Error Value Missing: Enter Client Credit Rating");
                    return null;
                }
                if (this.txtAgencyPIN.isShowRequired() && this.txtAgencyPIN.getValue() == null) {
                    GlobalCC.INFORMATIONREPORTING((String)"Please select the agent Pin");
                    return null;
                }
                if (this.txtAgencyIDNum.isShowRequired() && this.txtAgencyIDNum.getValue() == null) {
                    GlobalCC.INFORMATIONREPORTING((String)"Please select the agent Id");
                    return null;
                }
                if (this.txtBranchUnits.isShowRequired() && this.txtBranchUnits.getValue() == null) {
                    GlobalCC.INFORMATIONREPORTING((String)"Please select Branch Unit");
                    return null;
                }
            }
            String Query = SETUPS_AGENCIES_PRC;
            DBConnector connector = new DBConnector();
            OracleCallableStatement cst = null;
            OracleConnection conn = null;
            try {
                conn = connector.getDatabaseConnection();
                cst = (OracleCallableStatement)conn.prepareCall(Query);
                SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
                java.util.Date staEffectiveDate = new java.util.Date();
                if (this.txtStaEffectiveDate.getValue() != null && !this.txtStaEffectiveDate.getValue().equals("")) {
                    String date1 = df.format(this.txtStaEffectiveDate.getValue());
                    staEffectiveDate = df.parse(date1);
                }
                java.util.Date commStatEffectiveDate = new java.util.Date();
                if (this.txtCommStatEffectiveDate.getValue() != null && !this.txtCommStatEffectiveDate.getValue().equals("")) {
                    String date2 = df.format(this.txtCommStatEffectiveDate.getValue());
                    commStatEffectiveDate = df.parse(date2);
                }
                java.util.Date commStatusDate = new java.util.Date();
                if (this.txtCommStatusDate.getValue() != null && !this.txtCommStatusDate.getValue().equals("")) {
                    String date3 = df.format(this.txtCommStatusDate.getValue());
                    commStatusDate = df.parse(date3);
                }
                cst.setString(1, "A");
                cst.setBigDecimal(2, null);
                cst.setBigDecimal(3, accountCode);
                cst.registerOutParameter(4, 12);
                cst.setString(5, agencyName);
                cst.setString(6, (String)this.txtAgencyPhysicalAddress.getValue());
                cst.setString(7, (String)this.txtAgencyPostalAddress.getValue());
                cst.setString(8, (String)this.txtAgencyTownCode.getValue());
                cst.setString(9, (String)this.txtAgencyCountryCode.getValue());
                cst.setString(10, (String)this.txtAgencyEmail.getValue());
                cst.setString(11, (String)this.txtAgencyWebAddress.getValue());
                cst.setString(12, (String)this.txtAgencyPostalCode.getValue());
                cst.setString(13, (String)this.txtContactPerson.getValue());
                cst.setString(14, (String)this.txtContactTitle.getValue());
                cst.setString(15, (String)this.txtAgencyPhone1.getValue());
                cst.setString(16, (String)this.txtAgencyPhone2.getValue());
                cst.setString(17, (String)this.txtAgencyFax.getValue());
                cst.setString(18, (String)this.txtAgencyAccountNumber.getValue());
                cst.setString(19, (String)this.txtAgencyPIN.getValue());
                cst.setString(20, agencyComm);
                cst.setString(21, (String)this.txtCreditAllowed.getValue());
                if (this.txtAgencyWthTx.getValue() != null && this.txtAgencyWthTx.getValue() != "") {
                    cst.setBigDecimal(22, (BigDecimal)this.txtAgencyWthTx.getValue());
                } else {
                    cst.setString(22, (String)this.txtAgencyWthTx.getValue());
                }
                cst.setString(23, (String)this.txtAgencyPrintdebitNote.getValue());
                cst.setString(24, (String)this.txtAgencyStatus.getValue());
                cst.setDate(25, new Date(new java.util.Date().getTime()));
                cst.setString(26, (String)this.session.getAttribute("Username"));
                cst.setString(27, (String)this.txtRegistartionCode.getValue());
                cst.setString(28, (String)this.txtCommReserveRate.getValue());
                cst.setString(29, (String)this.txtAnnualBudget.getValue());
                cst.setDate(30, new Date(staEffectiveDate.getTime()));
                cst.setString(31, (String)this.txtCreditPeriod.getValue());
                cst.setDate(32, new Date(commStatEffectiveDate.getTime()));
                cst.setDate(33, new Date(commStatusDate.getTime()));
                cst.setString(34, (String)this.txtCommAllowed.getValue());
                cst.setString(35, (String)this.txtAgencyChecked.getValue());
                cst.setString(36, (String)this.txtAgencyCheckedBy.getValue());
                cst.setDate(37, GlobalCC.extractDate((RichInputDate)this.txtAgencyCheckDate));
                cst.setString(38, (String)this.txtCompCommArrears.getValue());
                cst.setString(39, (String)this.txtAgencyReinsurer.getValue());
                cst.setObject(40, this.txtAgencyBranchCode.getValue());
                cst.setString(41, (String)this.txtAgencyTownName.getValue());
                cst.setString(42, (String)this.txtAgencyCountryName.getValue());
                cst.setString(43, (String)this.txtStatusDesc.getValue());
                cst.setString(44, (String)this.txtAgencyIDNum.getValue());
                cst.setString(45, (String)this.txtAgencyContractCode.getValue());
                cst.setString(46, (String)this.txtAgencyAgentCode.getValue());
                String sms = GlobalCC.checkNullValues((Object)this.txtAgencySms.getValue());
                String prefix = GlobalCC.checkNullValues((Object)this.txtSmsPrefix.getValue());
                if (this.txtSmsPrefix.isVisible()) {
                    if (prefix != null) {
                        if (prefix.startsWith("0")) {
                            prefix = prefix.replaceFirst("0", "");
                        }
                        sms = this.session.getAttribute("zipCode") == null ? prefix + "" + sms : "+" + this.session.getAttribute("zipCode").toString() + prefix + "" + sms;
                    }
                } else if (sms.startsWith("0")) {
                    sms = sms.substring(1);
                    sms = "+" + this.session.getAttribute("zipCode").toString() + sms;
                } else {
                    sms = "+" + this.session.getAttribute("zipCode").toString() + sms;
                }
                cst.setString(47, sms);
                cst.setString(48, (String)this.txtAgencyHoldingCompanyCode.getValue());
                cst.setString(49, (String)this.txtAgencySectorCode.getValue());
                cst.setString(50, (String)this.txtAgencyClassCode.getValue());
                cst.setDate(51, GlobalCC.extractDate((RichInputDate)this.txtAgencyExpiriyDate));
                cst.setString(52, (String)this.txtAgencyLicenseNum.getValue());
                cst.setString(53, (String)this.txtAgencyRunoff.getValue());
                cst.setString(54, (String)this.txtAgencyLicensed.getValue());
                cst.setString(55, (String)this.txtLicenseGracePeriod.getValue());
                cst.setString(56, (String)this.txtOldAccountNum.getValue());
                cst.setString(57, (String)this.txtAgencyStatusRemarks.getValue());
                cst.setObject(58, this.txtBankBranchCode.getValue());
                cst.setObject(59, this.txtAccountNo.getValue());
                cst.setObject(60, this.txtPrefix.getValue());
                cst.setObject(61, this.txtAStateCode.getValue());
                cst.setObject(62, this.txtCreditRting.getValue());
                BigDecimal agentCode = this.session.getAttribute("agentCodeType") == null || this.session.getAttribute("agentCodeType").equals("") ? null : new BigDecimal(this.session.getAttribute("agentCodeType").toString());
                this.session.setAttribute("accountTypeCode", (Object)accountCode);
                String SubAgentName = this.txtAgencyName.getValue() == null ? null : this.txtAgencyName.getValue().toString();
                cst.setString(63, SubAgentName);
                cst.setBigDecimal(64, agentCode);
                cst.setBigDecimal(65, clnCode);
                cst.setBigDecimal(66, accountManagerCode);
                cst.setString(67, creditLimit);
                cst.setObject(68, this.session.getAttribute("bruCode"));
                cst.setObject(69, (Object)localReins);
                cst.setObject(70, this.txtIraRegNumber.getValue());
                cst.setObject(71, this.session.getAttribute("rorgCode"));
                cst.setObject(72, this.session.getAttribute("orsCode"));
                cst.setObject(73, this.txtIssueCert.getValue());
                cst.setObject(74, this.txtBouncedCheque.getValue());
                cst.setObject(75, this.txtModeOfComm.getValue());
                cst.setObject(76, this.session.getAttribute("bpnCode"));
                cst.setObject(77, this.txtAgentType.getValue());
                cst.setObject(78, this.txtAgentGroup.getValue());
                cst.setObject(79, this.txtVatApp.getValue());
                cst.setObject(80, this.txtWithTax.getValue());
                sms = GlobalCC.checkNullValues((Object)this.txtTelPay.getValue());
                prefix = GlobalCC.checkNullValues((Object)this.txtTelPayPrefix.getValue());
                if (this.txtTelPayPrefix.isVisible()) {
                    if (prefix != null) {
                        if (prefix.startsWith("0")) {
                            prefix = prefix.replaceFirst("0", "");
                        }
                        sms = this.session.getAttribute("zipCode") == null ? prefix + "" + sms : "+" + this.session.getAttribute("zipCode").toString() + prefix + "" + sms;
                    }
                } else if (sms != null) {
                    if (sms.startsWith("0")) {
                        sms = sms.substring(1);
                        sms = "+" + this.session.getAttribute("zipCode").toString() + sms;
                    } else {
                        sms = "+" + this.session.getAttribute("zipCode").toString() + sms;
                    }
                }
                cst.setString(81, sms);
                String resetCode = null;
                Random rnd = new Random();
                Integer n = 10000000 + rnd.nextInt(99999999);
                resetCode = n.toString();
                cst.setString(82, resetCode);
                cst.setString(83, (String)this.session.getAttribute("PAYMENT_FREQ"));
                cst.setObject(84, this.session.getAttribute("PM_MODE"));
                cst.setString(85, (String)this.txtPmntDtlsValidated.getValue());
                cst.setDate(86, GlobalCC.extractDate((RichInputDate)this.txtAgnBenStartDate));
                cst.setDate(87, GlobalCC.extractDate((RichInputDate)this.txtAgnDOB));
                cst.setString(88, qualification);
                cst.setString(89, maritalStatus);
                cst.setString(90, IDNODocUsed);
                cst.setBigDecimal(91, agencySBU);
                cst.setString(92, commLevyApp);
                cst.setBigDecimal(93, commLevyRate);
                cst.setBigDecimal(94, regionCode);
                cst.setString(95, regionName);
                cst.execute();
                if (accountTypeCode.equalsIgnoreCase("16")) {
                   // GlobalCC.applicationEmail((String)((String)this.txtAgencyEmail.getValue()), (String)null, (String)"Agents Portal Password", (String)("Your Agents Portal Account has been Created. You need to Reset Password on Initial Login. Username:" + cst.getString(4) + " Reset Code:" + resetCode));
                }
                BigDecimal accTypeCode = null;
                if (this.session.getAttribute("accountTypeCode") != null || this.session.getAttribute("accountTypeCode") != "") {
                    accTypeCode = new BigDecimal(this.session.getAttribute("accountTypeCode").toString());
                }
                this.session.setAttribute("accountTypeCode", (Object)null);
                this.session.removeAttribute("accountTypeCode");
                this.session.setAttribute("accountTypeCode", (Object)accTypeCode.toString());
                ADFUtils.findIterator((String)"fetchAllAccountAgenciesInfoOnlyIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAgencyInfo);
                cst.close();
                conn.close();
                refreshAgencyDetailSection();
                String message = "Agent CREATED Successfully!";
                GlobalCC.INFORMATIONREPORTING((String)message);
            }
            catch (Exception e) {
                GlobalCC.EXCEPTIONREPORTING(e);
                
            }
        }
        return "Success";
    }

    public String actionShowTownPopup() {
        if (this.txtAStateCode.getValue() == null || this.txtAStateName.getValue().equals("")) {
            GlobalCC.INFORMATIONREPORTING((String)"You need to select a State  first!");
        } else {
            ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
            erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:townListing').show(hints);");
        }
        return null;
    }

    public String actionSelectCountryPop() {
        Object key2 = this.tblAgencyCountry.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding != null) {
            String adminRegionType;
            this.session.setAttribute("countryCode", nodeBinding.getAttribute("code"));
            ADFUtils.findIterator((String)"fetchAlLMobileTypePrefixIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtSmsPrefix);
            this.txtAgencyCountryName.setValue(nodeBinding.getAttribute("name"));
            this.txtAgencyCountryCode.setValue(nodeBinding.getAttribute("code"));
            String string = adminRegionType = nodeBinding.getAttribute("administrativeType") != null ? (String)nodeBinding.getAttribute("administrativeType") : null;
            if (adminRegionType != null) {
                this.pnmsgAdminRegionName.setLabel(GlobalCC.formatAdminUnitSingular((Object)adminRegionType) + ":");
                this.dlgAdminRegionList.setTitle(GlobalCC.formatAdminUnitPlural((Object)adminRegionType) + " List");
                this.txtAStateCode.setValue((Object)null);
                this.txtAStateName.setValue((Object)null);
                this.txtAgencyTownCode.setValue((Object)null);
                this.txtAgencyTownName.setValue((Object)null);
                this.pnmsgAdminRegionName.setVisible(true);
                this.pnmsgTownName.setVisible(true);
            }
        } else {
            this.pnmsgAdminRegionName.setVisible(false);
            this.pnmsgTownName.setVisible(false);
        }
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.frmLoadAdminTownDetails);
        GlobalCC.dismissPopUp((String)"pt1", (String)"countryPop");
        return null;
    }

    public String actionSelectTownPop() {
        Object key2 = this.tblAgencyTown.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding != null) {
            this.txtAgencyTownName.setValue(nodeBinding.getAttribute("name"));
            this.txtAgencyTownCode.setValue(nodeBinding.getAttribute("code"));
        }
        return null;
    }

    public void setTblAgencyCountry(RichTable tblAgencyCountry) {
        this.tblAgencyCountry = tblAgencyCountry;
    }

    public RichTable getTblAgencyCountry() {
        return this.tblAgencyCountry;
    }

    public void setTblAgencyTown(RichTable tblAgencyTown) {
        this.tblAgencyTown = tblAgencyTown;
    }

    public RichTable getTblAgencyTown() {
        return this.tblAgencyTown;
    }

    public String actionAcceptHoldingCompany() {
        Object key2 = this.tblAgencyHoldingCompany.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding != null) {
            this.txtAgencyHoldingCompanyCode.setValue(nodeBinding.getAttribute("code"));
            this.txtAgencyHoldingCompanyName.setValue(nodeBinding.getAttribute("name"));
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencyHoldingCompanyName);
        }
        GlobalCC.dismissPopUp((String)"pt1", (String)"holdingCompanyPop");
        return null;
    }

    public void setTblAgencyHoldingCompany(RichTable tblAgencyHoldingCompany) {
        this.tblAgencyHoldingCompany = tblAgencyHoldingCompany;
    }

    public RichTable getTblAgencyHoldingCompany() {
        return this.tblAgencyHoldingCompany;
    }

    public void setTxtAgencyHoldingCompanyName(RichInputText txtAgencyHoldingCompanyName) {
        this.txtAgencyHoldingCompanyName = txtAgencyHoldingCompanyName;
    }

    public RichInputText getTxtAgencyHoldingCompanyName() {
        return this.txtAgencyHoldingCompanyName;
    }

    public String actionAcceptAgencyClass() {
        Object key2 = this.tblAgencyClasses.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding != null) {
            this.txtAgencyClassCode.setValue(nodeBinding.getAttribute("code"));
            this.txtAgencyClassName.setValue(nodeBinding.getAttribute("description"));
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencyClassName);
        }
        GlobalCC.dismissPopUp((String)"pt1", (String)"AgencyClassPop");
        return null;
    }

    public String actionAcceptSector() {
        Object key2 = this.tblAgencySector.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding != null) {
            this.txtAgencySectorCode.setValue(nodeBinding.getAttribute("code"));
            this.txtAgencySectorName.setValue(nodeBinding.getAttribute("name"));
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencySectorName);
        }
        GlobalCC.dismissPopUp((String)"pt1", (String)"sectorPop");
        return null;
    }

    public void setTblAgencyClasses(RichTable tblAgencyClasses) {
        this.tblAgencyClasses = tblAgencyClasses;
    }

    public RichTable getTblAgencyClasses() {
        return this.tblAgencyClasses;
    }

    public void setTblAgencySector(RichTable tblAgencySector) {
        this.tblAgencySector = tblAgencySector;
    }

    public RichTable getTblAgencySector() {
        return this.tblAgencySector;
    }

    public void setTxtAgencySectorName(RichInputText txtAgencySectorName) {
        this.txtAgencySectorName = txtAgencySectorName;
    }

    public RichInputText getTxtAgencySectorName() {
        return this.txtAgencySectorName;
    }

    public void setTxtAgencyClassName(RichInputText txtAgencyClassName) {
        this.txtAgencyClassName = txtAgencyClassName;
    }

    public RichInputText getTxtAgencyClassName() {
        return this.txtAgencyClassName;
    }

    public String actionAcceptAgencyBranch() {
        Object key2 = this.tblAgencyBranch.getSelectedRowData();
        JUCtrlValueBinding n = (JUCtrlValueBinding)key2;
        if (n != null) {
            this.txtAgencyBranchCode.setValue(n.getAttribute("id"));
            this.txtAgencyBranchName.setValue(n.getAttribute("name"));
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencyBranchName);
            System.out.println("txtAgencyBranchCode " + this.txtAgencyBranchCode.getValue());
        }
        GlobalCC.dismissPopUp((String)"pt1", (String)"agencyBranchPop");
        return null;
    }

    public String actionAcceptAgencyRegion() {
        Object key2 = this.tblRegion.getSelectedRowData();
        JUCtrlValueBinding n = (JUCtrlValueBinding)key2;
        if (n != null) {
            this.txtAgencyRegionCode.setValue(n.getAttribute("regionCode"));
            this.session.setAttribute("regionCode", n.getAttribute("regionCode"));
            this.txtAgencyRegionName.setValue(n.getAttribute("regionName"));
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencyRegionName);
            System.out.println("txtAgencyRegionCode " + this.txtAgencyRegionCode.getValue());
            GlobalCC.refreshUI((UIComponent)this.branchUnitsTbl);
        }
        GlobalCC.dismissPopUp((String)"pt1", (String)"agencyRegionPop");
        return null;
    }

    public String actionAcceptAgencySBU() {
        Object key2 = this.tblAgencySBU.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding != null) {
            this.txtAgencySBUCode.setValue(nodeBinding.getAttribute("SBU_CODE"));
            this.txtAgencySBUName.setValue(nodeBinding.getAttribute("SBU"));
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencySBUName);
            System.out.println("txtAgencySBUCode " + this.txtAgencySBUCode.getValue());
        }
        GlobalCC.dismissPopUp((String)"pt1", (String)"agencySBUPop");
        return null;
    }

    public void setTblAgencyBranch(RichTable tblAgencyBranch) {
        this.tblAgencyBranch = tblAgencyBranch;
    }

    public RichTable getTblAgencyBranch() {
        return this.tblAgencyBranch;
    }

    public void setTxtAgencyBranchName(RichInputText txtAgencyBranchName) {
        this.txtAgencyBranchName = txtAgencyBranchName;
    }

    public RichInputText getTxtAgencyBranchName() {
        return this.txtAgencyBranchName;
    }

    public void setRegistrationTable(RichTable registrationTable) {
        this.registrationTable = registrationTable;
    }

    public RichTable getRegistrationTable() {
        return this.registrationTable;
    }

    public String addRegDetails() {
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:regPop').show(hints);");
        this.regyear.setValue((Object)"");
        this.regno.setValue((Object)"");
        this.regWef.setValue((Object)"");
        this.regWet.setValue((Object)"");
        this.regAccepted.setValue((Object)"");
        this.saveRegistrationDetails.setText("Save");
        return null;
    }

    public String updateRegDetails() {
        Object key2 = this.registrationTable.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding == null) {
            GlobalCC.INFORMATIONREPORTING((String)"no record selected.");
            return null;
        }
        this.regyear.setValue(nodeBinding.getAttribute("year"));
        this.regno.setValue(nodeBinding.getAttribute("regno"));
        this.regWef.setValue(nodeBinding.getAttribute("wef"));
        this.regWet.setValue(nodeBinding.getAttribute("wet"));
        this.regAccepted.setValue(nodeBinding.getAttribute("accepted"));
        this.regkey.setValue(nodeBinding.getAttribute("id"));
        this.saveRegistrationDetails.setText("Update");
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:regPop').show(hints);");
        return null;
    }

    public String deleteRegDetails() {
        Object key2 = this.registrationTable.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding != null) {
            ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
            erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:confirmDeleteAgencyRegPop').show(hints);");
        } else {
            GlobalCC.INFORMATIONREPORTING((String)"No record Selected::");
        }
        return null;
    }

    public String saveRegistrationDetails() {
        DBConnector connection = new DBConnector();
        String query = "begin TQC_AGENCIES_PKG.TQC_AGENCY_REGISTRATION_PRC(?,?,?);end;";
        ARRAY array = null;
        OracleConnection conn = null;
        OracleCallableStatement stmt = null;
        if (this.saveRegistrationDetails.getText().equals("Save")) {
            String regAcceptedVal = GlobalCC.checkNullValues((Object)this.regAccepted.getValue());
            String regNum = GlobalCC.checkNullValues((Object)this.regno.getValue());
            if (regAcceptedVal == null || regAcceptedVal.equals("")) {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Select Accepted");
                return null;
            }
            if (regNum == null || regNum.equals("")) {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Enter the Reg Number");
                return null;
            }
            if (this.regyear.getValue() == null || this.regyear.getValue().equals("")) {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Enter the Year");
                return null;
            }
            if (this.regWef.getValue() == null || this.regWef.getValue().equals("")) {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Enter the WEF date");
                return null;
            }
            if (this.regWet.getValue() == null || this.regWet.getValue().equals("")) {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Enter the WET date");
                return null;
            }
            java.util.Date dateYear = (java.util.Date)this.regyear.getValue();
            java.util.Date dateWef = (java.util.Date)this.regWef.getValue();
            java.util.Date dateWet = (java.util.Date)this.regWet.getValue();
            Calendar calYear = Calendar.getInstance();
            calYear.setTime(dateYear);
            Calendar calWef = Calendar.getInstance();
            calWef.setTime(dateWef);
            Calendar calWet = Calendar.getInstance();
            calWet.setTime(dateWet);
            int year1 = calWef.get(1);
            int month1 = calWef.get(2);
            int year2 = calWet.get(1);
            int month2 = calWet.get(2);
            int months = year2 * 12 + month2 - (year1 * 12 + month1);
            int tempYear = calYear.get(1);
            if (calWef.get(1) != tempYear) {
                GlobalCC.errorValueNotEntered((String)"The WEF date has to be within the year specified");
                return null;
            }
            if (months > 12 || months <= 0) {
                GlobalCC.errorValueNotEntered((String)"The WET date has to be within the first 12 months from the WEF date. Please select another WET date");
                return null;
            }
            String agencyCode = GlobalCC.checkNullValues((Object)this.session.getAttribute("agencyCode"));
            LinkedList<AgentRegistration> reglist = new LinkedList<AgentRegistration>();
            AgentRegistration regbean = new AgentRegistration();
            java.util.Date year = (java.util.Date)this.regyear.getValue();
            BigDecimal yr = new BigDecimal(new SimpleDateFormat("yyyy").format(year));
            java.util.Date wef = (java.util.Date)this.regWef.getValue();
            java.util.Date wet = (java.util.Date)this.regWet.getValue();
            regbean.setAREG_CODE(null);
            regbean.setAREG_ACCEPTED((String)this.regAccepted.getValue());
            regbean.setAREG_AGN_CODE(new BigDecimal(agencyCode));
            regbean.setAREG_REG_NO((String)this.regno.getValue());
            regbean.setAREG_WEF(new Date(wef.getTime()));
            regbean.setAREG_WET(new Date(wet.getTime()));
            regbean.setAREG_YEAR(yr);
            reglist.add(regbean);
            try {
                conn = connection.getDatabaseConnection();
                stmt = (OracleCallableStatement)conn.prepareCall(query);
                ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor((String)"TQC_AGENCY_REGISTRATION_TAB", (Connection)conn);
                array = new ARRAY(descriptor, (Connection)conn, (Object)reglist.toArray());
                stmt.setString(1, "A");
                stmt.setArray(2, (Array)array);
                stmt.registerOutParameter(3, 12);
                stmt.execute();
                String error = stmt.getString(3);
                stmt.close();
                conn.commit();
                conn.close();
                ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
                erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:regPop').hide(hints);");
                ADFUtils.findIterator((String)"findAgentsRegistrationIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.registrationTable);
                String message = "New Record ADDED Successfully!";
                GlobalCC.INFORMATIONREPORTING((String)message);
            }
            catch (SQLException e) {
                GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
            }
        } else if (this.saveRegistrationDetails.getText().equals("Update")) {
            AgentRegistration regbean = new AgentRegistration();
            java.util.Date year = (java.util.Date)this.regyear.getValue();
            LinkedList<AgentRegistration> reglist = new LinkedList<AgentRegistration>();
            BigDecimal yr = new BigDecimal(new SimpleDateFormat("yyyy").format(year));
            regbean.setAREG_CODE(new BigDecimal((String)this.regkey.getValue()));
            regbean.setAREG_ACCEPTED((String)this.regAccepted.getValue());
            regbean.setAREG_AGN_CODE(new BigDecimal((String)this.session.getAttribute("agencyCode")));
            regbean.setAREG_REG_NO((String)this.regno.getValue());
            java.util.Date wef = (java.util.Date)this.regWef.getValue();
            regbean.setAREG_WEF(new Date(wef.getTime()));
            java.util.Date wet = (java.util.Date)this.regWet.getValue();
            regbean.setAREG_WET(new Date(wet.getTime()));
            regbean.setAREG_YEAR(yr);
            reglist.add(regbean);
            try {
                conn = connection.getDatabaseConnection();
                stmt = (OracleCallableStatement)conn.prepareCall(query);
                ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor((String)"TQC_AGENCY_REGISTRATION_TAB", (Connection)conn);
                array = new ARRAY(descriptor, (Connection)conn, (Object)reglist.toArray());
                stmt.setString(1, "E");
                stmt.setArray(2, (Array)array);
                stmt.registerOutParameter(3, 12);
                stmt.execute();
                String error = stmt.getString(3);
                stmt.close();
                conn.commit();
                conn.close();
                ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
                erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:regPop').hide(hints);");
                ADFUtils.findIterator((String)"findAgentsRegistrationIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.registrationTable);
                String message = "Record UPDATED Successfully!";
                GlobalCC.INFORMATIONREPORTING((String)message);
            }
            catch (SQLException e) {
                GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
            }
        }
        GlobalCC.dismissPopUp((String)"pt1", (String)"regPop");
        return null;
    }

    public void setSaveRegistrationDetails(RichCommandButton saveRegistrationDetails) {
        this.saveRegistrationDetails = saveRegistrationDetails;
    }

    public RichCommandButton getSaveRegistrationDetails() {
        return this.saveRegistrationDetails;
    }

    public void setRegkey(RichInputText regkey) {
        this.regkey = regkey;
    }

    public RichInputText getRegkey() {
        return this.regkey;
    }

    public void setRegyear(RichInputDate regyear) {
        this.regyear = regyear;
    }

    public RichInputDate getRegyear() {
        return this.regyear;
    }

    public void setRegno(RichInputText regno) {
        this.regno = regno;
    }

    public RichInputText getRegno() {
        return this.regno;
    }

    public void setRegWef(RichInputDate regWef) {
        this.regWef = regWef;
    }

    public RichInputDate getRegWef() {
        return this.regWef;
    }

    public void setRegWet(RichInputDate regWet) {
        this.regWet = regWet;
    }

    public RichInputDate getRegWet() {
        return this.regWet;
    }

    public void setRegAccepted(RichSelectOneChoice regAccepted) {
        this.regAccepted = regAccepted;
    }

    public RichSelectOneChoice getRegAccepted() {
        return this.regAccepted;
    }

    public void setAgentDirectorsTable(RichTable agentDirectorsTable) {
        this.agentDirectorsTable = agentDirectorsTable;
    }

    public RichTable getAgentDirectorsTable() {
        return this.agentDirectorsTable;
    }

    public String addAgencyDirectors() {
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agentDirectorsPop').show(hints);");
        this.directYr.setValue((Object)null);
        this.directname.setValue((Object)null);
        this.directQualifications.setValue((Object)null);
        this.directshare.setValue((Object)null);
        this.txtPhoneNumber.setValue((Object)null);
        this.txtNationality.setValue((Object)null);
        this.saveAgDirectorButton.setText("Save");
        return null;
    }

    public String editAgencyDirectors() {
        Object key2 = this.agentDirectorsTable.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No record selected.");
            return null;
        }
        this.agencyDirectorId.setValue(nodeBinding.getAttribute("id"));
        this.directYr.setValue(nodeBinding.getAttribute("year"));
        this.directname.setValue(nodeBinding.getAttribute("name"));
        this.directQualifications.setValue(nodeBinding.getAttribute("qualification"));
        this.directshare.setValue(nodeBinding.getAttribute("shareholding"));
        this.txtPhoneNumber.setValue(nodeBinding.getAttribute("phoneNumber"));
        this.txtPrincipleDirector.setValue(nodeBinding.getAttribute("principleDirecor"));
        this.saveAgDirectorButton.setText("Update");
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agentDirectorsPop').show(hints);");
        return null;
    }

    public String deleteAgencyDirectors() {
        Object key2 = this.agentDirectorsTable.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No Record Selected.");
            return null;
        }
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:confirmDeleteAgencyDirectorPop').show(hints);");
        return null;
    }

    public String saveAgDirectorsAction() {
        block17 : {
            String share;
            String principleDire;
            BigDecimal nationality;
            String agncode;
            String name;
            String dirId;
            String dirNumber;
            String qual;
            if (this.directYr.getValue() == null) {
                GlobalCC.errorValueNotEntered((String)"Year Required:");
                return null;
            }
            share = GlobalCC.checkNullValues((Object)this.directshare.getValue());
            agncode = GlobalCC.checkNullValues((Object)this.session.getAttribute("agencyCode"));
            name = GlobalCC.checkNullValues((Object)this.directname.getValue());
            qual = GlobalCC.checkNullValues((Object)this.directQualifications.getValue());
            dirId = GlobalCC.checkNullValues((Object)this.agencyDirectorId.getValue());
            dirNumber = GlobalCC.checkNullValues((Object)this.txtPhoneNumber.getValue());
            principleDire = GlobalCC.checkNullValues((Object)this.txtPrincipleDirector.getValue());
            nationality = this.session.getAttribute("countryCode") != null ? new BigDecimal(this.session.getAttribute("countryCode").toString()) : null;
            try {
                DBConnector connector = new DBConnector();
                OracleConnection connection = null;
                try {
                    connection = connector.getDatabaseConnection();
                    String query = "begin TQC_AGENCIES_PKG.getAgencyPrincipleDir(?,?); end;";
                    OracleCallableStatement statement = null;
                    statement = (OracleCallableStatement)connection.prepareCall(query);
                    statement.setBigDecimal(1, new BigDecimal((String)this.session.getAttribute("agencyCode")));
                    statement.setObject(2, (Object)principleDire);
                    statement.execute();
                    connection.close();
                }
                catch (Exception e) {
                    GlobalCC.EXCEPTIONREPORTING((Exception)e);
                    return null;
                }
            }
            catch (Exception e) {
                return null;
            }
            DBConnector connection = new DBConnector();
            String query = "begin TQC_AGENCIES_PKG.TQC_AGENCY_DIRECTORS_PRC(?,?,?);end;";
            ARRAY array = null;
            OracleConnection conn = null;
            OracleCallableStatement stmt = null;
            java.util.Date year = null;
            BigDecimal yr = null;
            if (this.directYr.getValue() != null) {
                year = (java.util.Date)this.directYr.getValue();
                yr = new BigDecimal(new SimpleDateFormat("yyyy").format(year));
            }
            if (this.saveAgDirectorButton.getText().equals("Save")) {
                AgDirector regbean = new AgDirector();
                LinkedList<AgDirector> reglist = new LinkedList<AgDirector>();
                regbean.setADIR_CODE(null);
                regbean.setADIR_AGN_CODE(new BigDecimal(agncode));
                regbean.setADIR_DESIGNATION("");
                regbean.setADIR_NAME(name);
                regbean.setADIR_PCT_HOLDG(share == null ? null : new BigDecimal(share));
                regbean.setADIR_YEAR(yr);
                regbean.setADIR_QUALIFICATIONS(qual);
                regbean.setADIR_PHONE_NUMBER(dirNumber);
                regbean.setADIR_PRINCIPLE_DIR(principleDire);
                regbean.setADIR_NATIONALITY(nationality);
                reglist.add(regbean);
                try {
                    conn = connection.getDatabaseConnection();
                    stmt = (OracleCallableStatement)conn.prepareCall(query);
                    ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor((String)"TQC_AGENCY_DIRECTORS_TAB", (Connection)conn);
                    array = new ARRAY(descriptor, (Connection)conn, (Object)reglist.toArray());
                    stmt.setString(1, "A");
                    stmt.setArray(2, (Array)array);
                    stmt.registerOutParameter(3, 12);
                    stmt.execute();
                    String error = stmt.getString(3);
                    stmt.close();
                    conn.close();
                    if (error != null) {
                        GlobalCC.INFORMATIONREPORTING((String)("Error occured while saving ::" + error));
                        break block17;
                    }
                    GlobalCC.INFORMATIONREPORTING((String)"Record savedSuccessfully");
                    ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
                    erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agentDirectorsPop').hide(hints);");
                }
                catch (Exception e) {
                    GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
                }
            } else if (this.saveAgDirectorButton.getText().equals("Update")) {
                AgDirector regbean = new AgDirector();
                LinkedList<AgDirector> reglist = new LinkedList<AgDirector>();
                yr = new BigDecimal(new SimpleDateFormat("yyyy").format(year));
                regbean.setADIR_CODE(dirId == null ? null : new BigDecimal(dirId));
                regbean.setADIR_AGN_CODE(new BigDecimal(agncode));
                regbean.setADIR_DESIGNATION("");
                regbean.setADIR_NAME(name);
                regbean.setADIR_PCT_HOLDG(share == null ? null : new BigDecimal(share));
                regbean.setADIR_YEAR(yr);
                regbean.setADIR_QUALIFICATIONS(qual);
                regbean.setADIR_PHONE_NUMBER(dirNumber);
                regbean.setADIR_PRINCIPLE_DIR(principleDire);
                regbean.setADIR_NATIONALITY(nationality);
                reglist.add(regbean);
                try {
                    conn = connection.getDatabaseConnection();
                    stmt = (OracleCallableStatement)conn.prepareCall(query);
                    ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor((String)"TQC_AGENCY_DIRECTORS_TAB", (Connection)conn);
                    array = new ARRAY(descriptor, (Connection)conn, (Object)reglist.toArray());
                    stmt.setString(1, "E");
                    stmt.setArray(2, (Array)array);
                    stmt.registerOutParameter(3, 12);
                    stmt.execute();
                    String error = stmt.getString(3);
                    stmt.close();
                    conn.close();
                    if (error != null) {
                        GlobalCC.INFORMATIONREPORTING((String)("Error occured while updating ::" + error));
                    } else {
                        GlobalCC.INFORMATIONREPORTING((String)"Record Updated Successfully");
                        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
                        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agentDirectorsPop').hide(hints);");
                    }
                }
                catch (Exception e) {
                    GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
                }
            }
        }
        ADFUtils.findIterator((String)"findAgentsDirectorsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.agentDirectorsTable);
        return null;
    }

    public void setAgencyDirectorId(RichInputText agencyDirectorId) {
        this.agencyDirectorId = agencyDirectorId;
    }

    public RichInputText getAgencyDirectorId() {
        return this.agencyDirectorId;
    }

    public void setDirectYr(RichInputDate directYr) {
        this.directYr = directYr;
    }

    public RichInputDate getDirectYr() {
        return this.directYr;
    }

    public void setDirectname(RichInputText directname) {
        this.directname = directname;
    }

    public RichInputText getDirectname() {
        return this.directname;
    }

    public void setDirectQualifications(RichInputText directQualifications) {
        this.directQualifications = directQualifications;
    }

    public RichInputText getDirectQualifications() {
        return this.directQualifications;
    }

    public void setDirectshare(RichInputNumberSpinbox directshare) {
        this.directshare = directshare;
    }

    public RichInputNumberSpinbox getDirectshare() {
        return this.directshare;
    }

    public void setSaveAgDirectorButton(RichCommandButton saveAgDirectorButton) {
        this.saveAgDirectorButton = saveAgDirectorButton;
    }

    public RichCommandButton getSaveAgDirectorButton() {
        return this.saveAgDirectorButton;
    }

    public void setAgencyRefereeTable(RichTable agencyRefereeTable) {
        this.agencyRefereeTable = agencyRefereeTable;
    }

    public RichTable getAgencyRefereeTable() {
        return this.agencyRefereeTable;
    }

    public String saveAgencyReferees() {
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agencyRefereePop').show(hints);");
        this.refereeName.setValue((Object)"");
        this.refereephAddress.setValue((Object)"");
        this.refereePostAddress.setValue((Object)"");
        this.refereeIDNo.setValue((Object)"");
        this.refereeEmail.setValue((Object)"");
        this.refereeTelNo.setValue((Object)"");
        this.saveRefereeAgButton.setText("Save");
        return null;
    }

    public String updateAgencyReferees() {
        Object key2 = this.agencyRefereeTable.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No Record Selected.");
            return null;
        }
        this.refereeId.setValue(nodeBinding.getAttribute("id"));
        this.refereeName.setValue(nodeBinding.getAttribute("name"));
        this.refereephAddress.setValue(nodeBinding.getAttribute("phyaddress"));
        this.refereePostAddress.setValue(nodeBinding.getAttribute("postaddress"));
        this.refereeIDNo.setValue(nodeBinding.getAttribute("idno"));
        this.refereeEmail.setValue(nodeBinding.getAttribute("email"));
        this.refereeTelNo.setValue(nodeBinding.getAttribute("telno"));
        this.saveRefereeAgButton.setText("Update");
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agencyRefereePop').show(hints);");
        return null;
    }

    public String deleteAgencyReferee() {
        Object key2 = this.agencyRefereeTable.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No record selected.");
            return null;
        }
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:confirmDeleteAgencyRefereePop').show(hints);");
        return null;
    }

    public String saveRefereeAgencies() {
        DBConnector connection = new DBConnector();
        String query = "begin TQC_AGENCIES_PKG.TQC_AGENCY_REFEREES_PRC(?,?,?);end;";
        ARRAY array = null;
        OracleConnection conn = null;
        OracleCallableStatement stmt = null;
        if (this.saveRefereeAgButton.getText().equals("Save")) {
            AgencyReferee regbean = new AgencyReferee();
            LinkedList<AgencyReferee> reglist = new LinkedList<AgencyReferee>();
            regbean.setAREF_CODE(null);
            regbean.setAREF_AGN_CODE(new BigDecimal((String)this.session.getAttribute("agencyCode")));
            regbean.setAREF_NAME((String)this.refereeName.getValue());
            regbean.setAREF_PHYSICAL_ADDRESS((String)this.refereephAddress.getValue());
            regbean.setAREF_POSTAL_ADDRESS((String)this.refereePostAddress.getValue());
            regbean.setAREF_ID_NO((String)this.refereeIDNo.getValue());
            regbean.setAREF_EMAIL_ADDRESS((String)this.refereeEmail.getValue());
            regbean.setAREF_TEL((String)this.refereeTelNo.getValue());
            reglist.add(regbean);
            try {
                conn = connection.getDatabaseConnection();
                stmt = (OracleCallableStatement)conn.prepareCall(query);
                ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor((String)"TQC_AGENCY_REFEREES_TAB", (Connection)conn);
                array = new ARRAY(descriptor, (Connection)conn, (Object)reglist.toArray());
                stmt.setString(1, "A");
                stmt.setArray(2, (Array)array);
                stmt.registerOutParameter(3, 12);
                stmt.execute();
                stmt.close();
                conn.commit();
                conn.close();
                ADFUtils.findIterator((String)"findAgentsRefereesIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.agencyRefereeTable);
                String message = "New Record ADDED Successfully!";
                GlobalCC.INFORMATIONREPORTING((String)message);
            }
            catch (Exception e) {
                GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
            }
        } else if (this.saveRefereeAgButton.getText().equals("Update")) {
            AgencyReferee regbean = new AgencyReferee();
            LinkedList<AgencyReferee> reglist = new LinkedList<AgencyReferee>();
            regbean.setAREF_CODE(new BigDecimal((String)this.refereeId.getValue()));
            regbean.setAREF_AGN_CODE(new BigDecimal((String)this.session.getAttribute("agencyCode")));
            regbean.setAREF_NAME((String)this.refereeName.getValue());
            regbean.setAREF_PHYSICAL_ADDRESS((String)this.refereephAddress.getValue());
            regbean.setAREF_POSTAL_ADDRESS((String)this.refereePostAddress.getValue());
            regbean.setAREF_ID_NO((String)this.refereeIDNo.getValue());
            regbean.setAREF_EMAIL_ADDRESS((String)this.refereeEmail.getValue());
            regbean.setAREF_TEL((String)this.refereeTelNo.getValue());
            reglist.add(regbean);
            try {
                conn = connection.getDatabaseConnection();
                stmt = (OracleCallableStatement)conn.prepareCall(query);
                ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor((String)"TQC_AGENCY_REFEREES_TAB", (Connection)conn);
                array = new ARRAY(descriptor, (Connection)conn, (Object)reglist.toArray());
                stmt.setString(1, "E");
                stmt.setArray(2, (Array)array);
                stmt.registerOutParameter(3, 12);
                stmt.execute();
                stmt.close();
                conn.commit();
                conn.close();
                ADFUtils.findIterator((String)"findAgentsRefereesIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.agencyRefereeTable);
                String message = "Record UPDATED Successfully!";
                GlobalCC.INFORMATIONREPORTING((String)message);
            }
            catch (Exception e) {
                GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
            }
        }
        GlobalCC.dismissPopUp((String)"pt1", (String)"agencyRefereePop");
        return null;
    }

    public void setSaveRefereeAgButton(RichCommandButton saveRefereeAgButton) {
        this.saveRefereeAgButton = saveRefereeAgButton;
    }

    public RichCommandButton getSaveRefereeAgButton() {
        return this.saveRefereeAgButton;
    }

    public void setRefereeId(RichInputText refereeId) {
        this.refereeId = refereeId;
    }

    public RichInputText getRefereeId() {
        return this.refereeId;
    }

    public void setRefereeName(RichInputText refereeName) {
        this.refereeName = refereeName;
    }

    public RichInputText getRefereeName() {
        return this.refereeName;
    }

    public void setRefereephAddress(RichInputText refereephAddress) {
        this.refereephAddress = refereephAddress;
    }

    public RichInputText getRefereephAddress() {
        return this.refereephAddress;
    }

    public void setRefereePostAddress(RichInputText refereePostAddress) {
        this.refereePostAddress = refereePostAddress;
    }

    public RichInputText getRefereePostAddress() {
        return this.refereePostAddress;
    }

    public void setRefereeIDNo(RichInputText refereeIDNo) {
        this.refereeIDNo = refereeIDNo;
    }

    public RichInputText getRefereeIDNo() {
        return this.refereeIDNo;
    }

    public void setRefereeEmail(RichInputText refereeEmail) {
        this.refereeEmail = refereeEmail;
    }

    public RichInputText getRefereeEmail() {
        return this.refereeEmail;
    }

    public void setRefereeTelNo(RichInputText refereeTelNo) {
        this.refereeTelNo = refereeTelNo;
    }

    public RichInputText getRefereeTelNo() {
        return this.refereeTelNo;
    }

    public void setSelectValues(List<SelectItem> selectValues) {
        this.selectValues = selectValues;
    }

    public List<SelectItem> getSelectValues() {
        return this.selectValues;
    }

    public void setDisplayValue(List<String> displayValue) {
        this.displayValue = displayValue;
    }

    public List<String> getDisplayValue() {
        return this.displayValue;
    }

    public void setSystemShuttle(RichSelectManyShuttle systemShuttle) {
        this.systemShuttle = systemShuttle;
    }

    public RichSelectManyShuttle getSystemShuttle() {
        return this.systemShuttle;
    }

    public void updateAgentSystems(ValueChangeEvent valueChangeEvent) {
        DBConnector datahandler = new DBConnector();
        OracleConnection conn = null;
        if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) {
            try {
                conn = datahandler.getDatabaseConnection();
                ArrayList myVals = (ArrayList)this.systemShuttle.getValue();
                ArrayList myVals2 = (ArrayList)this.systemSelectItem.getValue();
                String revokeQuery = "begin tqc_clients_pkg.unalloc_clnt_system(?,?); end;";
                String agencyCode = GlobalCC.checkNullValues((Object)this.session.getAttribute("agencyCode"));
                for (int v = 0; v < myVals2.size(); ++v) {
                    SelectItem select = (SelectItem)myVals2.get(v);
                    OracleCallableStatement cst = null;
                    String sampNum = GlobalCC.checkNullValues((Object)select.getValue());
                    cst = (OracleCallableStatement)conn.prepareCall(revokeQuery);
                    cst.setBigDecimal(1, new BigDecimal(agencyCode));
                    cst.setBigDecimal(2, new BigDecimal(sampNum));
                    cst.execute();
                }
                String query = "begin tqc_clients_pkg.alloc_clnt_system(?,?); end;";
                for (int k = 0; k < myVals.size(); ++k) {
                    OracleCallableStatement cst = null;
                    cst = (OracleCallableStatement)conn.prepareCall(query);
                    cst.setBigDecimal(1, new BigDecimal(agencyCode));
                    cst.setBigDecimal(2, new BigDecimal((String)myVals.get(k)));
                    cst.execute();
                }
                conn.close();
            }
            catch (Exception e) {
                GlobalCC.EXCEPTIONREPORTING((Exception)e);
            }
        }
    }

    public void setSystemSelectItem(UISelectItems systemSelectItem) {
        this.systemSelectItem = systemSelectItem;
    }

    public UISelectItems getSystemSelectItem() {
        return this.systemSelectItem;
    }

    public void setWebUsersTable(RichTable webUsersTable) {
        this.webUsersTable = webUsersTable;
    }

    public RichTable getWebUsersTable() {
        return this.webUsersTable;
    }

    public String addWebUserAction() {
        if (this.txtAgencyCode.getValue() == null || this.txtAgencyCode.getValue().equals("")) {
            GlobalCC.INFORMATIONREPORTING((String)"You need to first select an Agent!");
        } else {
            ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
            erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:webUserPop').show(hints);");
            this.webusername.setValue((Object)"");
            this.webfullNames.setValue((Object)"");
            this.webEmail.setValue((Object)"");
            this.webPersonalRank.setValue((Object)"");
            this.webAllowLogin.setValue((Object)"");
            this.webUserStatus.setValue((Object)"");
            this.webReset.setValue((Object)"");
            this.webPassword.setValue((Object)"");
            this.saveWebUsersButton.setText("Save");
        }
        return null;
    }

    public String addEmbWebUserAction() {
        if (this.session.getAttribute("countryCode") == null) {
            GlobalCC.INFORMATIONREPORTING((String)"You need to first select a country first!");
            return null;
        }
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:webUserPop').show(hints);");
        this.webusername.setValue((Object)"");
        this.webfullNames.setValue((Object)"");
        this.webEmail.setValue((Object)"");
        this.webPersonalRank.setValue((Object)"");
        this.webAllowLogin.setValue((Object)"");
        this.webUserStatus.setValue((Object)"");
        this.webReset.setValue((Object)"");
        this.webPassword.setValue((Object)"");
        this.webUserId.setValue((Object)null);
        return null;
    }

    public String updateWebUserAction() {
        Object key2 = this.webUsersTable.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No record selected.");
            return null;
        }
        this.webUserId.setValue(nodeBinding.getAttribute("id"));
        this.webusername.setValue(nodeBinding.getAttribute("username"));
        this.webfullNames.setValue(nodeBinding.getAttribute("name"));
        this.webEmail.setValue(nodeBinding.getAttribute("email"));
        this.webPersonalRank.setValue(nodeBinding.getAttribute("personalrank"));
        this.webAllowLogin.setValue(nodeBinding.getAttribute("allowlogin"));
        this.webUserStatus.setValue(nodeBinding.getAttribute("status"));
        this.webReset.setValue(nodeBinding.getAttribute("reset"));
        this.webPassword.setValue((Object)"");
        this.saveWebUsersButton.setText("Update");
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:webUserPop').show(hints);");
        return null;
    }

    public String updateEmbWebUserAction() {
        if (this.session.getAttribute("countryCode") == null) {
            GlobalCC.INFORMATIONREPORTING((String)"You need to first select a country first!");
            return null;
        }
        Object key2 = this.webUsersTable.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No record selected.");
            return null;
        }
        this.webUserId.setValue(nodeBinding.getAttribute("id"));
        this.webusername.setValue(nodeBinding.getAttribute("username"));
        this.webfullNames.setValue(nodeBinding.getAttribute("name"));
        this.webEmail.setValue(nodeBinding.getAttribute("email"));
        this.webPersonalRank.setValue(nodeBinding.getAttribute("personalrank"));
        this.webAllowLogin.setValue(nodeBinding.getAttribute("allowlogin"));
        this.webUserStatus.setValue(nodeBinding.getAttribute("status"));
        this.webReset.setValue(nodeBinding.getAttribute("reset"));
        this.webPassword.setValue((Object)"");
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:webUserPop').show(hints);");
        return null;
    }

    public String deleteWebUserAction() {
        Object key2 = this.webUsersTable.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No record selected.");
            return null;
        }
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:confirmDeleteAgencyWebAccPop').show(hints);");
        return null;
    }

    public String deleteEmbWebUserAction() {
        if (this.session.getAttribute("countryCode") == null) {
            GlobalCC.INFORMATIONREPORTING((String)"You need to first select a country first!");
            return null;
        }
        Object key2 = this.webUsersTable.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No record selected.");
            return null;
        }
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:confirmDeleteWebAccPop').show(hints);");
        return null;
    }

    public String saveWebUsersOperation() {
        BigDecimal sysCode = new BigDecimal("0");
        if (this.session.getAttribute("sysCode") != null) {
            sysCode = new BigDecimal(this.session.getAttribute("sysCode").toString());
        }
        if (this.txtAgencyCode.getValue() == null || this.txtAgencyCode.getValue().equals("")) {
            GlobalCC.INFORMATIONREPORTING((String)"You need to first select an Agent!");
        } else {
            DBConnector connection = new DBConnector();
            String query = "begin TQC_AGENCIES_PKG.TQC_ACCOUNT_CONTACTS_PRC(?,?,?,?,?);end;";
            ARRAY array = null;
            OracleConnection conn = null;
            OracleCallableStatement stmt = null;
            String currentUser = (String)this.session.getAttribute("Username");
            if (this.saveWebUsersButton.getText().equals("Save")) {
                WebUser regbean = new WebUser();
                LinkedList<WebUser> reglist = new LinkedList<WebUser>();
                regbean.setACCC_CODE(null);
                regbean.setACCC_AGN_CODE(new BigDecimal((String)this.txtAgencyCode.getValue()));
                regbean.setACCC_USERNAME((String)this.webusername.getValue());
                regbean.setACCC_NAME((String)this.webfullNames.getValue());
                regbean.setACCC_TEL((String)this.telNo.getValue());
                regbean.setACCC_EMAIL_ADDR((String)this.webEmail.getValue());
                regbean.setACCC_PERSONEL_RANK((String)this.webPersonalRank.getValue());
                regbean.setACCC_CREATED_BY(currentUser);
                regbean.setACCC_LOGIN_ALLOWED((String)this.webAllowLogin.getValue());
                regbean.setACCC_STATUS((String)this.webUserStatus.getValue());
                regbean.setACCC_PWD_RESET((String)this.webReset.getValue());
                regbean.setACCC_PWD((String)this.webPassword.getValue());
                reglist.add(regbean);
                try {
                    conn = connection.getDatabaseConnection();
                    stmt = (OracleCallableStatement)conn.prepareCall(query);
                    ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor((String)"TQC_ACCOUNT_CONTACTS_TAB", (Connection)conn);
                    array = new ARRAY(descriptor, (Connection)conn, (Object)reglist.toArray());
                    stmt.setString(1, "A");
                    stmt.setArray(2, (Array)array);
                    stmt.setString(3, currentUser);
                    stmt.setBigDecimal(5, sysCode);
                    stmt.registerOutParameter(4, 12);
                    stmt.execute();
                    stmt.close();
                    conn.commit();
                    conn.close();
                    GlobalCC.dismissPopUp((String)"pt1", (String)"webUserPop");
                    String message = "Record ADDED Successfully!";
                    GlobalCC.INFORMATIONREPORTING((String)message);
                }
                catch (Exception e) {
                    GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
                }
            } else if (this.saveWebUsersButton.getText().equals("Update")) {
                WebUser regbean = new WebUser();
                LinkedList<WebUser> reglist = new LinkedList<WebUser>();
                regbean.setACCC_CODE(new BigDecimal((String)this.webUserId.getValue()));
                regbean.setACCC_AGN_CODE(new BigDecimal((String)this.session.getAttribute("agencyCode")));
                regbean.setACCC_USERNAME((String)this.webusername.getValue());
                regbean.setACCC_NAME((String)this.webfullNames.getValue());
                regbean.setACCC_EMAIL_ADDR((String)this.webEmail.getValue());
                regbean.setACCC_PERSONEL_RANK((String)this.webPersonalRank.getValue());
                regbean.setACCC_CREATED_BY(currentUser);
                regbean.setACCC_LOGIN_ALLOWED((String)this.webAllowLogin.getValue());
                regbean.setACCC_STATUS((String)this.webUserStatus.getValue());
                regbean.setACCC_PWD_RESET((String)this.webReset.getValue());
                regbean.setACCC_PWD((String)this.webPassword.getValue());
                reglist.add(regbean);
                try {
                    conn = connection.getDatabaseConnection();
                    stmt = (OracleCallableStatement)conn.prepareCall(query);
                    ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor((String)"TQC_ACCOUNT_CONTACTS_TAB", (Connection)conn);
                    array = new ARRAY(descriptor, (Connection)conn, (Object)reglist.toArray());
                    stmt.setString(1, "E");
                    stmt.setArray(2, (Array)array);
                    stmt.setString(3, currentUser);
                    stmt.setBigDecimal(5, sysCode);
                    stmt.registerOutParameter(4, 12);
                    stmt.execute();
                    stmt.close();
                    conn.commit();
                    conn.close();
                    GlobalCC.dismissPopUp((String)"pt1", (String)"webUserPop");
                    String message = "Record UPDATED Successfully!";
                    GlobalCC.INFORMATIONREPORTING((String)message);
                }
                catch (SQLException e) {
                    GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
                }
            }
            ADFUtils.findIterator((String)"findwebUserAccountsIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.webUsersTable);
        }
        return null;
    }

    public String saveEmbWebUsersOperation() {
        DBConnector connection = new DBConnector();
        String query = "begin TQC_AGENCIES_PKG.TQC_EMBASSY_CONTACTS_PRC(?,?,?,?);end;";
        ARRAY array = null;
        OracleConnection conn = null;
        OracleCallableStatement stmt = null;
        String currentUser = (String)this.session.getAttribute("Username");
        WebUser regbean = new WebUser();
        LinkedList<WebUser> reglist = new LinkedList<WebUser>();
        regbean.setACCC_CODE(this.webUserId.getValue() != null ? new BigDecimal(this.webUserId.getValue().toString()) : null);
        regbean.setACCC_AGN_CODE(new BigDecimal(this.session.getAttribute("countryCode").toString()));
        regbean.setACCC_USERNAME((String)this.webusername.getValue());
        regbean.setACCC_NAME((String)this.webfullNames.getValue());
        regbean.setACCC_EMAIL_ADDR((String)this.webEmail.getValue());
        regbean.setACCC_PERSONEL_RANK((String)this.webPersonalRank.getValue());
        regbean.setACCC_CREATED_BY(currentUser);
        regbean.setACCC_LOGIN_ALLOWED((String)this.webAllowLogin.getValue());
        regbean.setACCC_STATUS((String)this.webUserStatus.getValue());
        regbean.setACCC_PWD_RESET((String)this.webReset.getValue());
        regbean.setACCC_PWD((String)this.webPassword.getValue());
        reglist.add(regbean);
        try {
            conn = connection.getDatabaseConnection();
            stmt = (OracleCallableStatement)conn.prepareCall(query);
            ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor((String)"TQC_ACCOUNT_CONTACTS_TAB", (Connection)conn);
            array = new ARRAY(descriptor, (Connection)conn, (Object)reglist.toArray());
            stmt.setString(1, this.webUserId.getValue() != null ? "E" : "A");
            stmt.setArray(2, (Array)array);
            stmt.setString(3, currentUser);
            stmt.registerOutParameter(4, 12);
            stmt.execute();
            stmt.close();
            conn.commit();
            conn.close();
            GlobalCC.dismissPopUp((String)"pt1", (String)"webUserPop");
            String message = "Record ADDED Successfully!";
            GlobalCC.INFORMATIONREPORTING((String)message);
        }
        catch (Exception e) {
            GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
        }
        ADFUtils.findIterator((String)"findEmbassywebUserAccountsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.webUsersTable);
        return null;
    }

    public void setSaveWebUsersButton(RichCommandButton saveWebUsersButton) {
        this.saveWebUsersButton = saveWebUsersButton;
    }

    public RichCommandButton getSaveWebUsersButton() {
        return this.saveWebUsersButton;
    }

    public void setWebUserId(RichInputText webUserId) {
        this.webUserId = webUserId;
    }

    public RichInputText getWebUserId() {
        return this.webUserId;
    }

    public void setWebusername(RichInputText webusername) {
        this.webusername = webusername;
    }

    public RichInputText getWebusername() {
        return this.webusername;
    }

    public void setWebfullNames(RichInputText webfullNames) {
        this.webfullNames = webfullNames;
    }

    public RichInputText getWebfullNames() {
        return this.webfullNames;
    }

    public void setWebPassword(RichInputText webPassword) {
        this.webPassword = webPassword;
    }

    public RichInputText getWebPassword() {
        return this.webPassword;
    }

    public void setWebEmail(RichInputText webEmail) {
        this.webEmail = webEmail;
    }

    public RichInputText getWebEmail() {
        return this.webEmail;
    }

    public void setWebPersonalRank(RichInputText webPersonalRank) {
        this.webPersonalRank = webPersonalRank;
    }

    public RichInputText getWebPersonalRank() {
        return this.webPersonalRank;
    }

    public void setWebAllowLogin(RichSelectOneRadio webAllowLogin) {
        this.webAllowLogin = webAllowLogin;
    }

    public RichSelectOneRadio getWebAllowLogin() {
        return this.webAllowLogin;
    }

    public void setWebUserStatus(RichSelectOneChoice webUserStatus) {
        this.webUserStatus = webUserStatus;
    }

    public RichSelectOneChoice getWebUserStatus() {
        return this.webUserStatus;
    }

    public void setWebReset(RichSelectOneRadio webReset) {
        this.webReset = webReset;
    }

    public RichSelectOneRadio getWebReset() {
        return this.webReset;
    }

    public void setAccountTypeSelector(RichSelectOneChoice accountTypeSelector) {
        this.accountTypeSelector = accountTypeSelector;
    }

    public RichSelectOneChoice getAccountTypeSelector() {
        return this.accountTypeSelector;
    }

    public void setPanelAccountSystems(RichPanelBox panelAccountSystems) {
        this.panelAccountSystems = panelAccountSystems;
    }

    public RichPanelBox getPanelAccountSystems() {
        return this.panelAccountSystems;
    }

    public void setBtnCreateUpdateCurrentAgency(RichCommandButton btnCreateUpdateCurrentAgency) {
        this.btnCreateUpdateCurrentAgency = btnCreateUpdateCurrentAgency;
    }

    public RichCommandButton getBtnCreateUpdateCurrentAgency() {
        return this.btnCreateUpdateCurrentAgency;
    }

    public String processOpenAgencyReport() {
        return null;
    }

    public void setPanelDetailSystems(RichPanelBox panelDetailSystems) {
        this.panelDetailSystems = panelDetailSystems;
    }

    public RichPanelBox getPanelDetailSystems() {
        return this.panelDetailSystems;
    }

    public void setTxtSelectedUserSystemCode(RichInputText txtSelectedUserSystemCode) {
        this.txtSelectedUserSystemCode = txtSelectedUserSystemCode;
    }

    public RichInputText getTxtSelectedUserSystemCode() {
        return this.txtSelectedUserSystemCode;
    }

    public void setBtnAddAccountSystem(RichCommandButton btnAddAccountSystem) {
        this.btnAddAccountSystem = btnAddAccountSystem;
    }

    public RichCommandButton getBtnAddAccountSystem() {
        return this.btnAddAccountSystem;
    }

    public void setBtnRemoveAccountSystem(RichCommandButton btnRemoveAccountSystem) {
        this.btnRemoveAccountSystem = btnRemoveAccountSystem;
    }

    public RichCommandButton getBtnRemoveAccountSystem() {
        return this.btnRemoveAccountSystem;
    }

    public String processAddAccountSystem() {
        boolean processStatusOK = true;
        if (this.session.getAttribute("agencyCode") == null || this.session.getAttribute("agencyCode") == "") {
            processStatusOK = false;
            GlobalCC.errorValueNotEntered((String)"You need to select an Account first.");
        }
        if (this.txtSelectedUserSystemCode.getValue() == null || this.txtSelectedUserSystemCode.getValue() == "") {
            processStatusOK = false;
            GlobalCC.errorValueNotEntered((String)"You need to select a System first.");
        }
        if (processStatusOK) {
            DBConnector connector = new DBConnector();
            OracleConnection connection = null;
            try {
                connection = connector.getDatabaseConnection();
                String query = "begin TQC_AGENCIES_PKG.grant_agent_system(?,?,?,?,?,?); end;";
                OracleCallableStatement statement = null;
                BigDecimal agencyCode = new BigDecimal(this.hiddenAccountCode.getValue().toString());
                BigDecimal userSystemCode = new BigDecimal(this.txtSelectedUserSystemCode.getValue().toString());
                statement = (OracleCallableStatement)connection.prepareCall(query);
                statement.setString(1, "A");
                statement.setBigDecimal(2, agencyCode);
                statement.setBigDecimal(3, userSystemCode);
                statement.setDate(4, null);
                statement.setDate(5, null);
                statement.setString(6, null);
                statement.execute();
                connection.close();
            }
            catch (Exception e) {
                GlobalCC.EXCEPTIONREPORTING((Exception)e);
            }
        }
        ADFUtils.findIterator((String)"fetchUnassignedAccountSystemsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.treeUnassignedSystems);
        ADFUtils.findIterator((String)"fetchAllAgencyAssignedSystemsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAssignedAgencySystems);
        this.txtSelectedUserSystemCode.setValue((Object)null);
        return null;
    }

    public String processRemoveAccountSystem() {
        boolean processStatusOK = true;
        if (this.session.getAttribute("agencyCode") == null || this.session.getAttribute("agencyCode") == "") {
            processStatusOK = false;
            GlobalCC.errorValueNotEntered((String)"You need to select an Account first.");
        }
        if (this.txtSelectedUserSystemCode.getValue() == null || this.txtSelectedUserSystemCode.getValue() == "") {
            processStatusOK = false;
            GlobalCC.errorValueNotEntered((String)"You need to select a System first.");
        }
        if (processStatusOK) {
            DBConnector connector = new DBConnector();
            OracleConnection connection = null;
            try {
                connection = connector.getDatabaseConnection();
                String query = "begin TQC_AGENCIES_PKG.revoke_agent_system(?,?); end;";
                OracleCallableStatement statement = null;
                statement = (OracleCallableStatement)connection.prepareCall(query);
                statement.setBigDecimal(1, new BigDecimal((String)this.session.getAttribute("agencyCode")));
                statement.setBigDecimal(2, new BigDecimal(this.txtSelectedUserSystemCode.getValue().toString()));
                statement.execute();
                connection.close();
            }
            catch (Exception e) {
                GlobalCC.EXCEPTIONREPORTING((Connection)connection, (Exception)e);
            }
        }
        this.txtSelectedUserSystemCode.setValue((Object)null);
        ADFUtils.findIterator((String)"fetchUnassignedAccountSystemsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.treeUnassignedSystems);
        ADFUtils.findIterator((String)"fetchAllAgencyAssignedSystemsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAssignedAgencySystems);
        return null;
    }

    public void setTreeUnassignedSystems(RichTree treeUnassignedSystems) {
        this.treeUnassignedSystems = treeUnassignedSystems;
    }

    public RichTree getTreeUnassignedSystems() {
        return this.treeUnassignedSystems;
    }

    public void setTreeAssignedSystems(RichTree treeAssignedSystems) {
        this.treeAssignedSystems = treeAssignedSystems;
    }

    public RichTree getTreeAssignedSystems() {
        return this.treeAssignedSystems;
    }

    public void unassignedAccountSystemSelectionListener(SelectionEvent selectionEvent) {
        RowKeySet keys;
        if (selectionEvent.getAddedSet() != selectionEvent.getRemovedSet() && (keys = selectionEvent.getAddedSet()) != null && keys.getSize() > 0) {
            for (Object treeRowKey : keys) {
                this.treeUnassignedSystems.setRowKey(treeRowKey);
                JUCtrlHierNodeBinding nd = (JUCtrlHierNodeBinding)this.treeUnassignedSystems.getRowData();
                this.txtSelectedUserSystemCode.setValue(nd.getRow().getAttribute("sysCode"));
            }
        }
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.panelDetailSystems);
    }

    public void assignedAccountSystemSelectionListener(SelectionEvent selectionEvent) {
        RowKeySet keys;
        if (selectionEvent.getAddedSet() != selectionEvent.getRemovedSet() && (keys = selectionEvent.getAddedSet()) != null && keys.getSize() > 0) {
            for (Object treeRowKey : keys) {
                this.treeAssignedSystems.setRowKey(treeRowKey);
                JUCtrlHierNodeBinding nd = (JUCtrlHierNodeBinding)this.treeAssignedSystems.getRowData();
                this.txtSelectedUserSystemCode.setValue(nd.getRow().getAttribute("sysCode"));
            }
        }
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.panelDetailSystems);
    }

    public void processCommissionChanged(ValueChangeEvent valueChangeEvent) {
        String commValue;
        if (valueChangeEvent.getNewValue() == valueChangeEvent.getOldValue() || (commValue = GlobalCC.checkNullValues((Object)this.txtCommAllowed.getValue())).equals("Y") || commValue.equals("N")) {
            // empty if block
        }
    }

    public void setTblAgencyInfo(RichTable tblAgencyInfo) {
        this.tblAgencyInfo = tblAgencyInfo;
    }

    public RichTable getTblAgencyInfo() {
        return this.tblAgencyInfo;
    }

    public void setTextToShow(RichOutputText textToShow) {
        this.textToShow = textToShow;
    }

    public RichOutputText getTextToShow() {
        return this.textToShow;
    }

    public void showMessagePopup(String msgToDisplay) {
        this.textToShow.setValue((Object)null);
        this.textToShow.setValue((Object)msgToDisplay);
        FacesContext context = FacesContext.getCurrentInstance();
        RichSelectOneChoice source = this.accountTypeSelector;
        String alignId = source.getClientId(context);
        String popupId = "pt1:ServerMessage";
        StringBuilder script = new StringBuilder();
        script.append("var popup = AdfPage.PAGE.findComponent('").append(popupId).append("'); ").append("if (!popup.isPopupVisible()) { ").append("var hints = {}; ").append("hints[AdfRichPopup.HINT_ALIGN_ID] = '").append(alignId).append("'; ").append("hints[AdfRichPopup.HINT_ALIGN] = AdfRichPopup.ALIGN_AFTER_START; ").append("popup.show(hints);}");
        ExtendedRenderKitService erks = (ExtendedRenderKitService)Service.getService((Object)context.getRenderKit(), (Class)ExtendedRenderKitService.class);
        erks.addScript(context, script.toString());
    }

    public void setHiddenAccountCode(RichInputText hiddenAccountCode) {
        this.hiddenAccountCode = hiddenAccountCode;
    }

    public RichInputText getHiddenAccountCode() {
        return this.hiddenAccountCode;
    }

    public void setTblAgencyAccounts(RichTable tblAgencyAccounts) {
        this.tblAgencyAccounts = tblAgencyAccounts;
    }

    public RichTable getTblAgencyAccounts() {
        return this.tblAgencyAccounts;
    }

    public void clearAgencyAccountFields() {
        this.txtAccountCode.setValue((Object)null);
        this.txtAccShortDesc.setValue((Object)null);
        this.txtAccName.setValue((Object)null);
        this.txtAccAgencyCode.setValue((Object)this.session.getAttribute("agencyCode").toString());
        this.txtAccCreatedBy.setValue((Object)null);
        this.txtAccDateCreated.setValue((Object)null);
        this.txtAccRemarks.setValue((Object)null);
        this.txtAccWef.setValue((Object)null);
        this.txtAccWet.setValue((Object)null);
        this.txtDivCode.setValue((Object)null);
        this.txtDivName.setValue((Object)null);
    }

    public String actionNewAgencyAccount() {
        if (this.session.getAttribute("agencyCode") == null) {
            GlobalCC.INFORMATIONREPORTING((String)"FIRST SELECT AGENCY ");
            return null;
        }
        this.clearAgencyAccountFields();
        this.btnSaveUpdateAgencyAccount.setText("Save");
        this.session.setAttribute("accountsAction", (Object)"A");
        if (this.session.getAttribute("agencyCode") == null) {
            GlobalCC.INFORMATIONREPORTING((String)"SELECT AGENCY FIRST");
        }
        this.genAccLabel.setVisible(true);
        this.genAccNoSelect.setVisible(true);
        this.genAcSelectYes.setVisible(true);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.agentAccountPop);
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agencyAccountPopup').show(hints);");
        return null;
    }

    public String actionEditAgencyAccount() {
        Object key2 = this.tblAgencyAccounts.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No Record selected.");
            return null;
        }
        this.session.setAttribute("accountsAction", (Object)"E");
        this.txtAccountCode.setValue(nodeBinding.getAttribute("code"));
        this.txtAccShortDesc.setValue(nodeBinding.getAttribute("shortDesc"));
        this.txtAccName.setValue(nodeBinding.getAttribute("name"));
        this.txtAccAgencyCode.setValue(nodeBinding.getAttribute("agentCode"));
        this.txtAccCreatedBy.setValue(nodeBinding.getAttribute("createdBy"));
        this.txtAccDateCreated.setValue(nodeBinding.getAttribute("dateCreated"));
        this.txtAgencyAccStatus.setValue(nodeBinding.getAttribute("status"));
        this.txtAccRemarks.setValue(nodeBinding.getAttribute("remarks"));
        this.txtAccWef.setValue(nodeBinding.getAttribute("wef"));
        this.txtAccWet.setValue(nodeBinding.getAttribute("wet"));
        this.txtDivCode.setValue(nodeBinding.getAttribute("divCode"));
        this.txtDivName.setValue(nodeBinding.getAttribute("divName"));
        this.session.setAttribute("accountsDivCode", nodeBinding.getAttribute("divCode"));
        this.genAccLabel.setVisible(true);
        this.genAccNoSelect.setVisible(true);
        this.genAcSelectYes.setVisible(true);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.agentAccountPop);
        this.btnSaveUpdateAgencyAccount.setText("Edit");
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agencyAccountPopup').show(hints);");
        return null;
    }

    public String actionDeleteAgencyAccount() {
        Object key2 = this.tblAgencyAccounts.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No record selected.");
            return null;
        }
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:confirmDeleteAgencyAccountPop').show(hints);");
        return null;
    }

    public void setTxtAccountCode(RichInputText txtAccountCode) {
        this.txtAccountCode = txtAccountCode;
    }

    public RichInputText getTxtAccountCode() {
        return this.txtAccountCode;
    }

    public void setTxtAccShortDesc(RichInputText txtAccShortDesc) {
        this.txtAccShortDesc = txtAccShortDesc;
    }

    public RichInputText getTxtAccShortDesc() {
        return this.txtAccShortDesc;
    }

    public void setTxtAccName(RichInputText txtAccName) {
        this.txtAccName = txtAccName;
    }

    public RichInputText getTxtAccName() {
        return this.txtAccName;
    }

    public void setTxtAccAgencyCode(RichInputText txtAccAgencyCode) {
        this.txtAccAgencyCode = txtAccAgencyCode;
    }

    public RichInputText getTxtAccAgencyCode() {
        return this.txtAccAgencyCode;
    }

    public void setTxtAccCreatedBy(RichInputText txtAccCreatedBy) {
        this.txtAccCreatedBy = txtAccCreatedBy;
    }

    public RichInputText getTxtAccCreatedBy() {
        return this.txtAccCreatedBy;
    }

    public void setTxtAccDateCreated(RichInputDate txtAccDateCreated) {
        this.txtAccDateCreated = txtAccDateCreated;
    }

    public RichInputDate getTxtAccDateCreated() {
        return this.txtAccDateCreated;
    }

    public void setTxtAgencyAccStatus(RichSelectOneChoice txtAgencyAccStatus) {
        this.txtAgencyAccStatus = txtAgencyAccStatus;
    }

    public RichSelectOneChoice getTxtAgencyAccStatus() {
        return this.txtAgencyAccStatus;
    }

    public void setTxtAccRemarks(RichInputText txtAccRemarks) {
        this.txtAccRemarks = txtAccRemarks;
    }

    public RichInputText getTxtAccRemarks() {
        return this.txtAccRemarks;
    }

    public void setTxtAccWef(RichInputDate txtAccWef) {
        this.txtAccWef = txtAccWef;
    }

    public RichInputDate getTxtAccWef() {
        return this.txtAccWef;
    }

    public void setTxtAccWet(RichInputDate txtAccWet) {
        this.txtAccWet = txtAccWet;
    }

    public RichInputDate getTxtAccWet() {
        return this.txtAccWet;
    }

    public void setBtnSaveUpdateAgencyAccount(RichCommandButton btnSaveUpdateAgencyAccount) {
        this.btnSaveUpdateAgencyAccount = btnSaveUpdateAgencyAccount;
    }

    public RichCommandButton getBtnSaveUpdateAgencyAccount() {
        return this.btnSaveUpdateAgencyAccount;
    }

    public String actionSaveUpdateAgencyAccount() {
        if (this.btnSaveUpdateAgencyAccount.getText().equals("Edit")) {
            this.actionUpdateAgencyAccount();
        } else {
            String accCode = GlobalCC.checkNullValues((Object)this.txtAccountCode.getValue());
            String accShtDesc = GlobalCC.checkNullValues((Object)this.txtAccShortDesc.getValue());
            String accName = GlobalCC.checkNullValues((Object)this.txtAccName.getValue());
            String accAgencyCode = GlobalCC.checkNullValues((Object)this.txtAccAgencyCode.getValue());
            String accCreatedBy = GlobalCC.checkNullValues((Object)this.txtAccCreatedBy.getValue());
            String accDateCreated = GlobalCC.checkNullValues((Object)this.txtAccDateCreated.getValue());
            String accStatus = GlobalCC.checkNullValues((Object)this.txtAgencyAccStatus.getValue());
            String accRemarks = GlobalCC.checkNullValues((Object)this.txtAccRemarks.getValue());
            String accWef = GlobalCC.checkNullValues((Object)this.txtAccWef.getValue());
            String accWet = GlobalCC.checkNullValues((Object)this.txtAccWet.getValue());
            String divCode = GlobalCC.checkNullValues((Object)this.txtDivCode.getValue());
            if (this.txtAgencyPIN.isShowRequired() && this.txtAgencyPIN.getValue() == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please select the agent Pin");
                return null;
            }
            if (this.txtAgencyIDNum.isShowRequired() && this.txtAgencyIDNum.getValue() == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please select the agent Id");
                return null;
            }
            if (this.txtBranchUnits.isShowRequired() && this.txtBranchUnits.getValue() == null) {
                GlobalCC.INFORMATIONREPORTING((String)"Please select Branch Unit");
                return null;
            }
            if (divCode == null && new Rendering().isAGENT_DIVISION_NAME_REQUIRED()) {
                GlobalCC.INFORMATIONREPORTING((String)"Error Select A Division");
                return null;
            }
            if (accName == null) {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Name is Empty");
                return null;
            }
            if (accWef == null) {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: WEF date is missing");
                return null;
            }
            if (accStatus == null) {
                GlobalCC.errorValueNotEntered((String)"Error Value Missing: Select a status");
                return null;
            }
            String Query = "begin TQC_AGENCIES_PKG.create_agency_account(?,?,?,?,?,?,?,?,?,?,?,?); end;";
            DBConnector connector = new DBConnector();
            OracleCallableStatement cst = null;
            OracleConnection conn = null;
            try {
                conn = connector.getDatabaseConnection();
                cst = (OracleCallableStatement)conn.prepareCall(Query);
                SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
                java.util.Date newWefDate = new java.util.Date();
                if (this.txtAccWef.getValue() != null && !this.txtAccWef.getValue().equals("")) {
                    String date1 = df.format(this.txtAccWef.getValue());
                    newWefDate = df.parse(date1);
                }
                java.util.Date newWetDate = null;
                if (this.txtAccWet.getValue() != null && !this.txtAccWet.getValue().equals("")) {
                    String date2 = df.format(this.txtAccWet.getValue());
                    newWetDate = df.parse(date2);
                }
                cst.setString(1, "A");
                cst.setString(2, null);
                cst.setString(3, accShtDesc);
                cst.setString(4, accName);
                cst.setBigDecimal(5, new BigDecimal(this.session.getAttribute("agencyCode").toString()));
                cst.setString(6, this.session.getAttribute("Username").toString());
                cst.setDate(7, new Date(new java.util.Date().getTime()));
                cst.setString(8, accStatus);
                cst.setString(9, accRemarks);
                cst.setDate(10, newWefDate == null ? null : new Date(newWefDate.getTime()));
                cst.setDate(11, newWetDate == null ? null : new Date(newWetDate.getTime()));
                cst.setBigDecimal(12, divCode == null ? null : new BigDecimal(divCode));
                cst.execute();
                cst.close();
                conn.commit();
                conn.close();
                ADFUtils.findIterator((String)"fetchAgencyAccountsIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAgencyAccounts);
                ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
                erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agencyAccountPopup').hide(hints);");
                String message = "Agency Account ADDED Successfully!";
                GlobalCC.INFORMATIONREPORTING((String)message);
            }
            catch (Exception e) {
                GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
            }
        }
        return null;
    }

    public String actionUpdateAgencyAccount() {
        String accCode = GlobalCC.checkNullValues((Object)this.txtAccountCode.getValue());
        String accShtDesc = GlobalCC.checkNullValues((Object)this.txtAccShortDesc.getValue());
        String accName = GlobalCC.checkNullValues((Object)this.txtAccName.getValue());
        String accAgencyCode = GlobalCC.checkNullValues((Object)this.txtAccAgencyCode.getValue());
        String accCreatedBy = GlobalCC.checkNullValues((Object)this.txtAccCreatedBy.getValue());
        String accDateCreated = GlobalCC.checkNullValues((Object)this.txtAccDateCreated.getValue());
        String accStatus = GlobalCC.checkNullValues((Object)this.txtAgencyAccStatus.getValue());
        String accRemarks = GlobalCC.checkNullValues((Object)this.txtAccRemarks.getValue());
        String accWef = GlobalCC.checkNullValues((Object)this.txtAccWef.getValue());
        String accWet = GlobalCC.checkNullValues((Object)this.txtAccWet.getValue());
        String divCode = GlobalCC.checkNullValues((Object)this.txtDivCode.getValue());
        if (accCode == null) {
            GlobalCC.errorValueNotEntered((String)"Error Value Missing: Code is Empty");
            return null;
        }
        if (accShtDesc == null) {
            GlobalCC.errorValueNotEntered((String)"Error Value Missing: Short Description is Empty");
            return null;
        }
        if (accName == null) {
            GlobalCC.errorValueNotEntered((String)"Error Value Missing: Name is Empty");
            return null;
        }
        if (accWef == null) {
            GlobalCC.errorValueNotEntered((String)"Error Value Missing: WEF date is missing");
            return null;
        }
        if (accStatus == null) {
            GlobalCC.errorValueNotEntered((String)"Error Value Missing: Select a status");
            return null;
        }
        String Query = "begin TQC_AGENCIES_PKG.create_agency_account(?,?,?,?,?,?,?,?,?,?,?,?); end;";
        DBConnector connector = new DBConnector();
        OracleCallableStatement cst = null;
        OracleConnection conn = null;
        try {
            conn = connector.getDatabaseConnection();
            cst = (OracleCallableStatement)conn.prepareCall(Query);
            SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
            java.util.Date newWefDate = new java.util.Date();
            if (this.txtAccWef.getValue() != null && !this.txtAccWef.getValue().equals("")) {
                String date1 = df.format(this.txtAccWef.getValue());
                newWefDate = df.parse(date1);
            }
            java.util.Date newWetDate = null;
            if (this.txtAccWet.getValue() != null && !this.txtAccWet.getValue().equals("")) {
                String date2 = df.format(this.txtAccWet.getValue());
                newWetDate = df.parse(date2);
            }
            cst.setString(1, "E");
            cst.setString(2, accCode);
            cst.setString(3, accShtDesc);
            cst.setString(4, accName);
            cst.setBigDecimal(5, new BigDecimal(this.session.getAttribute("agencyCode").toString()));
            cst.setString(6, this.session.getAttribute("Username").toString());
            cst.setDate(7, new Date(new java.util.Date().getTime()));
            cst.setString(8, accStatus);
            cst.setString(9, accRemarks);
            cst.setDate(10, newWefDate == null ? null : new Date(newWefDate.getTime()));
            cst.setDate(11, newWetDate == null ? null : new Date(newWetDate.getTime()));
            cst.setBigDecimal(12, divCode == null ? null : new BigDecimal(divCode));
            cst.execute();
            cst.close();
            conn.commit();
            conn.close();
            ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
            erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agencyAccountPopup').hide(hints);");
            String message = "Agency Account UPDATED Successfully!";
            GlobalCC.INFORMATIONREPORTING((String)message);
            ADFUtils.findIterator((String)"fetchAgencyAccountsIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAgencyAccounts);
        }
        catch (Exception e) {
            GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
        }
        return null;
    }

    public void setTblGlAccounts(RichTable tblGlAccounts) {
        this.tblGlAccounts = tblGlAccounts;
    }

    public RichTable getTblGlAccounts() {
        return this.tblGlAccounts;
    }

    public String actionAcceptGlAccount() {
        Object key2 = this.tblGlAccounts.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding != null) {
            this.txtAgencyAccountNumber.setValue(nodeBinding.getAttribute("accNumber"));
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencyAccountNumber);
        }
        GlobalCC.dismissPopUp((String)"pt1", (String)"glAccountsPop");
        return null;
    }

    public String actionShowGlAccounts() {
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:glAccountsPop').show(hints);");
        return null;
    }

    public void setTxtDivCode(RichInputText txtDivCode) {
        this.txtDivCode = txtDivCode;
    }

    public RichInputText getTxtDivCode() {
        return this.txtDivCode;
    }

    public void divisionSelected(DialogEvent dialogEvent) {
          if (dialogEvent.getOutcome() == DialogEvent.Outcome.ok) {
                      DCIteratorBinding dciter =
                          ADFUtils.findIterator("findDivisionsIterator");
                      RowKeySet set = divisionLov.getSelectedRowKeys();
                      Iterator rowKeySetIter = set.iterator();

                      while (rowKeySetIter.hasNext()) {
                          List l = (List)rowKeySetIter.next();
                          Key key = (Key)l.get(0);
                          dciter.setCurrentRowWithKey(key.toStringFormat(true));

                          Row r = dciter.getCurrentRow();
                          txtDivCode.setValue(r.getAttribute("DIV_CODE"));
                          txtDivName.setValue(r.getAttribute("DIV_NAME"));
                          AdfFacesContext.getCurrentInstance().addPartialTarget(txtDivCode);
                          AdfFacesContext.getCurrentInstance().addPartialTarget(txtDivName);
                          session.setAttribute("accountsDivCode",
                                               r.getAttribute("DIV_CODE"));
                      }
                  }
    }

    public String showAccountTypesPop() {
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:accountTypesPop').show(hints);");
        return null;
    }

    public String actionAcceptAccountTypes() {
        Object key2 = this.tblAccountTypesPop.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding != null) {
            String mainAccType = nodeBinding.getAttribute("code").toString();
            this.txtMainAccountTypeCode.setValue((Object)mainAccType);
            this.txtMainAccountType.setValue(nodeBinding.getAttribute("accountType"));
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtMainAccountType);
            this.session.setAttribute("accType", nodeBinding.getAttribute("code"));
            this.session.setAttribute("accountTypeCode", (Object)mainAccType);
            this.session.setAttribute("agencyCode", (Object)null);
            ADFUtils.findIterator((String)"fetchAllAccountAgenciesInfoOnlyIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAgencyInfo);
            this.refreshAgencyDetailSection();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.panelAgencyDetails);
            if (this.session.getAttribute("accountTypeCode").toString() == "25" || this.session.getAttribute("accountTypeCode").equals("25")) {
                this.txtAgent.setRendered(true);
                this.txtAgntLov.setRendered(true);
                this.txtAgentsAccountsLabel.setRendered(true);
                this.subAgntDetailsTab.setRendered(false);
            } else {
                this.txtAgent.setRendered(false);
                this.txtAgntLov.setRendered(false);
                this.txtAgentsAccountsLabel.setRendered(false);
            }
            if (this.session.getAttribute("accountTypeCode").toString() == "2" || this.session.getAttribute("accountTypeCode").equals("2")) {
                this.subAgntDetailsTab.setText("Sub Agents Details");
                this.subAgntDetailsTab.setRendered(true);
            }
            if (this.session.getAttribute("accountTypeCode").toString() == "3" || this.session.getAttribute("accountTypeCode").equals("3")) {
                this.subAgntDetailsTab.setText("Sub Agents Details");
                this.subAgntDetailsTab.setRendered(true);
            }
            if (this.session.getAttribute("accountTypeCode").toString() == "25" || this.session.getAttribute("accountTypeCode").equals("25")) {
                this.subAgntDetailsTab.setText("Sub Agents Details");
                this.subAgntDetailsTab.setRendered(true);
            }
            if (this.session.getAttribute("accountTypeCode").equals("4") || this.session.getAttribute("accountTypeCode").equals("7")) {
                this.txtAgent.setRendered(true);
                this.txtAgntLov.setRendered(true);
                this.txtAgentsAccountsLabel.setRendered(true);
                this.txtAgent.setLabel("Insurance Company");
                this.txtAgentsAccountsLabel.setLabel("Insurance Company");
                this.subAgntDetailsTab.setRendered(false);
            }
            if (this.session.getAttribute("accountTypeCode").equals("5") || this.session.getAttribute("accountTypeCode").equals("3")) {
                this.txtAgent.setRendered(false);
                this.txtAgntLov.setRendered(false);
                this.txtAgentsAccountsLabel.setRendered(false);
                this.subAgntDetailsTab.setText("Facre Accounts Details");
                this.subAgntDetailsTab.setRendered(true);
            }
            if (new Rendering().getInhouseIdPinMand()) {
                if (this.session.getAttribute("accountTypeCode").equals("16")) {
                    this.txtAgencyPIN.setShowRequired(true);
                    this.txtAgencyIDNum.setShowRequired(true);
                    this.txtBranchUnits.setShowRequired(true);
                } else {
                    this.txtAgencyPIN.setShowRequired(false);
                    this.txtAgencyIDNum.setShowRequired(false);
                    this.txtBranchUnits.setShowRequired(false);
                }
            }
            System.out.println("This is the account Code" + nodeBinding.getAttribute("code"));
            ADFUtils.findIterator((String)"fetchAgencyAccountsIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAgencyAccounts);
        }
        GlobalCC.dismissPopUp((String)"pt1", (String)"accountTypesPop");
        return null;
    }

    public String actionAcceptAccountTypeEdit() {
        Object key2 = this.tblAccountTypesPopEdit.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding != null) {
            String mainAccType = nodeBinding.getAttribute("code").toString();
            String Query = "begin TQC_SETUPS_PKG.agencies_editAccountType(?,?); end;";
            DBConnector connector = new DBConnector();
            OracleCallableStatement cst = null;
            OracleConnection conn = null;
            try {
                conn = connector.getDatabaseConnection();
                cst = (OracleCallableStatement)conn.prepareCall(Query);
                cst.setObject(1, this.session.getAttribute("agencyCode"));
                cst.setObject(2, nodeBinding.getAttribute("code"));
                cst.execute();
                conn.commit();
                cst.close();
                conn.close();
                ADFUtils.findIterator((String)"fetchAllAccountAgenciesInfoOnlyIterator").executeQuery();
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAgencyInfo);
                this.mainPanelTab.setVisible(false);
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.mainPanelTab);
                GlobalCC.INFORMATIONREPORTING((String)"Agency Account Type Changed Successfully.");
            }
            catch (Exception e) {
                GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
            }
        }
        GlobalCC.dismissPopUp((String)"pt1", (String)"accountTypeEdit");
        return null;
    }

    public void setTxtDivName(RichInputText txtDivName) {
        this.txtDivName = txtDivName;
    }

    public RichInputText getTxtDivName() {
        return this.txtDivName;
    }

    public String actionUpdateAgencySystem() {
        Object key2 = this.tblAssignedAgencySystems.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding == null) {
            GlobalCC.INFORMATIONREPORTING((String)"You need to select a Record to proceed.");
            return null;
        }
        this.txtAsysSysCode.setValue(nodeBinding.getAttribute("asysSysCode"));
        this.txtAsysAgnCode.setValue(nodeBinding.getAttribute("asysAgnCode"));
        this.txtAsysWef.setValue(nodeBinding.getAttribute("asysWef"));
        this.txtAsysWet.setValue(nodeBinding.getAttribute("asysWet"));
        this.txtAsysComments.setValue(nodeBinding.getAttribute("asysComment"));
        this.txtAsysOsdCode.setValue(nodeBinding.getAttribute("asysOsdCode"));
        this.txtAsysOsdId.setValue(nodeBinding.getAttribute("asysOsdId"));
        this.txtOsdName.setValue(nodeBinding.getAttribute("subdivisionName"));
        this.btnSaveUpdateAgencySystem.setText("Edit");
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agencySystemPop').show(hints);");
        return null;
    }

    public void setTblAssignedAgencySystems(RichTable tblAssignedAgencySystems) {
        this.tblAssignedAgencySystems = tblAssignedAgencySystems;
    }

    public RichTable getTblAssignedAgencySystems() {
        return this.tblAssignedAgencySystems;
    }

    public void tblAssignedAgencySystemsListener(SelectionEvent selectionEvent) {
        Object key2 = this.tblAssignedAgencySystems.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding != null) {
            this.session.setAttribute("sysCode", nodeBinding.getAttribute("sysCode"));
            this.txtSelectedUserSystemCode.setValue(nodeBinding.getAttribute("sysCode"));
            ADFUtils.findIterator((String)"fetchLowestOrgSubDivisionsBySystemIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblOrgSubDivisions);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.panelDetailSystems);
        }
    }

    public void setPanelAgencySystem(RichPanelBox panelAgencySystem) {
        this.panelAgencySystem = panelAgencySystem;
    }

    public RichPanelBox getPanelAgencySystem() {
        return this.panelAgencySystem;
    }

    public void setTxtAsysSysCode(RichInputText txtAsysSysCode) {
        this.txtAsysSysCode = txtAsysSysCode;
    }

    public RichInputText getTxtAsysSysCode() {
        return this.txtAsysSysCode;
    }

    public void setTxtAsysAgnCode(RichInputText txtAsysAgnCode) {
        this.txtAsysAgnCode = txtAsysAgnCode;
    }

    public RichInputText getTxtAsysAgnCode() {
        return this.txtAsysAgnCode;
    }

    public void setTxtAsysWef(RichInputDate txtAsysWef) {
        this.txtAsysWef = txtAsysWef;
    }

    public RichInputDate getTxtAsysWef() {
        return this.txtAsysWef;
    }

    public void setTxtAsysWet(RichInputDate txtAsysWet) {
        this.txtAsysWet = txtAsysWet;
    }

    public RichInputDate getTxtAsysWet() {
        return this.txtAsysWet;
    }

    public void setTxtAsysCode(RichInputText txtAsysCode) {
        this.txtAsysCode = txtAsysCode;
    }

    public RichInputText getTxtAsysCode() {
        return this.txtAsysCode;
    }

    public void setTxtAsysOsdCode(RichInputText txtAsysOsdCode) {
        this.txtAsysOsdCode = txtAsysOsdCode;
    }

    public RichInputText getTxtAsysOsdCode() {
        return this.txtAsysOsdCode;
    }

    public void setTxtOsdName(RichInputText txtOsdName) {
        this.txtOsdName = txtOsdName;
    }

    public RichInputText getTxtOsdName() {
        return this.txtOsdName;
    }

    public void setBtnSaveUpdateAgencySystem(RichCommandButton btnSaveUpdateAgencySystem) {
        this.btnSaveUpdateAgencySystem = btnSaveUpdateAgencySystem;
    }

    public RichCommandButton getBtnSaveUpdateAgencySystem() {
        return this.btnSaveUpdateAgencySystem;
    }

    public String actionShowSubDivisionsLov() {
        ADFUtils.findIterator((String)"fetchLowestOrgSubDivisionsBySystemIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblOrgSubDivisions);
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:orgSubDivisionsPop').show(hints);");
        return null;
    }

    public String actionSaveUpdateAgencySystem() {
        if (this.btnSaveUpdateAgencySystem.getText().equals("Edit")) {
            this.actionEditAgencySystem();
        }
        return null;
    }

    public String actionEditAgencySystem() {
        String sysCode = GlobalCC.checkNullValues((Object)this.txtAsysSysCode.getValue());
        String agnCode = GlobalCC.checkNullValues((Object)this.txtAsysAgnCode.getValue());
        String wef = GlobalCC.checkNullValues((Object)this.txtAsysWef.getValue());
        String wet = GlobalCC.checkNullValues((Object)this.txtAsysWet.getValue());
        String comments = GlobalCC.checkNullValues((Object)this.txtAsysComments.getValue());
        String osdCode = GlobalCC.checkNullValues((Object)this.txtAsysOsdCode.getValue());
        String osdId = GlobalCC.checkNullValues((Object)this.txtAsysOsdId.getValue());
        if (sysCode == null) {
            GlobalCC.errorValueNotEntered((String)"Error Value Missing: System Code is Empty");
            return null;
        }
        if (agnCode == null) {
            GlobalCC.errorValueNotEntered((String)"Error Value Missing: Agency Code is Empty");
            return null;
        }
        if (wef == null) {
            GlobalCC.errorValueNotEntered((String)"Error Value Missing: WEF Date is Empty");
            return null;
        }
        DBConnector dbConnector = new DBConnector();
        OracleConnection conn = null;
        OracleCallableStatement statement = null;
        try {
            conn = dbConnector.getDatabaseConnection();
            String query = "begin TQC_SETUPS_PKG.agencySystems_prc(?,?); end;";
            SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
            java.util.Date tmpWefDate = null;
            if (this.txtAsysWef.getValue() != null && !this.txtAsysWef.getValue().equals("")) {
                String date1 = df.format(this.txtAsysWef.getValue());
                tmpWefDate = df.parse(date1);
            }
            java.util.Date tmpWetDate = null;
            if (this.txtAsysWet.getValue() != null && !this.txtAsysWet.getValue().equals("")) {
                String date1 = df.format(this.txtAsysWet.getValue());
                tmpWetDate = df.parse(date1);
            }
            ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor((String)"TQC_AGENCY_SYSTEMS_TAB", (Connection)conn);
            ArrayList<AgencySystem> agencySystemsList = new ArrayList<AgencySystem>();
            AgencySystem agencySystem = new AgencySystem();
            agencySystem.setSQLTypeName("TQC_AGENCY_SYSTEMS_OBJ");
            agencySystem.setAsysSysCode(sysCode == null ? null : new BigDecimal(sysCode));
            agencySystem.setAsysAgnCode(agnCode == null ? null : new BigDecimal(agnCode));
            agencySystem.setAsysWef((java.util.Date)(tmpWefDate == null ? null : new Date(tmpWefDate.getTime())));
            agencySystem.setAsysWet((java.util.Date)(tmpWetDate == null ? null : new Date(tmpWetDate.getTime())));
            agencySystem.setAsysComment(comments);
            agencySystem.setAsysOsdCode(osdCode);
            agencySystem.setAsysOsdId(osdId == null ? null : new BigDecimal(osdId));
            agencySystemsList.add(agencySystem);
            ARRAY array = new ARRAY(descriptor, (Connection)conn, (Object)agencySystemsList.toArray());
            statement = (OracleCallableStatement)conn.prepareCall(query);
            statement.setString(1, "E");
            statement.setArray(2, (Array)array);
            statement.execute();
            statement.close();
            conn.commit();
            conn.close();
            ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
            erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agencySystemPop').hide(hints);");
            ADFUtils.findIterator((String)"fetchAllAgencyAssignedSystemsIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAssignedAgencySystems);
            String message = "Record UPDATED Successfully!";
            GlobalCC.INFORMATIONREPORTING((String)message);
        }
        catch (Exception e) {
            GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
        }
        return null;
    }

    public void setTxtAsysComments(RichInputText txtAsysComments) {
        this.txtAsysComments = txtAsysComments;
    }

    public RichInputText getTxtAsysComments() {
        return this.txtAsysComments;
    }

    public void setTblOrgSubDivisions(RichTable tblOrgSubDivisions) {
        this.tblOrgSubDivisions = tblOrgSubDivisions;
    }

    public RichTable getTblOrgSubDivisions() {
        return this.tblOrgSubDivisions;
    }

    public String actionAcceptOrgSubDivision() {
        Object key2 = this.tblOrgSubDivisions.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
        if (nodeBinding != null) {
            this.txtAsysOsdCode.setValue(nodeBinding.getAttribute("osdCode"));
            this.txtAsysOsdId.setValue(nodeBinding.getAttribute("osdId"));
            this.txtOsdName.setValue(nodeBinding.getAttribute("osdName"));
        }
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.panelAgencySystem);
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:orgSubDivisionsPop').hide(hints);");
        return null;
    }

    public void genAccYes(ValueChangeEvent valueChangeEvent) {
    }

    public void genAccNo(ValueChangeEvent evt) {
        if (evt.getNewValue() != evt.getOldValue() && evt.getNewValue() != null) {
            if (this.genAcSelectYes.isSelected()) {
                this.txtAccShortDesc.setDisabled(true);
                this.txtAccShortDesc.setValue((Object)null);
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAccShortDesc);
            } else if (this.genAccNoSelect.isSelected()) {
                this.txtAccShortDesc.setDisabled(false);
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAccShortDesc);
            }
        }
    }

    public void setGenAcSelectYes(RichSelectBooleanRadio genAcSelectYes) {
        this.genAcSelectYes = genAcSelectYes;
    }

    public RichSelectBooleanRadio getGenAcSelectYes() {
        return this.genAcSelectYes;
    }

    public void setGenAccNoSelect(RichSelectBooleanRadio genAccNoSelect) {
        this.genAccNoSelect = genAccNoSelect;
    }

    public RichSelectBooleanRadio getGenAccNoSelect() {
        return this.genAccNoSelect;
    }

    public void setShortDescYesOrNoLayout(RichPanelGroupLayout shortDescYesOrNoLayout) {
        this.shortDescYesOrNoLayout = shortDescYesOrNoLayout;
    }

    public RichPanelGroupLayout getShortDescYesOrNoLayout() {
        return this.shortDescYesOrNoLayout;
    }

    public void setTbListAgencies(RichTable tbListAgencies) {
        this.tbListAgencies = tbListAgencies;
    }

    public RichTable getTbListAgencies() {
        return this.tbListAgencies;
    }

    public void setTxtStateCode(RichInputText txtStateCode) {
        this.txtStateCode = txtStateCode;
    }

    public RichInputText getTxtStateCode() {
        return this.txtStateCode;
    }

    public void setTxtStateName(RichInputText txtStateName) {
        this.txtStateName = txtStateName;
    }

    public RichInputText getTxtStateName() {
        return this.txtStateName;
    }

    public void setTblStates(RichTable tblStates) {
        this.tblStates = tblStates;
    }

    public RichTable getTblStates() {
        return this.tblStates;
    }

    public void setTblTownPop(RichTable tblTownPop) {
        this.tblTownPop = tblTownPop;
    }

    public RichTable getTblTownPop() {
        return this.tblTownPop;
    }

    public void setActionShowStates(RichCommandButton actionShowStates) {
        this.actionShowStates = actionShowStates;
    }

    public RichCommandButton getActionShowStates() {
        return this.actionShowStates;
    }

    public void setTbTownListing(RichTable tbTownListing) {
        this.tbTownListing = tbTownListing;
    }

    public RichTable getTbTownListing() {
        return this.tbTownListing;
    }

    public void setTxtAStateName(RichInputText txtAStateName) {
        this.txtAStateName = txtAStateName;
    }

    public RichInputText getTxtAStateName() {
        return this.txtAStateName;
    }

    public void setTxtAStateCode(RichInputText txtAStateCode) {
        this.txtAStateCode = txtAStateCode;
    }

    public RichInputText getTxtAStateCode() {
        return this.txtAStateCode;
    }

    public void actionConfirmDeleteAgentAccount(DialogEvent dialogEvent) {
        if (!dialogEvent.getOutcome().equals((Object)DialogEvent.Outcome.no) && dialogEvent.getOutcome().equals((Object)DialogEvent.Outcome.yes)) {
            Object key2 = this.tblAgencyAccounts.getSelectedRowData();
            JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
            if (nodeBinding != null) {
                String accCode = nodeBinding.getAttribute("code").toString();
                String accShtDesc = nodeBinding.getAttribute("shortDesc").toString();
                String accName = nodeBinding.getAttribute("name").toString();
                String accAgencyCode = nodeBinding.getAttribute("agentCode").toString();
                String accCreatedBy = nodeBinding.getAttribute("createdBy").toString();
                String accDateCreated = nodeBinding.getAttribute("dateCreated").toString();
                String accStatus = nodeBinding.getAttribute("status").toString();
                String accRemarks = null;
                Object accWef = null;
                Object accWet = null;
                String Query = "begin TQC_AGENCIES_PKG.create_agency_account(?,?,?,?,?,?,?,?,?,?,?,?); end;";
                DBConnector connector = new DBConnector();
                OracleCallableStatement cst = null;
                OracleConnection conn = null;
                try {
                    conn = connector.getDatabaseConnection();
                    cst = (OracleCallableStatement)conn.prepareCall(Query);
                    SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
                    java.util.Date newWefDate = new java.util.Date();
                    if (this.txtAccWef.getValue() != null && !this.txtAccWef.getValue().equals("")) {
                        String date1 = df.format(this.txtAccWef.getValue());
                        newWefDate = df.parse(date1);
                    }
                    java.util.Date newWetDate = null;
                    if (this.txtAccWet.getValue() != null && !this.txtAccWet.getValue().equals("")) {
                        String date2 = df.format(this.txtAccWet.getValue());
                        newWetDate = df.parse(date2);
                    }
                    cst.setString(1, "D");
                    cst.setBigDecimal(2, new BigDecimal(accCode));
                    cst.setString(3, accShtDesc);
                    cst.setString(4, accName);
                    cst.setBigDecimal(5, new BigDecimal((String)this.session.getAttribute("agencyCode")));
                    cst.setString(6, (String)this.session.getAttribute("Username"));
                    cst.setDate(7, new Date(new java.util.Date().getTime()));
                    cst.setString(8, accStatus);
                    cst.setString(9, accRemarks);
                    cst.setDate(10, new Date(newWefDate.getTime()));
                    cst.setDate(11, newWetDate != null ? new Date(newWetDate.getTime()) : null);
                    cst.setBigDecimal(12, null);
                    cst.execute();
                    cst.close();
                    conn.close();
                    String message = "Agency Account DELETED Successfully!";
                    GlobalCC.INFORMATIONREPORTING((String)message);
                    ADFUtils.findIterator((String)"fetchAgencyAccountsIterator").executeQuery();
                    AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAgencyAccounts);
                }
                catch (Exception e) {
                    GlobalCC.EXCEPTIONREPORTING((Exception)e);
                }
            } else {
                GlobalCC.INFORMATIONREPORTING((String)"No record selected.");
            }
        }
    }

    public void actionConfirmDeleteAgent(DialogEvent dialogEvent) {
        if (!dialogEvent.getOutcome().equals((Object)DialogEvent.Outcome.no) && dialogEvent.getOutcome().equals((Object)DialogEvent.Outcome.yes)) {
            Object key2 = this.tblAgencyInfo.getSelectedRowData();
            JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
            if (nodeBinding != null) {
                String agencyCode = GlobalCC.checkNullValues((Object)nodeBinding.getAttribute("code"));
                String accountTypeCode = GlobalCC.checkNullValues((Object)this.session.getAttribute("accountTypeCode"));
                if (agencyCode == null || agencyCode == "") {
                    GlobalCC.errorValueNotEntered((String)"Error Value Missing: Please select an agency to edit");
                } else {
                    String Query = "begin tqc_setups_pkg.delete_agency_prc(?) ; end;";
                    DBConnector connector = new DBConnector();
                    OracleCallableStatement cst = null;
                    OracleConnection conn = null;
                    try {
                        conn = connector.getDatabaseConnection();
                        cst = (OracleCallableStatement)conn.prepareCall(Query);
                        cst.setBigDecimal(1, new BigDecimal(agencyCode));
                        cst.execute();
                        cst.close();
                        conn.close();
                        ADFUtils.findIterator((String)"fetchAllAccountAgenciesInfoOnlyIterator").executeQuery();
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAgencyInfo);
                        this.refreshAgencyDetailSection();
                        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.mainPanelTab);
                        GlobalCC.INFORMATIONREPORTING((String)"Agent DELETED Successfully!");
                    }
                    catch (Exception e) {
                        GlobalCC.EXCEPTIONREPORTING((Exception)e);
                    }
                }
            } else {
                GlobalCC.INFORMATIONREPORTING((String)"No Record Selected!");
            }
        }
    }

    public void setBtnDeleteAgency(RichCommandButton btnDeleteAgency) {
        this.btnDeleteAgency = btnDeleteAgency;
    }

    public RichCommandButton getBtnDeleteAgency() {
        return this.btnDeleteAgency;
    }

    public void setGenAccLabel(RichOutputLabel genAccLabel) {
        this.genAccLabel = genAccLabel;
    }

    public RichOutputLabel getGenAccLabel() {
        return this.genAccLabel;
    }

    public void setAgentAccountPop(RichPopup agentAccountPop) {
        this.agentAccountPop = agentAccountPop;
    }

    public RichPopup getAgentAccountPop() {
        return this.agentAccountPop;
    }

    public String actionConfirmDeleteAgency() {
        String agencyCode = GlobalCC.checkNullValues((Object)this.txtAgencyCode.getValue());
        if (agencyCode == null || agencyCode == "") {
            GlobalCC.errorValueNotEntered((String)"Error Value Missing: The record code is missing");
            return null;
        }
        String Query = "begin tqc_setups_pkg.delete_agency_prc(?) ; end;";
        DBConnector connector = new DBConnector();
        OracleCallableStatement cst = null;
        OracleConnection conn = null;
        try {
            conn = connector.getDatabaseConnection();
            cst = (OracleCallableStatement)conn.prepareCall(Query);
            cst.setBigDecimal(1, new BigDecimal(agencyCode));
            cst.execute();
            ADFUtils.findIterator((String)"fetchAllAccountAgenciesIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.treeAgencies);
            cst.close();
            conn.close();
        }
        catch (Exception e) {
            GlobalCC.EXCEPTIONREPORTING((Exception)e);
        }
        this.refreshAgencyDetailSection();
        String message = "Agent DELETED Successfully!";
        this.showMessagePopup(message);
        return null;
    }

    public void actionConfirmDeleteAgentReg(DialogEvent dialogEvent) {
        if (!dialogEvent.getOutcome().equals((Object)DialogEvent.Outcome.no) && dialogEvent.getOutcome().equals((Object)DialogEvent.Outcome.yes)) {
            Object key2 = this.registrationTable.getSelectedRowData();
            JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
            if (nodeBinding != null) {
                DBConnector connection = new DBConnector();
                String query = "begin TQC_AGENCIES_PKG.TQC_AGENCY_REGISTRATION_PRC(?,?,?);end;";
                ARRAY array = null;
                OracleConnection conn = null;
                OracleCallableStatement stmt = null;
                AgentRegistration regbean = new AgentRegistration();
                LinkedList<AgentRegistration> reglist = new LinkedList<AgentRegistration>();
                regbean.setAREG_CODE(new BigDecimal((String)nodeBinding.getAttribute("id")));
                regbean.setAREG_ACCEPTED(null);
                regbean.setAREG_AGN_CODE(null);
                regbean.setAREG_REG_NO(null);
                regbean.setAREG_WEF(null);
                regbean.setAREG_WET(null);
                regbean.setAREG_YEAR(null);
                reglist.add(regbean);
                try {
                    conn = connection.getDatabaseConnection();
                    stmt = (OracleCallableStatement)conn.prepareCall(query);
                    ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor((String)"TQC_AGENCY_REGISTRATION_TAB", (Connection)conn);
                    array = new ARRAY(descriptor, (Connection)conn, (Object)reglist.toArray());
                    stmt.setString(1, "D");
                    stmt.setArray(2, (Array)array);
                    stmt.registerOutParameter(3, 12);
                    stmt.execute();
                    String error = stmt.getString(3);
                    stmt.close();
                    conn.commit();
                    conn.close();
                    ADFUtils.findIterator((String)"findAgentsRegistrationIterator").executeQuery();
                    AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.registrationTable);
                    String message = "Record DELETED Successfully!";
                    GlobalCC.INFORMATIONREPORTING((String)message);
                }
                catch (SQLException e) {
                    GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
                }
            } else {
                GlobalCC.INFORMATIONREPORTING((String)"No Record Selected");
            }
        }
    }

    public void actionConfirmDeleteReferee(DialogEvent dialogEvent) {
        if (!dialogEvent.getOutcome().equals((Object)DialogEvent.Outcome.no) && dialogEvent.getOutcome().equals((Object)DialogEvent.Outcome.yes)) {
            Object key2 = this.agencyRefereeTable.getSelectedRowData();
            JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
            if (nodeBinding != null) {
                DBConnector connection = new DBConnector();
                String query = "begin TQC_AGENCIES_PKG.TQC_AGENCY_REFEREES_PRC(?,?,?);end;";
                ARRAY array = null;
                OracleConnection conn = null;
                OracleCallableStatement stmt = null;
                AgencyReferee regbean = new AgencyReferee();
                LinkedList<AgencyReferee> reglist = new LinkedList<AgencyReferee>();
                regbean.setAREF_CODE(new BigDecimal((String)nodeBinding.getAttribute("id")));
                reglist.add(regbean);
                try {
                    conn = connection.getDatabaseConnection();
                    stmt = (OracleCallableStatement)conn.prepareCall(query);
                    ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor((String)"TQC_AGENCY_REFEREES_TAB", (Connection)conn);
                    array = new ARRAY(descriptor, (Connection)conn, (Object)reglist.toArray());
                    stmt.setString(1, "D");
                    stmt.setArray(2, (Array)array);
                    stmt.registerOutParameter(3, 12);
                    stmt.execute();
                    stmt.close();
                    conn.commit();
                    conn.close();
                    ADFUtils.findIterator((String)"findAgentsRefereesIterator").executeQuery();
                    AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.agencyRefereeTable);
                    String message = "Record DELETED Successfully!";
                    GlobalCC.INFORMATIONREPORTING((String)message);
                }
                catch (Exception e) {
                    GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
                }
            } else {
                GlobalCC.INFORMATIONREPORTING((String)"No record selected.");
            }
        }
    }

    public void actionConfirmDeleteAgentDirectors(DialogEvent dialogEvent) {
        if (!dialogEvent.getOutcome().equals((Object)DialogEvent.Outcome.no) && dialogEvent.getOutcome().equals((Object)DialogEvent.Outcome.yes)) {
            Object key2 = this.agentDirectorsTable.getSelectedRowData();
            JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
            if (nodeBinding != null) {
                DBConnector connection = new DBConnector();
                String query = "begin TQC_AGENCIES_PKG.TQC_AGENCY_DIRECTORS_PRC(?,?,?);end;";
                ARRAY array = null;
                OracleConnection conn = null;
                OracleCallableStatement stmt = null;
                AgDirector regbean = new AgDirector();
                LinkedList<AgDirector> reglist = new LinkedList<AgDirector>();
                regbean.setADIR_CODE(new BigDecimal((String)nodeBinding.getAttribute("id")));
                regbean.setADIR_AGN_CODE(null);
                regbean.setADIR_DESIGNATION(null);
                regbean.setADIR_NAME(null);
                regbean.setADIR_PCT_HOLDG(null);
                regbean.setADIR_YEAR(null);
                regbean.setADIR_QUALIFICATIONS(null);
                regbean.setADIR_PHONE_NUMBER(null);
                reglist.add(regbean);
                try {
                    conn = connection.getDatabaseConnection();
                    stmt = (OracleCallableStatement)conn.prepareCall(query);
                    ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor((String)"TQC_AGENCY_DIRECTORS_TAB", (Connection)conn);
                    array = new ARRAY(descriptor, (Connection)conn, (Object)reglist.toArray());
                    stmt.setString(1, "D");
                    stmt.setArray(2, (Array)array);
                    stmt.registerOutParameter(3, 12);
                    stmt.execute();
                    String error = stmt.getString(3);
                    stmt.close();
                    conn.commit();
                    conn.close();
                    ADFUtils.findIterator((String)"findAgentsDirectorsIterator").executeQuery();
                    AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.agentDirectorsTable);
                    String message = "Record DELETED Successfully!";
                    GlobalCC.INFORMATIONREPORTING((String)message);
                }
                catch (SQLException e) {
                    GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
                }
            } else {
                GlobalCC.INFORMATIONREPORTING((String)"No Record Selected.");
            }
        }
    }

    public void actionConfirmDeleteAgentWebAcc(DialogEvent dialogEvent) {
        if (!dialogEvent.getOutcome().equals((Object)DialogEvent.Outcome.no) && dialogEvent.getOutcome().equals((Object)DialogEvent.Outcome.yes)) {
            Object key2 = this.webUsersTable.getSelectedRowData();
            JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key2;
            if (nodeBinding != null) {
                DBConnector connection = new DBConnector();
                String query = "begin TQC_AGENCIES_PKG.TQC_ACCOUNT_CONTACTS_PRC(?,?,?,?,?);end;";
                ARRAY array = null;
                OracleConnection conn = null;
                OracleCallableStatement stmt = null;
                String currentUser = (String)this.session.getAttribute("Username");
                BigDecimal id = new BigDecimal((String)nodeBinding.getAttribute("id"));
                WebUser regbean = new WebUser();
                LinkedList<WebUser> reglist = new LinkedList<WebUser>();
                regbean.setACCC_CODE(id);
                reglist.add(regbean);
                try {
                    conn = connection.getDatabaseConnection();
                    stmt = (OracleCallableStatement)conn.prepareCall(query);
                    ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor((String)"TQC_ACCOUNT_CONTACTS_TAB", (Connection)conn);
                    array = new ARRAY(descriptor, (Connection)conn, (Object)reglist.toArray());
                    stmt.setString(1, "D");
                    stmt.setArray(2, (Array)array);
                    stmt.setString(3, currentUser);
                    stmt.registerOutParameter(4, 12);
                    stmt.setString(5, null);
                    stmt.execute();
                    String error = stmt.getString(4);
                    stmt.close();
                    conn.commit();
                    conn.close();
                    ADFUtils.findIterator((String)"findwebUserAccountsIterator").executeQuery();
                    AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.webUsersTable);
                    String message = "Record DELETED Successfully!";
                    GlobalCC.INFORMATIONREPORTING((String)message);
                }
                catch (Exception e) {
                    GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
                }
            } else {
                GlobalCC.INFORMATIONREPORTING((String)"No record selected.");
            }
        }
    }

    public void setTblAdminRegions(RichTable tblAdminRegions) {
        this.tblAdminRegions = tblAdminRegions;
    }

    public RichTable getTblAdminRegions() {
        return this.tblAdminRegions;
    }

    public void setPnmsgAdminRegionName(RichPanelLabelAndMessage pnmsgAdminRegionName) {
        this.pnmsgAdminRegionName = pnmsgAdminRegionName;
    }

    public RichPanelLabelAndMessage getPnmsgAdminRegionName() {
        return this.pnmsgAdminRegionName;
    }

    public void setPnmsgTownName(RichPanelLabelAndMessage pnmsgTownName) {
        this.pnmsgTownName = pnmsgTownName;
    }

    public RichPanelLabelAndMessage getPnmsgTownName() {
        return this.pnmsgTownName;
    }

    public void setFrmLoadAdminTownDetails(RichPanelFormLayout frmLoadAdminTownDetails) {
        this.frmLoadAdminTownDetails = frmLoadAdminTownDetails;
    }

    public RichPanelFormLayout getFrmLoadAdminTownDetails() {
        return this.frmLoadAdminTownDetails;
    }

    public void setDlgAdminRegionList(RichDialog dlgAdminRegionList) {
        this.dlgAdminRegionList = dlgAdminRegionList;
    }

    public RichDialog getDlgAdminRegionList() {
        return this.dlgAdminRegionList;
    }

    public void setTxtBankBranch(RichInputText txtBankBranch) {
        this.txtBankBranch = txtBankBranch;
    }

    public RichInputText getTxtBankBranch() {
        return this.txtBankBranch;
    }

    public void setTxtBankName(RichInputText txtBankName) {
        this.txtBankName = txtBankName;
    }

    public RichInputText getTxtBankName() {
        return this.txtBankName;
    }

    public void setTxtBankCode(RichInputText txtBankCode) {
        this.txtBankCode = txtBankCode;
    }

    public RichInputText getTxtBankCode() {
        return this.txtBankCode;
    }

    public void setTxtBankBranchCode(RichInputText txtBankBranchCode) {
        this.txtBankBranchCode = txtBankBranchCode;
    }

    public RichInputText getTxtBankBranchCode() {
        return this.txtBankBranchCode;
    }

    public void setTblBanks(RichTable tblBanks) {
        this.tblBanks = tblBanks;
    }

    public RichTable getTblBanks() {
        return this.tblBanks;
    }

    public String actionAcceptBank() {
        Object key = this.tblBanks.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key;
        if (nodeBinding != null) {
            this.txtBankCode.setValue(nodeBinding.getAttribute("bankCode"));
            this.txtBankName.setValue(nodeBinding.getAttribute("bankName"));
            this.txtBankBranchCode.setValue((Object)null);
            this.txtBankBranch.setValue((Object)null);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblBankBranches);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtBankName);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtBankCode);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtBankBranch);
        }
        GlobalCC.dismissPopUp((String)"pt1", (String)"BanksPop");
        return null;
    }

    public String actionAcceptBankBranch() {
        Object key = this.tblBankBranches.getSelectedRowData();
        JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)key;
        if (nodeBinding != null) {
            this.txtBankBranchCode.setValue(nodeBinding.getAttribute("branchCode"));
            this.txtBankBranch.setValue(nodeBinding.getAttribute("branchName"));
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtBankBranchCode);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtBankBranch);
        }
        GlobalCC.dismissPopUp((String)"pt1", (String)"BankBranchesPOP");
        return null;
    }

    public void setTblBankBranches(RichTable tblBankBranches) {
        this.tblBankBranches = tblBankBranches;
    }

    public RichTable getTblBankBranches() {
        return this.tblBankBranches;
    }

    public void setTxtAccountNo(RichInputText txtAccountNo) {
        this.txtAccountNo = txtAccountNo;
    }

    public RichInputText getTxtAccountNo() {
        return this.txtAccountNo;
    }

    public String actionShowBankBranches() {
        if (this.txtBankCode.getValue() == null) {
            GlobalCC.EXCEPTIONREPORTING((String)"You have not Selected a Bank");
            return null;
        }
        this.session.setAttribute("bankCode", this.txtBankCode.getValue());
        ADFUtils.findIterator((String)"fetchBankBranchByBankCodeIterator").executeQuery();
        GlobalCC.showPopUp((String)"pt1", (String)"BankBranchesPOP");
        return null;
    }

    public void setTxtPrefix(RichInputText txtPrefix) {
        this.txtPrefix = txtPrefix;
    }

    public RichInputText getTxtPrefix() {
        return this.txtPrefix;
    }

    public void setTblAssignedClients(RichTable tblAssignedClients) {
        this.tblAssignedClients = tblAssignedClients;
    }

    public RichTable getTblAssignedClients() {
        return this.tblAssignedClients;
    }

    public void setTblUnAssignedClients(RichTable tblUnAssignedClients) {
        this.tblUnAssignedClients = tblUnAssignedClients;
    }

    public RichTable getTblUnAssignedClients() {
        return this.tblUnAssignedClients;
    }

    public void setChBoxUnAssigedClients(RichSelectBooleanCheckbox chBoxUnAssigedClients) {
        this.chBoxUnAssigedClients = chBoxUnAssigedClients;
    }

    public RichSelectBooleanCheckbox getChBoxUnAssigedClients() {
        return this.chBoxUnAssigedClients;
    }

    public void setChBoxAssigedClients(RichSelectBooleanCheckbox chBoxAssigedClients) {
        this.chBoxAssigedClients = chBoxAssigedClients;
    }

    public RichSelectBooleanCheckbox getChBoxAssigedClients() {
        return this.chBoxAssigedClients;
    }

    public String actionRemoveClient() {
        DBConnector dbConnector = new DBConnector();
        OracleConnection conn = null;
        OracleCallableStatement statement = null;
        try {
            conn = dbConnector.getDatabaseConnection();
            String query = "begin TQC_AGENCIES_PKG.create_agency_client(?,?,?,?); end;";
            statement = (OracleCallableStatement)conn.prepareCall(query);
            int rowcount = this.tblAssignedClients.getRowCount();
            Object ClientCode = new Object();
            for (int i = 0; i < rowcount; ++i) {
                this.tblAssignedClients.setRowIndex(i);
                Object key = this.tblAssignedClients.getRowKey();
                this.tblAssignedClients.setRowKey(key);
                JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)this.tblAssignedClients.getRowData();
                if (!this.chBoxAssigedClients.isSelected()) continue;
                ClientCode = nodeBinding.getAttribute("clientCode");
                statement.setString(1, null);
                statement.setObject(2, this.txtAgencyCode.getValue());
                statement.setObject(3, ClientCode);
                statement.setString(4, "D");
                statement.execute();
            }
            statement.close();
            conn.commit();
            conn.close();
            ADFUtils.findIterator((String)"fetchAgencyNoneClientsIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblUnAssignedClients);
            ADFUtils.findIterator((String)"fetchAgencyClientsIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAssignedClients);
        }
        catch (SQLException e) {
            GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
        }
        return null;
    }

    public String actionRemoveServiceProviders() {
        int rowcount = this.asssignedServiceProviders.getRowCount();
        Object ServiceproviderCode = new Object();
        DBConnector dbConnector = new DBConnector();
        OracleConnection conn = null;
        OracleCallableStatement statement = null;
        try {
            conn = dbConnector.getDatabaseConnection();
            String query = "begin TQC_AGENCIES_PKG.create_agency_serv_prov(?,?,?,?); end;";
            statement = (OracleCallableStatement)conn.prepareCall(query);
            for (int i = 0; i < rowcount; ++i) {
                this.asssignedServiceProviders.setRowIndex(i);
                Object key = this.asssignedServiceProviders.getRowKey();
                this.asssignedServiceProviders.setRowKey(key);
                JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)this.asssignedServiceProviders.getRowData();
                if (!this.cbBoxassignedServiceProviders.isSelected()) continue;
                ServiceproviderCode = nodeBinding.getAttribute("SPR_CODE");
                statement.setString(1, null);
                statement.setObject(2, ServiceproviderCode);
                statement.setObject(3, this.txtAgencyCode.getValue());
                System.out.println("SPR_CODE" + ServiceproviderCode);
                statement.setString(4, "D");
                statement.execute();
            }
            statement.close();
            conn.commit();
            conn.close();
            ADFUtils.findIterator((String)"findServiceprovidersIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.unAssignedServiceProviders);
            ADFUtils.findIterator((String)"fetchAgencyServiceProvidersIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.asssignedServiceProviders);
        }
        catch (SQLException e) {
            GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
        }
        return null;
    }

    public String actionAddClient() {
        int rowcount = this.tblUnAssignedClients.getRowCount();
        Object ClientCode = new Object();
        DBConnector dbConnector = new DBConnector();
        OracleConnection conn = null;
        OracleCallableStatement statement = null;
        try {
            conn = dbConnector.getDatabaseConnection();
            String query = "begin TQC_AGENCIES_PKG.create_agency_client(?,?,?,?); end;";
            statement = (OracleCallableStatement)conn.prepareCall(query);
            for (int i = 0; i < rowcount; ++i) {
                this.tblUnAssignedClients.setRowIndex(i);
                Object key = this.tblUnAssignedClients.getRowKey();
                this.tblUnAssignedClients.setRowKey(key);
                JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)this.tblUnAssignedClients.getRowData();
                if (!this.chBoxUnAssigedClients.isSelected()) continue;
                ClientCode = nodeBinding.getAttribute("clientCode");
                statement.setString(1, null);
                statement.setObject(2, this.txtAgencyCode.getValue());
                statement.setObject(3, ClientCode);
                System.out.println("ClientCode" + ClientCode);
                statement.setString(4, "A");
                statement.execute();
            }
            statement.close();
            conn.commit();
            conn.close();
            ADFUtils.findIterator((String)"fetchAgencyNoneClientsIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblUnAssignedClients);
            ADFUtils.findIterator((String)"fetchAgencyClientsIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.tblAssignedClients);
        }
        catch (SQLException e) {
            GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
        }
        return null;
    }

    public String actionAddAgentProduct() {
        int rowcount = this.unAssignedProductsTbl.getRowCount();
        Object productCode = new Object();
        DBConnector dbConnector = new DBConnector();
        OracleConnection conn = null;
        OracleCallableStatement statement = null;
        try {
            conn = dbConnector.getDatabaseConnection();
            String query = "begin TQC_AGENCIES_PKG.add_agency_product(?,?,?); end;";
            statement = (OracleCallableStatement)conn.prepareCall(query);
            for (int i = 0; i < rowcount; ++i) {
                this.unAssignedProductsTbl.setRowIndex(i);
                Object key = this.unAssignedProductsTbl.getRowKey();
                this.unAssignedProductsTbl.setRowKey(key);
                JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)this.unAssignedProductsTbl.getRowData();
                if (!this.chBoxAssigedClients.isSelected()) continue;
                productCode = nodeBinding.getAttribute("prodCode");
                statement.setObject(1, this.txtAgencyCode.getValue());
                statement.setObject(2, productCode);
                System.out.println("productCode" + productCode);
                statement.setString(3, "A");
                statement.execute();
            }
            statement.close();
            conn.commit();
            conn.close();
            ADFUtils.findIterator((String)"fetchNoneAgencyProductsIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.unAssignedProductsTbl);
            ADFUtils.findIterator((String)"fetchAgencyProductsIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.assignedProductsTbl);
        }
        catch (SQLException e) {
            GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
        }
        return null;
    }

    public String actionRemoveAgentProduct() {
        int rowcount = this.assignedProductsTbl.getRowCount();
        Object productCode = new Object();
        DBConnector dbConnector = new DBConnector();
        OracleConnection conn = null;
        OracleCallableStatement statement = null;
        try {
            conn = dbConnector.getDatabaseConnection();
            String query = "begin TQC_AGENCIES_PKG.add_agency_product(?,?,?); end;";
            statement = (OracleCallableStatement)conn.prepareCall(query);
            for (int i = 0; i < rowcount; ++i) {
                this.assignedProductsTbl.setRowIndex(i);
                Object key = this.assignedProductsTbl.getRowKey();
                this.assignedProductsTbl.setRowKey(key);
                JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)this.assignedProductsTbl.getRowData();
                if (!this.chkUnAssignedProducts.isSelected()) continue;
                productCode = nodeBinding.getAttribute("prodCode");
                statement.setObject(1, this.txtAgencyCode.getValue());
                statement.setObject(2, productCode);
                System.out.println("productCode" + productCode);
                statement.setString(3, "D");
                statement.execute();
            }
            statement.close();
            conn.commit();
            conn.close();
            ADFUtils.findIterator((String)"fetchNoneAgencyProductsIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.unAssignedProductsTbl);
            ADFUtils.findIterator((String)"fetchAgencyProductsIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.assignedProductsTbl);
        }
        catch (SQLException e) {
            GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
        }
        return null;
    }

    public String actionAddServiceProviders() {
        int rowcount = this.unAssignedServiceProviders.getRowCount();
        Object ServiceproviderCode = new Object();
        DBConnector dbConnector = new DBConnector();
        OracleConnection conn = null;
        OracleCallableStatement statement = null;
        try {
            conn = dbConnector.getDatabaseConnection();
            String query = "begin TQC_AGENCIES_PKG.create_agency_serv_prov(?,?,?,?); end;";
            statement = (OracleCallableStatement)conn.prepareCall(query);
            for (int i = 0; i < rowcount; ++i) {
                this.unAssignedServiceProviders.setRowIndex(i);
                Object key = this.unAssignedServiceProviders.getRowKey();
                this.unAssignedServiceProviders.setRowKey(key);
                JUCtrlValueBinding nodeBinding = (JUCtrlValueBinding)this.unAssignedServiceProviders.getRowData();
                if (!this.chAssignServiceprovs.isSelected()) continue;
                ServiceproviderCode = nodeBinding.getAttribute("spr_code");
                statement.setString(1, null);
                statement.setObject(2, ServiceproviderCode);
                statement.setObject(3, this.txtAgencyCode.getValue());
                System.out.println("ServiceproviderCode" + ServiceproviderCode);
                statement.setString(4, "A");
                statement.execute();
            }
            statement.close();
            conn.commit();
            conn.close();
            ADFUtils.findIterator((String)"findServiceprovidersIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.unAssignedServiceProviders);
            ADFUtils.findIterator((String)"fetchAgencyServiceProvidersIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.asssignedServiceProviders);
        }
        catch (SQLException e) {
            GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
        }
        return null;
    }

    public String actionAddServiceProvidersDef() {
        int rowcount = this.unAssignedServiceProviders.getRowCount();
        Object ServiceproviderCode = new Object();
        DBConnector dbConnector = new DBConnector();
        OracleConnection conn = null;
        OracleCallableStatement statement = null;
        try {
            conn = dbConnector.getDatabaseConnection();
            String query = "begin TQC_AGENCIES_PKG.create_agency_serv_prov_def(?); end;";
            statement = (OracleCallableStatement)conn.prepareCall(query);
            statement.setObject(1, this.txtAgencyCode.getValue());
            statement.execute();
            statement.close();
            conn.commit();
            conn.close();
            ADFUtils.findIterator((String)"findServiceprovidersIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.unAssignedServiceProviders);
            ADFUtils.findIterator((String)"fetchAgencyServiceProvidersIterator").executeQuery();
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.asssignedServiceProviders);
        }
        catch (SQLException e) {
            GlobalCC.EXCEPTIONREPORTING((Connection)conn, (Exception)e);
        }
        return null;
    }

  public String actionAcceptPersonnel() {
          DCIteratorBinding dciter =
              ADFUtils.findIterator("fetchAllPersonnelsIterator");
          RowKeySet set = tblPersonnel.getSelectedRowKeys();
          Iterator rowKeySetIter = set.iterator();

          while (rowKeySetIter.hasNext()) {
              List l = (List)rowKeySetIter.next();
              Key key = (Key)l.get(0);
              dciter.setCurrentRowWithKey(key.toStringFormat(true));

              Row r = dciter.getCurrentRow();
              txtAgencyContractCode.setValue(r.getAttribute("conCode"));
              AdfFacesContext.getCurrentInstance().addPartialTarget(txtAgencyContractCode);


          }

          // Open the popup dialog
          ExtendedRenderKitService erkService =
              Service.getService(FacesContext.getCurrentInstance().getRenderKit(),
                                 ExtendedRenderKitService.class);
          erkService.addScript(FacesContext.getCurrentInstance(),
                               "var hints = {autodismissNever:false}; " +
                               "AdfPage.PAGE.findComponent('" +
                               "pt1:personnelPop').hide(hints);");
          return null;
      }

    public void setTblPersonnel(RichTable tblPersonnel) {
        this.tblPersonnel = tblPersonnel;
    }

    public RichTable getTblPersonnel() {
        return this.tblPersonnel;
    }

    public String showPersPop() {
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:personnelPop').show(hints);");
        return null;
    }

    public void setTxtAsysOsdId(RichInputNumberSpinbox txtAsysOsdId) {
        this.txtAsysOsdId = txtAsysOsdId;
    }

    public RichInputNumberSpinbox getTxtAsysOsdId() {
        return this.txtAsysOsdId;
    }

    public void setTblAccountTypesPopEdit(RichTable tblAccountTypesPopEdit) {
        this.tblAccountTypesPopEdit = tblAccountTypesPopEdit;
    }

    public RichTable getTblAccountTypesPopEdit() {
        return this.tblAccountTypesPopEdit;
    }

    public String actionLaunchEditActType() {
        if (this.session.getAttribute("agencyCode") == null) {
            GlobalCC.EXCEPTIONREPORTING((String)"Select a agency first.");
            return null;
        }
        GlobalCC.showPopUp((String)"pt1", (String)"accountTypeEdit");
        return null;
    }

    public void setAccountsTypeElements(List<SelectItem> accountsTypeElements) {
        this.accountsTypeElements = accountsTypeElements;
    }

    public void setTxtCreditRting(RichSelectOneChoice txtCreditRting) {
        this.txtCreditRting = txtCreditRting;
    }

    public RichSelectOneChoice getTxtCreditRting() {
        return this.txtCreditRting;
    }

    public String addBranchesDetails() {
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:addBranchBankDetails').show(hints);");
        this.directYr.setValue((Object)null);
        this.directname.setValue((Object)null);
        this.directQualifications.setValue((Object)null);
        this.directshare.setValue((Object)null);
        this.saveAgDirectorButton.setText("Save");
        return null;
    }

    public void setUnAssignedServiceProviders(RichTable unAssignedServiceProviders) {
        this.unAssignedServiceProviders = unAssignedServiceProviders;
    }

    public RichTable getUnAssignedServiceProviders() {
        return this.unAssignedServiceProviders;
    }

    public void setChAssignServiceprovs(RichSelectBooleanCheckbox chAssignServiceprovs) {
        this.chAssignServiceprovs = chAssignServiceprovs;
    }

    public RichSelectBooleanCheckbox getChAssignServiceprovs() {
        return this.chAssignServiceprovs;
    }

    public void setSelected(RichTable selected) {
        this.selected = selected;
    }

    public RichTable getSelected() {
        return this.selected;
    }

    public void setAsssignedServiceProviders(RichTable asssignedServiceProviders) {
        this.asssignedServiceProviders = asssignedServiceProviders;
    }

    public RichTable getAsssignedServiceProviders() {
        return this.asssignedServiceProviders;
    }

    public void setCbBoxassignedServiceProviders(RichSelectBooleanCheckbox cbBoxassignedServiceProviders) {
        this.cbBoxassignedServiceProviders = cbBoxassignedServiceProviders;
    }

    public RichSelectBooleanCheckbox getCbBoxassignedServiceProviders() {
        return this.cbBoxassignedServiceProviders;
    }

    public String selectAgent() {
        Object key = this.agentTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            // empty if block
        }
        this.txtAgent.setValue(r.getAttribute("agentname"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgent);
        this.session.setAttribute("agentCodeType", r.getAttribute("agentCode"));
        return null;
    }

    public void setAgentTbl(RichTable agentTbl) {
        this.agentTbl = agentTbl;
    }

    public RichTable getAgentTbl() {
        return this.agentTbl;
    }

    public void setTxtAgent(RichInputText txtAgent) {
        this.txtAgent = txtAgent;
    }

    public RichInputText getTxtAgent() {
        return this.txtAgent;
    }

    public void setTxtAgntLov(RichCommandButton txtAgntLov) {
        this.txtAgntLov = txtAgntLov;
    }

    public RichCommandButton getTxtAgntLov() {
        return this.txtAgntLov;
    }

    public void setSubAgntDetailsTab(RichShowDetailItem subAgntDetailsTab) {
        this.subAgntDetailsTab = subAgntDetailsTab;
    }

    public RichShowDetailItem getSubAgntDetailsTab() {
        return this.subAgntDetailsTab;
    }

    public void setAgentsTbl(RichTable agentsTbl) {
        this.agentsTbl = agentsTbl;
    }

    public RichTable getAgentsTbl() {
        return this.agentsTbl;
    }

    public void selectAgentTbl(DialogEvent dialogEvent) {
        Object key = this.agentTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            // empty if block
        }
        System.out.println("This is executed");
        this.txtAgent.setValue(r.getAttribute("agentShtDesc"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgent);
        this.session.setAttribute("agentCodeType", r.getAttribute("agentCode"));
        System.out.println("This is executed 1");
    }

    public void setTelNo(RichInputText telNo) {
        this.telNo = telNo;
    }

    public RichInputText getTelNo() {
        return this.telNo;
    }

    public void setTxtAgentsAccountsLabel(RichPanelLabelAndMessage txtAgentsAccountsLabel) {
        this.txtAgentsAccountsLabel = txtAgentsAccountsLabel;
    }

    public RichPanelLabelAndMessage getTxtAgentsAccountsLabel() {
        return this.txtAgentsAccountsLabel;
    }

    public void setTxtSaccoName(RichInputText txtSaccoName) {
        this.txtSaccoName = txtSaccoName;
    }

    public RichInputText getTxtSaccoName() {
        return this.txtSaccoName;
    }

    public String selectSacco() {
        Object key = this.txtSaccoTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            // empty if block
        }
        this.txtSacco.setValue(r.getAttribute("CLNT_NAME"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtSacco);
        this.session.setAttribute("CLCode", r.getAttribute("CLNT_CODE"));
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:saccoPop').hide(hints);");
        return null;
    }

    public void setTxtSacco(RichInputText txtSacco) {
        this.txtSacco = txtSacco;
    }

    public RichInputText getTxtSacco() {
        return this.txtSacco;
    }

    public void setTxtSaccoTbl(RichTable txtSaccoTbl) {
        this.txtSaccoTbl = txtSaccoTbl;
    }

    public RichTable getTxtSaccoTbl() {
        return this.txtSaccoTbl;
    }

    public void setTxtMarketer(RichInputText txtMarketer) {
        this.txtMarketer = txtMarketer;
    }

    public RichInputText getTxtMarketer() {
        return this.txtMarketer;
    }

    public String selectMarketer() {
        Object key = this.marketerTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"Please select a marketer");
            return null;
        }
        this.session.setAttribute("accountManagerCode", r.getAttribute("agentCode"));
        this.txtMarketer.setValue(r.getAttribute("agentName"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtMarketer);
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:MarketerPop').hide(hints);");
        return null;
    }

    public void setMarketerTbl(RichTable marketerTbl) {
        this.marketerTbl = marketerTbl;
    }

    public RichTable getMarketerTbl() {
        return this.marketerTbl;
    }

    public void setTxtBranches(RichInputText txtBranches) {
        this.txtBranches = txtBranches;
    }

    public RichInputText getTxtBranches() {
        return this.txtBranches;
    }

    public void setTxtSystems(RichTable txtSystems) {
        this.txtSystems = txtSystems;
    }

    public RichTable getTxtSystems() {
        return this.txtSystems;
    }

    public String saveSystem() {
        Object keys = this.txtSystems.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)keys;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No Record Selected");
            return null;
        }
        this.session.setAttribute("sysCode", r.getAttribute("sysCode"));
        this.txtBranches.setValue(r.getAttribute("sysName"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtBranches);
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:webUserPop').show(hints);");
        return null;
    }

    public void setUnitManagerTbl(RichTable unitManagerTbl) {
        this.unitManagerTbl = unitManagerTbl;
    }

    public RichTable getUnitManagerTbl() {
        return this.unitManagerTbl;
    }

    public String selectBranch() {
        Object keys = this.unitManagerTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)keys;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"Please select A Branch");
            return null;
        }
        this.session.setAttribute("braCode", r.getAttribute("branchAgnCode"));
        this.session.setAttribute("brnCode", r.getAttribute("brnCode"));
        this.session.setAttribute("agentCode", r.getAttribute("agentCode"));
        this.txtUnitManager.setValue(r.getAttribute("branchName"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtUnitManager);
        return null;
    }

    public void setTxtUnitManager(RichInputText txtUnitManager) {
        this.txtUnitManager = txtUnitManager;
    }

    public RichInputText getTxtUnitManager() {
        return this.txtUnitManager;
    }

    public String PromoteManager() {
        return null;
    }

    public void setPbPromManager(RichPanelBox pbPromManager) {
        this.pbPromManager = pbPromManager;
    }

    public RichPanelBox getPbPromManager() {
        return this.pbPromManager;
    }

    public void txtAgentPromotion(ValueChangeEvent valueChangeEvent) {
        this.txtOneChoice.setValue((Object)null);
        this.txtOneChoiceDem.setValue((Object)null);
        this.txtBranchName.setValue((Object)null);
        this.txtUnitManager.setValue((Object)null);
        this.txtEffectiveDate.setValue((Object)null);
        if (this.txtAgentChoices.getValue().equals("AGP")) {
            this.clbPromote.setVisible(true);
            this.txtEffectiveDate.setVisible(true);
            this.txtBranchName.setVisible(true);
            this.txtOneChoice.setVisible(true);
            this.lblBranch.setVisible(true);
            this.clbBranchDrop.setVisible(true);
            this.txtOneChoiceDem.setVisible(false);
            this.lblAgencyBranch.setVisible(false);
            this.txtUnitManager.setVisible(false);
            this.clbUnitManager.setVisible(false);
            this.clbDemoteCmb.setVisible(false);
            this.txtTransactionType.setVisible(true);
            this.lblEffectiveDate.setVisible(true);
            this.lblAgencyPrefix.setVisible(true);
            this.txtAgencyPrefix.setVisible(true);
            this.lblUnitPrefix.setVisible(true);
            this.txtUnitPrefix.setVisible(true);
            this.lblAgencySeq.setVisible(true);
            this.txtAgencySeq.setVisible(true);
            this.txtPrecontractCode.setVisible(true);
            this.precontractCode.setVisible(true);
        } else if (this.txtAgentChoices.getValue().equals("AGD")) {
            System.out.println("Entered here");
            this.clbPromote.setVisible(false);
            this.txtEffectiveDate.setVisible(true);
            this.txtBranchName.setVisible(false);
            this.txtOneChoice.setVisible(false);
            this.lblBranch.setVisible(false);
            this.clbBranchDrop.setVisible(false);
            this.txtOneChoiceDem.setVisible(true);
            this.lblAgencyBranch.setVisible(true);
            this.txtUnitManager.setVisible(true);
            this.clbUnitManager.setVisible(true);
            this.clbDemoteCmb.setVisible(true);
            this.txtTransactionType.setVisible(true);
            this.lblEffectiveDate.setVisible(true);
            this.lblAgencyPrefix.setVisible(false);
            this.txtAgencyPrefix.setVisible(false);
            this.lblUnitPrefix.setVisible(true);
            this.txtUnitPrefix.setVisible(true);
            this.lblAgencySeq.setVisible(false);
            this.txtAgencySeq.setVisible(false);
            this.txtPrecontractCode.setVisible(true);
            this.precontractCode.setVisible(true);
        }
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.clbPromote);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.clbDemote);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtEffectiveDate);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtBranchName);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtOneChoice);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.lblBranch);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.clbBranchDrop);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtOneChoiceDem);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.lblAgencyBranch);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtUnitManager);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.clbUnitManager);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.clbDemoteCmb);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.clbAuthDemotion);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtTransactionType);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.lblEffectiveDate);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.lblAgencyPrefix);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencySeq);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.clbUnitManager);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.lblUnitPrefix);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtUnitPrefix);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.lblAgencySeq);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencySeq);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencyPrefix);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtPrecontractCode);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.precontractCode);
    }

    public void setTxtPromote(RichSelectBooleanRadio txtPromote) {
        this.txtPromote = txtPromote;
    }

    public RichSelectBooleanRadio getTxtPromote() {
        return this.txtPromote;
    }

    public void setTxtAgentChoices(RichSelectOneRadio txtAgentChoices) {
        this.txtAgentChoices = txtAgentChoices;
    }

    public RichSelectOneRadio getTxtAgentChoices() {
        return this.txtAgentChoices;
    }

    public void setBranchTbl(RichTable branchTbl) {
        this.branchTbl = branchTbl;
    }

    public RichTable getBranchTbl() {
        return this.branchTbl;
    }

    public String selectBranchDetails() {
        Object key = this.branchTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"Please select a Branch");
            return null;
        }
        this.session.setAttribute("brnCode", r.getAttribute("brnCode"));
        this.txtBranchName.setValue(r.getAttribute("branchName"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtBranchName);
        return null;
    }

    public void setTxtBranchName(RichInputText txtBranchName) {
        this.txtBranchName = txtBranchName;
    }

    public RichInputText getTxtBranchName() {
        return this.txtBranchName;
    }

    public void setTxtEffectiveDate(RichInputDate txtEffectiveDate) {
        this.txtEffectiveDate = txtEffectiveDate;
    }

    public RichInputDate getTxtEffectiveDate() {
        return this.txtEffectiveDate;
    }

    public void setClbPromote(RichCommandButton clbPromote) {
        this.clbPromote = clbPromote;
    }

    public RichCommandButton getClbPromote() {
        return this.clbPromote;
    }

    public void setClbDemote(RichCommandButton clbDemote) {
        this.clbDemote = clbDemote;
    }

    public RichCommandButton getClbDemote() {
        return this.clbDemote;
    }

    public void setTxtOneChoice(RichSelectOneChoice txtOneChoice) {
        this.txtOneChoice = txtOneChoice;
    }

    public RichSelectOneChoice getTxtOneChoice() {
        return this.txtOneChoice;
    }

    public void setLblBranch(RichOutputLabel lblBranch) {
        this.lblBranch = lblBranch;
    }

    public RichOutputLabel getLblBranch() {
        return this.lblBranch;
    }

    public void setClbBranchDrop(RichCommandButton clbBranchDrop) {
        this.clbBranchDrop = clbBranchDrop;
    }

    public RichCommandButton getClbBranchDrop() {
        return this.clbBranchDrop;
    }

    public void setTxtOneChoiceDem(RichSelectOneChoice txtOneChoiceDem) {
        this.txtOneChoiceDem = txtOneChoiceDem;
    }

    public RichSelectOneChoice getTxtOneChoiceDem() {
        return this.txtOneChoiceDem;
    }

    public void setLblAgencyBranch(RichOutputLabel lblAgencyBranch) {
        this.lblAgencyBranch = lblAgencyBranch;
    }

    public RichOutputLabel getLblAgencyBranch() {
        return this.lblAgencyBranch;
    }

    public void setClbUnitManager(RichCommandButton clbUnitManager) {
        this.clbUnitManager = clbUnitManager;
    }

    public RichCommandButton getClbUnitManager() {
        return this.clbUnitManager;
    }

    public void setClbDemoteCmb(RichCommandButton clbDemoteCmb) {
        this.clbDemoteCmb = clbDemoteCmb;
    }

    public RichCommandButton getClbDemoteCmb() {
        return this.clbDemoteCmb;
    }

    public void setClbAuthDemotion(RichCommandButton clbAuthDemotion) {
        this.clbAuthDemotion = clbAuthDemotion;
    }

    public RichCommandButton getClbAuthDemotion() {
        return this.clbAuthDemotion;
    }

    public void setTxtTransactionType(RichOutputLabel txtTransactionType) {
        this.txtTransactionType = txtTransactionType;
    }

    public RichOutputLabel getTxtTransactionType() {
        return this.txtTransactionType;
    }

    public String promoteAgent() {
        BigDecimal agencyPref;
        BigDecimal unitPref;
        BigDecimal agencyCode = null;
        if (this.txtAgencyPrefix.getValue() != null) {
            if (this.txtAgencyPrefix.getValue().toString().length() > 3) {
                GlobalCC.INFORMATIONREPORTING((String)"The agency prefix cannot have more than 3 characters");
                return null;
            }
            agencyPref = new BigDecimal(this.txtAgencyPrefix.getValue().toString());
        } else {
            agencyPref = null;
        }
        if (this.txtUnitPrefix.getValue() != null) {
            if (this.txtUnitPrefix.getValue().toString().length() > 2) {
                GlobalCC.INFORMATIONREPORTING((String)"The unit Prefix cannot have more than two characters");
                return null;
            }
            unitPref = new BigDecimal(this.txtUnitPrefix.getValue().toString());
        } else {
            unitPref = null;
        }
        BigDecimal agencySeq = this.txtAgencySeq.getValue() != null ? new BigDecimal(this.txtAgencySeq.getValue().toString()) : null;
        BigDecimal brnCode = this.session.getAttribute("brnCode") != null ? new BigDecimal(this.session.getAttribute("brnCode").toString()) : null;
        agencyCode = this.session.getAttribute("agencyCode") != null ? new BigDecimal(this.session.getAttribute("agencyCode").toString()) : null;
        String transType = this.txtAgentChoices.getValue() != null ? this.txtAgentChoices.getValue().toString() : null;
        String promType = this.txtOneChoice.getValue() != null ? this.txtOneChoice.getValue().toString() : null;
        BigDecimal braCode = this.session.getAttribute("braCode") != null ? new BigDecimal(this.session.getAttribute("braCode").toString()) : null;
        BigDecimal precontractCode = this.txtPrecontractCode.getValue() != null ? new BigDecimal(this.txtPrecontractCode.getValue().toString()) : null;
        DBConnector connector = new DBConnector();
        OracleConnection connection = null;
        try {
            connection = connector.getDatabaseConnection();
            String query = "begin LMS_WEB_PKG_UND.agentPromoDemotion(?,?,?,?,?,?,?,?,?,?,?); end;";
            OracleCallableStatement statement = null;
            statement = (OracleCallableStatement)connection.prepareCall(query);
            statement.setBigDecimal(1, agencyCode);
            statement.setBigDecimal(2, brnCode);
            statement.setString(3, transType);
            statement.setString(4, promType);
            statement.setDate(5, GlobalCC.extractDate((RichInputDate)this.txtEffectiveDate));
            statement.setString(6, this.session.getAttribute("Username").toString());
            statement.setBigDecimal(7, braCode);
            statement.setBigDecimal(8, agencyPref);
            statement.setBigDecimal(9, unitPref);
            statement.setBigDecimal(10, agencySeq);
            statement.setBigDecimal(11, precontractCode);
            statement.execute();
            connection.close();
            GlobalCC.INFORMATIONREPORTING((String)"Promotion Successfull");
        }
        catch (Exception e) {
            GlobalCC.EXCEPTIONREPORTING((Exception)e);
        }
        this.clbDemote.setVisible(true);
        this.clbAuthDemotion.setVisible(false);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.clbDemote);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.clbAuthDemotion);
        return null;
    }

    public String demoteAgent() {
        BigDecimal unitPref;
        BigDecimal agencyCode = null;
        BigDecimal precontractCode = this.txtPrecontractCode.getValue() != null ? new BigDecimal(this.txtPrecontractCode.getValue().toString()) : null;
        if (this.txtUnitPrefix.getValue() != null) {
            if (this.txtUnitPrefix.getValue().toString().length() > 2) {
                GlobalCC.INFORMATIONREPORTING((String)"The unit Prefix cannot have more than two characters");
                return null;
            }
            unitPref = new BigDecimal(this.txtUnitPrefix.getValue().toString());
        } else {
            unitPref = null;
        }
        BigDecimal brnCode = this.session.getAttribute("brnCode") != null ? new BigDecimal(this.session.getAttribute("brnCode").toString()) : null;
        agencyCode = this.session.getAttribute("agencyCode") != null ? new BigDecimal(this.session.getAttribute("agencyCode").toString()) : null;
        String transType = this.txtAgentChoices.getValue() != null ? this.txtAgentChoices.getValue().toString() : null;
        String promType = this.txtOneChoiceDem.getValue() != null ? this.txtOneChoiceDem.getValue().toString() : null;
        BigDecimal braCode = this.session.getAttribute("braCode") != null ? new BigDecimal(this.session.getAttribute("braCode").toString()) : null;
        DBConnector connector = new DBConnector();
        OracleConnection connection = null;
        try {
            connection = connector.getDatabaseConnection();
            String query = "begin LMS_WEB_PKG_UND.agentPromoDemotion(?,?,?,?,?,?,?,?,?,?,?); end;";
            OracleCallableStatement statement = null;
            statement = (OracleCallableStatement)connection.prepareCall(query);
            statement.setBigDecimal(1, agencyCode);
            statement.setBigDecimal(2, brnCode);
            statement.setString(3, transType);
            statement.setString(4, promType);
            statement.setDate(5, GlobalCC.extractDate((RichInputDate)this.txtEffectiveDate));
            statement.setString(6, this.session.getAttribute("Username").toString());
            statement.setBigDecimal(7, braCode);
            statement.setBigDecimal(8, null);
            statement.setBigDecimal(9, unitPref);
            statement.setBigDecimal(10, null);
            statement.setBigDecimal(11, precontractCode);
            statement.execute();
            connection.close();
            GlobalCC.INFORMATIONREPORTING((String)"Demotion Successfull");
        }
        catch (Exception e) {
            GlobalCC.EXCEPTIONREPORTING((Exception)e);
        }
        this.clbAuthDemotion.setVisible(true);
        this.clbDemote.setVisible(false);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.clbAuthDemotion);
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.clbDemote);
        return null;
    }

    public String authorisePromotion() {
        BigDecimal agencyCode = null;
        BigDecimal brnCode = this.session.getAttribute("brnCode") != null ? new BigDecimal(this.session.getAttribute("brnCode").toString()) : null;
        agencyCode = this.session.getAttribute("agencyCode") != null ? new BigDecimal(this.session.getAttribute("agencyCode").toString()) : null;
        String transType = this.txtAgentChoices.getValue() != null ? this.txtAgentChoices.getValue().toString() : null;
        String promType = this.txtOneChoice.getValue() != null ? this.txtOneChoice.getValue().toString() : null;
        if (this.session.getAttribute("braCode") != null) {
            BigDecimal braCode = new BigDecimal(this.session.getAttribute("braCode").toString());
        } else {
            Object braCode = null;
        }
        DBConnector connector = new DBConnector();
        OracleConnection connection = null;
        try {
            connection = connector.getDatabaseConnection();
            String query = "begin LMS_WEB_PKG_UND.authorizeAgentPromotion(?,?,?,?,?,?); end;";
            OracleCallableStatement statement = null;
            statement = (OracleCallableStatement)connection.prepareCall(query);
            statement.setBigDecimal(1, agencyCode);
            statement.setBigDecimal(3, brnCode);
            statement.setString(4, transType);
            statement.setString(5, promType);
            statement.setDate(2, GlobalCC.extractDate((RichInputDate)this.txtEffectiveDate));
            statement.setString(6, this.session.getAttribute("Username").toString());
            statement.execute();
            connection.close();
            GlobalCC.INFORMATIONREPORTING((String)"Promotion Authorised Successfully");
        }
        catch (Exception e) {
            GlobalCC.EXCEPTIONREPORTING((Exception)e);
        }
        return null;
    }

    public String authoriseDemotion() {
        BigDecimal agencyCode = null;
        if (this.session.getAttribute("brnCode") != null) {
            BigDecimal brnCode = new BigDecimal(this.session.getAttribute("brnCode").toString());
        } else {
            Object brnCode = null;
        }
        agencyCode = this.session.getAttribute("agencyCode") != null ? new BigDecimal(this.session.getAttribute("agencyCode").toString()) : null;
        String transType = this.txtAgentChoices.getValue() != null ? this.txtAgentChoices.getValue().toString() : null;
        String promType = this.txtOneChoiceDem.getValue() != null ? this.txtOneChoiceDem.getValue().toString() : null;
        BigDecimal braCode = this.session.getAttribute("braCode") != null ? new BigDecimal(this.session.getAttribute("braCode").toString()) : null;
        DBConnector connector = new DBConnector();
        OracleConnection connection = null;
        try {
            connection = connector.getDatabaseConnection();
            String query = "begin LMS_WEB_PKG_UND.authorizeAgentDemotion(?,?,?,?,?,?); end;";
            OracleCallableStatement statement = null;
            statement = (OracleCallableStatement)connection.prepareCall(query);
            statement.setBigDecimal(1, agencyCode);
            statement.setBigDecimal(2, braCode);
            statement.setString(4, transType);
            statement.setString(5, promType);
            statement.setDate(3, GlobalCC.extractDate((RichInputDate)this.txtEffectiveDate));
            statement.setString(6, this.session.getAttribute("Username").toString());
            statement.execute();
            connection.close();
            GlobalCC.INFORMATIONREPORTING((String)"Demotion Authorised Successfully");
        }
        catch (Exception e) {
            GlobalCC.EXCEPTIONREPORTING((Exception)e);
        }
        return null;
    }

    public void setTxtAgencyPrefix(RichInputNumberSpinbox txtAgencyPrefix) {
        this.txtAgencyPrefix = txtAgencyPrefix;
    }

    public RichInputNumberSpinbox getTxtAgencyPrefix() {
        return this.txtAgencyPrefix;
    }

    public void setTxtUnitPrefix(RichInputNumberSpinbox txtUnitPrefix) {
        this.txtUnitPrefix = txtUnitPrefix;
    }

    public RichInputNumberSpinbox getTxtUnitPrefix() {
        return this.txtUnitPrefix;
    }

    public void setTxtAgencySeq(RichInputNumberSpinbox txtAgencySeq) {
        this.txtAgencySeq = txtAgencySeq;
    }

    public RichInputNumberSpinbox getTxtAgencySeq() {
        return this.txtAgencySeq;
    }

    public void setLblEffectiveDate(RichOutputLabel lblEffectiveDate) {
        this.lblEffectiveDate = lblEffectiveDate;
    }

    public RichOutputLabel getLblEffectiveDate() {
        return this.lblEffectiveDate;
    }

    public void setLblAgencyPrefix(RichOutputLabel lblAgencyPrefix) {
        this.lblAgencyPrefix = lblAgencyPrefix;
    }

    public RichOutputLabel getLblAgencyPrefix() {
        return this.lblAgencyPrefix;
    }

    public void setLblUnitPrefix(RichOutputLabel lblUnitPrefix) {
        this.lblUnitPrefix = lblUnitPrefix;
    }

    public RichOutputLabel getLblUnitPrefix() {
        return this.lblUnitPrefix;
    }

    public void setLblAgencySeq(RichOutputLabel lblAgencySeq) {
        this.lblAgencySeq = lblAgencySeq;
    }

    public RichOutputLabel getLblAgencySeq() {
        return this.lblAgencySeq;
    }

    public void setPrecontractCode(RichOutputLabel precontractCode) {
        this.precontractCode = precontractCode;
    }

    public RichOutputLabel getPrecontractCode() {
        return this.precontractCode;
    }

    public void setTxtPrecontractCode(RichInputNumberSpinbox txtPrecontractCode) {
        this.txtPrecontractCode = txtPrecontractCode;
    }

    public RichInputNumberSpinbox getTxtPrecontractCode() {
        return this.txtPrecontractCode;
    }

    public void setTxtCreditLimit(RichInputNumberSpinbox txtCreditLimit) {
        this.txtCreditLimit = txtCreditLimit;
    }

    public RichInputNumberSpinbox getTxtCreditLimit() {
        return this.txtCreditLimit;
    }

    public void selectCreditAllowed(ValueChangeEvent valueChangeEvent) {
    }

    public void selectCredit(ValueChangeEvent valueChangeEvent) {
        if (valueChangeEvent.getOldValue() != valueChangeEvent.getNewValue()) {
            if (this.txtCreditAllowed.getValue() != null) {
                if (this.txtCreditAllowed.getValue().equals("Y")) {
                    this.txtCreditLimit.setVisible(true);
                } else {
                    this.txtCreditLimit.setVisible(false);
                }
            } else {
                this.txtCreditLimit.setVisible(false);
            }
        }
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtCreditLimit);
    }

    public void setTxtPhoneNumber(RichInputText txtPhoneNumber) {
        this.txtPhoneNumber = txtPhoneNumber;
    }

    public RichInputText getTxtPhoneNumber() {
        return this.txtPhoneNumber;
    }

    public void setTxtBranchUnits(RichInputText txtBranchUnits) {
        this.txtBranchUnits = txtBranchUnits;
    }

    public RichInputText getTxtBranchUnits() {
        return this.txtBranchUnits;
    }

    public String selectBranchUnits() {
        Object key = this.branchUnitsTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No Record Selected");
            return null;
        }
        this.session.setAttribute("bruCode", r.getAttribute("bruCode"));
        this.txtBranchUnits.setValue(r.getAttribute("bruName"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtBranchUnits);
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:BranchUnitPop').hide(hints);");
        return null;
    }

    public void setBranchUnitsTbl(RichTable branchUnitsTbl) {
        this.branchUnitsTbl = branchUnitsTbl;
    }

    public RichTable getBranchUnitsTbl() {
        return this.branchUnitsTbl;
    }

    public void setTxtLocalInt(RichSelectOneChoice txtLocalInt) {
        this.txtLocalInt = txtLocalInt;
    }

    public RichSelectOneChoice getTxtLocalInt() {
        return this.txtLocalInt;
    }

    public String authorizeAccount() {
        DBConnector connector = new DBConnector();
        OracleConnection connection = null;
        try {
            connection = connector.getDatabaseConnection();
            String query = "begin TQC_SETUPS_PKG.AuthorizeAccount(?,?); end;";
            OracleCallableStatement statement = null;
            statement = (OracleCallableStatement)connection.prepareCall(query);
            statement.setObject(1, this.session.getAttribute("Username"));
            statement.setObject(2, this.session.getAttribute("agencyCode"));
            statement.execute();
            connection.close();
            this.txtAuthorised.setDisabled(true);
        }
        catch (Exception e) {
            GlobalCC.EXCEPTIONREPORTING((Exception)e);
        }
        return null;
    }

    public void setTxtPrincipleDirector(RichSelectOneChoice txtPrincipleDirector) {
        this.txtPrincipleDirector = txtPrincipleDirector;
    }

    public RichSelectOneChoice getTxtPrincipleDirector() {
        return this.txtPrincipleDirector;
    }

    private String getPrincipleDirector(String principleDir) {
        DBConnector connector = new DBConnector();
        OracleConnection connection = null;
        try {
            connection = connector.getDatabaseConnection();
            String query = "begin TQC_AGENCIES_PKG.getAgencyPrincipleDir(?,?); end;";
            OracleCallableStatement statement = null;
            statement = (OracleCallableStatement)connection.prepareCall(query);
            statement.setBigDecimal(1, new BigDecimal((String)this.session.getAttribute("agencyCode")));
            statement.setObject(2, (Object)principleDir);
            statement.execute();
            connection.close();
        }
        catch (Exception e) {
            GlobalCC.EXCEPTIONREPORTING((Exception)e);
        }
        return null;
    }

    public void setTxtIraRegNumber(RichInputText txtIraRegNumber) {
        this.txtIraRegNumber = txtIraRegNumber;
    }

    public RichInputText getTxtIraRegNumber() {
        return this.txtIraRegNumber;
    }

    public void setTxtAuthorised(RichCommandButton txtAuthorised) {
        this.txtAuthorised = txtAuthorised;
    }

    public RichCommandButton getTxtAuthorised() {
        return this.txtAuthorised;
    }

    public void setCountryTbl(RichTable countryTbl) {
        this.countryTbl = countryTbl;
    }

    public RichTable getCountryTbl() {
        return this.countryTbl;
    }

    public void selectCountry(ActionEvent actionEvent) {
    }

    public String selectCountry() {
        Object key = this.countryTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No record Selected");
            return null;
        }
        this.txtNationality.setValue(r.getAttribute("name"));
        this.session.setAttribute("countryCode", r.getAttribute("code"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtNationality);
        GlobalCC.dismissPopUp((String)"pt1", (String)"p4");
        return null;
    }

    public void setTxtNationality(RichInputText txtNationality) {
        this.txtNationality = txtNationality;
    }

    public RichInputText getTxtNationality() {
        return this.txtNationality;
    }

    public void setTxtRatingOrg(RichInputText txtRatingOrg) {
        this.txtRatingOrg = txtRatingOrg;
    }

    public RichInputText getTxtRatingOrg() {
        return this.txtRatingOrg;
    }

    public void setTxtRating(RichInputText txtRating) {
        this.txtRating = txtRating;
    }

    public RichInputText getTxtRating() {
        return this.txtRating;
    }

    public void setOrgRatingTbl(RichTable orgRatingTbl) {
        this.orgRatingTbl = orgRatingTbl;
    }

    public RichTable getOrgRatingTbl() {
        return this.orgRatingTbl;
    }

    public String selectRatingOrganizations() {
        Object key = this.orgRatingTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No Record Selected");
            return null;
        }
        this.session.setAttribute("rorgCode", r.getAttribute("rorgCode"));
        this.txtRatingOrg.setValue(r.getAttribute("rorgDesc"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtRatingOrg);
        ADFUtils.findIterator((String)"findRatingStartndardsIterator").executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.ratingTbl);
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:OrgRating').hide(hints);");
        return null;
    }

    public String selectRating() {
        return null;
    }

    public String selectRatingDtls() {
        Object key = this.ratingTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No Record Selected");
            return null;
        }
        this.session.setAttribute("orsCode", r.getAttribute("orsCode"));
        this.txtRating.setValue(r.getAttribute("orsDesc"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtRating);
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:RatingPop').hide(hints);");
        return null;
    }

    public void setRatingTbl(RichTable ratingTbl) {
        this.ratingTbl = ratingTbl;
    }

    public RichTable getRatingTbl() {
        return this.ratingTbl;
    }

    public String selectRatingPop() {
        if (this.txtRatingOrg.getValue() == null) {
            GlobalCC.INFORMATIONREPORTING((String)"Please select rating Organization");
            return null;
        }
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:RatingPop').show(hints);");
        return null;
    }

    public void setTxtAgencySelected(RichSelectOneChoice txtAgencySelected) {
        this.txtAgencySelected = txtAgencySelected;
    }

    public RichSelectOneChoice getTxtAgencySelected() {
        return this.txtAgencySelected;
    }

    public void setTxtIssueCert(RichSelectOneChoice txtIssueCert) {
        this.txtIssueCert = txtIssueCert;
    }

    public RichSelectOneChoice getTxtIssueCert() {
        return this.txtIssueCert;
    }

    public String selectBranchDtls() {
        Object key = this.branchTblDtls.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No Record Selected");
            return null;
        }
        this.txtBranch.setValue(r.getAttribute("branchName"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtBranch);
        this.session.setAttribute("branchCode", r.getAttribute("branchCode"));
        return null;
    }

    public void setBranchTblDtls(RichTable branchTblDtls) {
        this.branchTblDtls = branchTblDtls;
    }

    public RichTable getBranchTblDtls() {
        return this.branchTblDtls;
    }

    public void setTxtBranch(RichInputText txtBranch) {
        this.txtBranch = txtBranch;
    }

    public RichInputText getTxtBranch() {
        return this.txtBranch;
    }

    public String selectCountryDtls() {
        Object key = this.countryTblDtls.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No Record Selected");
            return null;
        }
        this.session.setAttribute("Countrycode", r.getAttribute("code"));
        this.txtCountry.setValue(r.getAttribute("name"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtCountry);
        this.session.setAttribute("countryPop", r.getAttribute("code"));
        return null;
    }

    public void setCountryTblDtls(RichTable countryTblDtls) {
        this.countryTblDtls = countryTblDtls;
    }

    public RichTable getCountryTblDtls() {
        return this.countryTblDtls;
    }

    public void setTxtCountry(RichInputText txtCountry) {
        this.txtCountry = txtCountry;
    }

    public RichInputText getTxtCountry() {
        return this.txtCountry;
    }

    public void setPrefixTbl(RichTable prefixTbl) {
        this.prefixTbl = prefixTbl;
    }

    public RichTable getPrefixTbl() {
        return this.prefixTbl;
    }

    public String selectPrefixPop() {
        Object key = this.prefixTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No Record Selected");
            return null;
        }
        this.session.setAttribute("mptCode", r.getAttribute("mptCode"));
        this.txtPrefixVals.setValue(r.getAttribute("prefix"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtPrefixVals);
        return null;
    }

    public void setTxtPrefixVals(RichInputText txtPrefixVals) {
        this.txtPrefixVals = txtPrefixVals;
    }

    public RichInputText getTxtPrefixVals() {
        return this.txtPrefixVals;
    }

    public void setClientTitleTbl(RichTable clientTitleTbl) {
        this.clientTitleTbl = clientTitleTbl;
    }

    public RichTable getClientTitleTbl() {
        return this.clientTitleTbl;
    }

    public String selectClientTitle() {
        Object key = this.clientTitleTblDtls.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No Record Selected");
            return null;
        }
        this.session.setAttribute("ClientTitlecode", r.getAttribute("code"));
        this.txtClientTitle.setValue(r.getAttribute("description"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtClientTitle);
        return null;
    }

    public String selectBank() {
        Object key = this.bankTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No Record Selected");
            return null;
        }
        this.session.setAttribute("bankCode", r.getAttribute("bankCode"));
        this.txtBankName.setValue(r.getAttribute("bankName"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtBankName);
        return null;
    }

    public void setBankTbl(RichTable bankTbl) {
        this.bankTbl = bankTbl;
    }

    public RichTable getBankTbl() {
        return this.bankTbl;
    }

    public void setBankBranchTbl(RichTable bankBranchTbl) {
        this.bankBranchTbl = bankBranchTbl;
    }

    public RichTable getBankBranchTbl() {
        return this.bankBranchTbl;
    }

    public String selectBankBranch() {
        Object key = this.bankBranchTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No Record Selected");
            return null;
        }
        this.session.setAttribute("BankbranchCode", r.getAttribute("branchCode"));
        this.txtBankBranch.setValue(r.getAttribute("branchName"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtBankBranch);
        return null;
    }

    public String selectSectors() {
        Object key = this.sectorTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No Record Selected");
            return null;
        }
        this.session.setAttribute("sectorCode", r.getAttribute("code"));
        this.txtSector.setValue(r.getAttribute("name"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtSector);
        return null;
    }

    public void setSectorTbl(RichTable sectorTbl) {
        this.sectorTbl = sectorTbl;
    }

    public RichTable getSectorTbl() {
        return this.sectorTbl;
    }

    public void setTxtSector(RichInputText txtSector) {
        this.txtSector = txtSector;
    }

    public RichInputText getTxtSector() {
        return this.txtSector;
    }

    public void setTxtShtDesc(RichInputText txtShtDesc) {
        this.txtShtDesc = txtShtDesc;
    }

    public RichInputText getTxtShtDesc() {
        return this.txtShtDesc;
    }

    public void setTxtPhysicalAddress(RichInputText txtPhysicalAddress) {
        this.txtPhysicalAddress = txtPhysicalAddress;
    }

    public RichInputText getTxtPhysicalAddress() {
        return this.txtPhysicalAddress;
    }

    public void setTxtPostalAddress(RichInputText txtPostalAddress) {
        this.txtPostalAddress = txtPostalAddress;
    }

    public RichInputText getTxtPostalAddress() {
        return this.txtPostalAddress;
    }

    public void setTxtSelectClientTitle(RichCommandButton txtSelectClientTitle) {
        this.txtSelectClientTitle = txtSelectClientTitle;
    }

    public RichCommandButton getTxtSelectClientTitle() {
        return this.txtSelectClientTitle;
    }

    public void setTxtClientTitle(RichInputText txtClientTitle) {
        this.txtClientTitle = txtClientTitle;
    }

    public RichInputText getTxtClientTitle() {
        return this.txtClientTitle;
    }

    public void setClientTitleTblDtls(RichTable clientTitleTblDtls) {
        this.clientTitleTblDtls = clientTitleTblDtls;
    }

    public RichTable getClientTitleTblDtls() {
        return this.clientTitleTblDtls;
    }

    public String saveUpdateEntities() {
        String textSms = this.txtSms.getValue() != null ? this.txtSms.getValue().toString() : null;
        String phoneNumber = this.txtPrefixVals.getValue() != null ? this.txtPrefixVals.getValue().toString() : null;
        if (phoneNumber != null) {
            phoneNumber.concat(textSms);
        }
        this.session.removeAttribute("EntityCode");
        DBConnector connector = new DBConnector();
        OracleConnection connection = null;
        try {
            if (this.txtName.getValue() != null) {
                connection = connector.getDatabaseConnection();
                String query = "begin TQC_SETUPS_PKG.updateentities(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                OracleCallableStatement statement = null;
                statement = (OracleCallableStatement)connection.prepareCall(query);
                statement.setObject(1, (Object)"A");
                statement.registerOutParameter(2, 2);
                statement.setObject(3, this.txtShtDesc.getValue());
                statement.setObject(4, this.txtName.getValue());
                statement.setObject(5, this.txtPhysicalAddress.getValue());
                statement.setObject(6, this.txtPostalAddress.getValue());
                statement.setObject(7, this.session.getAttribute("townCode"));
                statement.setObject(8, this.session.getAttribute("Countrycode"));
                statement.setObject(9, this.txtEmail.getValue());
                statement.setObject(10, this.txtFax.getValue());
                statement.setObject(11, this.txtAgencyStatus.getValue());
                statement.setObject(12, this.session.getAttribute("BankbranchCode"));
                statement.setObject(13, this.txtBankAccountNumber.getValue());
                statement.setObject(14, this.txtZip.getValue());
                statement.setObject(15, (Object)phoneNumber);
                statement.setObject(16, this.session.getAttribute("Username"));
                statement.setObject(17, (Object)null);
                statement.setObject(18, this.txtAgencyPIN.getValue());
                statement.setObject(19, this.txtOffice.getValue());
                statement.setObject(20, this.txtAgencyPhone2.getValue());
                statement.setObject(21, this.txtAgencyStatusRemarks.getValue());
                statement.setObject(22, this.session.getAttribute("branchCode"));
                statement.setObject(23, this.txtIdNumber.getValue());
                statement.setObject(24, this.txtAgencyPhone2.getValue());
                statement.setObject(25, this.session.getAttribute("sectorCode"));
                statement.setObject(26, this.txtAgencyRunoff.getValue());
                statement.setObject(27, this.txtOldAccount.getValue());
                statement.setObject(28, this.txtClientTitle.getValue());
                statement.setObject(29, (Object)GlobalCC.extractDate((RichInputDate)this.txtWef));
                statement.setObject(30, (Object)GlobalCC.extractDate((RichInputDate)this.txtWet));
                statement.setObject(31, this.txtContactPerson.getValue());
                if (this.session.getAttribute("source").equals("FromClient")) {
                    statement.setObject(32, (Object)"C");
                }
                statement.execute();
                GlobalCC.INFORMATIONREPORTING((String)"Record Created Successfully");
                BigDecimal returnedCode = statement.getBigDecimal(2);
                this.session.setAttribute("EntityCode", (Object)returnedCode);
                if (this.session.getAttribute("EntityCode") != null) {
                    this.txtNextBtn.setDisabled(true);
                }
                AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtNextBtn);
                connection.close();
                this.session.removeAttribute("source");
                FacesContext.getCurrentInstance().getExternalContext().redirect("clients.jspx");
            } else if (this.session.getAttribute("source").equals("FromClient")) {
                this.session.removeAttribute("source");
                FacesContext.getCurrentInstance().getExternalContext().redirect("clients.jspx");
            }
        }
        catch (Exception e) {
            GlobalCC.EXCEPTIONREPORTING((Exception)e);
        }
        return null;
    }

    public void setTxtName(RichInputText txtName) {
        this.txtName = txtName;
    }

    public RichInputText getTxtName() {
        return this.txtName;
    }

    public void setTxtEmail(RichInputText txtEmail) {
        this.txtEmail = txtEmail;
    }

    public RichInputText getTxtEmail() {
        return this.txtEmail;
    }

    public void setTxtFax(RichInputText txtFax) {
        this.txtFax = txtFax;
    }

    public RichInputText getTxtFax() {
        return this.txtFax;
    }

    public void setTxtBankAccountNumber(RichInputText txtBankAccountNumber) {
        this.txtBankAccountNumber = txtBankAccountNumber;
    }

    public RichInputText getTxtBankAccountNumber() {
        return this.txtBankAccountNumber;
    }

    public void setTxtZip(RichInputText txtZip) {
        this.txtZip = txtZip;
    }

    public RichInputText getTxtZip() {
        return this.txtZip;
    }

    public void setTxtOffice(RichInputText txtOffice) {
        this.txtOffice = txtOffice;
    }

    public RichInputText getTxtOffice() {
        return this.txtOffice;
    }

    public void setTxtIdNumber(RichInputText txtIdNumber) {
        this.txtIdNumber = txtIdNumber;
    }

    public RichInputText getTxtIdNumber() {
        return this.txtIdNumber;
    }

    public void setTxtOldAccount(RichInputText txtOldAccount) {
        this.txtOldAccount = txtOldAccount;
    }

    public RichInputText getTxtOldAccount() {
        return this.txtOldAccount;
    }

    public void setTxtWef(RichInputDate txtWef) {
        this.txtWef = txtWef;
    }

    public RichInputDate getTxtWef() {
        return this.txtWef;
    }

    public void setTxtWet(RichInputDate txtWet) {
        this.txtWet = txtWet;
    }

    public RichInputDate getTxtWet() {
        return this.txtWet;
    }

    public void setTownPopTbl(RichTable townPopTbl) {
        this.townPopTbl = townPopTbl;
    }

    public RichTable getTownPopTbl() {
        return this.townPopTbl;
    }

    public String selectTownDtls() {
        Object key = this.townPopTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No Record Selected");
            return null;
        }
        this.session.setAttribute("townCode", r.getAttribute("code"));
        this.txtTown.setValue(r.getAttribute("name"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtTown);
        return null;
    }

    public void setTxtNextBtn(RichCommandButton txtNextBtn) {
        this.txtNextBtn = txtNextBtn;
    }

    public RichCommandButton getTxtNextBtn() {
        return this.txtNextBtn;
    }

    public void setTxtSectors(RichInputText txtSectors) {
        this.txtSectors = txtSectors;
    }

    public RichInputText getTxtSectors() {
        return this.txtSectors;
    }

    public void setTxtTown(RichInputText txtTown) {
        this.txtTown = txtTown;
    }

    public RichInputText getTxtTown() {
        return this.txtTown;
    }

    public void setTxtSms(RichInputText txtSms) {
        this.txtSms = txtSms;
    }

    public RichInputText getTxtSms() {
        return this.txtSms;
    }

    public String selectSearchPop() {
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:searchClientPop').show(hints);");
        return null;
    }

    public String BranchUnitPop() {
        Rendering renderer = new Rendering();
        if (renderer.isREGION_UNIT_DEPEDENCY() && this.txtAgencyRegionCode.getValue() == null) {
            GlobalCC.INFORMATIONREPORTING((String)"Please Select Region Before Selecting Branch Unit!");
            return null;
        }
        ADFUtils.findIterator((String)"findBranchUnitsIterator").executeQuery();
        GlobalCC.refreshUI((UIComponent)this.branchUnitPopUp);
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:BranchUnitPop').show(hints);");
        return null;
    }

    public void setGridClientSearchDetails(HtmlPanelGrid gridClientSearchDetails) {
        this.gridClientSearchDetails = gridClientSearchDetails;
    }

    public HtmlPanelGrid getGridClientSearchDetails() {
        return this.gridClientSearchDetails;
    }

    public void setSearchFormHolder(RichPanelGroupLayout searchFormHolder) {
        this.searchFormHolder = searchFormHolder;
    }

    public RichPanelGroupLayout getSearchFormHolder() {
        return this.searchFormHolder;
    }

    public void setSEARCHHOLDER(RichPanelFormLayout SEARCHHOLDER) {
        this.SEARCHHOLDER = SEARCHHOLDER;
    }

    public RichPanelFormLayout getSEARCHHOLDER() {
        return this.SEARCHHOLDER;
    }

    public void enterKeyPressed(ValueChangeEvent valueChangeEvent) {
    }

    public void setTxtSearchName(RichInputText txtSearchName) {
        this.txtSearchName = txtSearchName;
    }

    public RichInputText getTxtSearchName() {
        return this.txtSearchName;
    }

    public void setTxtSearchShortDesc(RichInputText txtSearchShortDesc) {
        this.txtSearchShortDesc = txtSearchShortDesc;
    }

    public RichInputText getTxtSearchShortDesc() {
        return this.txtSearchShortDesc;
    }

    public void setTxtSearchPhysical(RichInputText txtSearchPhysical) {
        this.txtSearchPhysical = txtSearchPhysical;
    }

    public RichInputText getTxtSearchPhysical() {
        return this.txtSearchPhysical;
    }

    public void setTxtSearchPostal(RichInputText txtSearchPostal) {
        this.txtSearchPostal = txtSearchPostal;
    }

    public RichInputText getTxtSearchPostal() {
        return this.txtSearchPostal;
    }

    public void setTxtSearchSector(RichInputText txtSearchSector) {
        this.txtSearchSector = txtSearchSector;
    }

    public RichInputText getTxtSearchSector() {
        return this.txtSearchSector;
    }

    public void setResetSearchContainer(RichPanelLabelAndMessage resetSearchContainer) {
        this.resetSearchContainer = resetSearchContainer;
    }

    public RichPanelLabelAndMessage getResetSearchContainer() {
        return this.resetSearchContainer;
    }

    public void setTxtSrchSectorName(RichInputText txtSrchSectorName) {
        this.txtSrchSectorName = txtSrchSectorName;
    }

    public RichInputText getTxtSrchSectorName() {
        return this.txtSrchSectorName;
    }

    public void setBtnSectorLov(RichCommandButton btnSectorLov) {
        this.btnSectorLov = btnSectorLov;
    }

    public RichCommandButton getBtnSectorLov() {
        return this.btnSectorLov;
    }

    public void setStatusHolder(RichPanelLabelAndMessage statusHolder) {
        this.statusHolder = statusHolder;
    }

    public RichPanelLabelAndMessage getStatusHolder() {
        return this.statusHolder;
    }

    public void setTxtSearchStatus(RichSelectOneChoice txtSearchStatus) {
        this.txtSearchStatus = txtSearchStatus;
    }

    public RichSelectOneChoice getTxtSearchStatus() {
        return this.txtSearchStatus;
    }

    public void cboSearchStatusListener(ValueChangeEvent valueChangeEvent) {
    }

    public void setClntDateCreatedFrom(RichInputDate clntDateCreatedFrom) {
        this.clntDateCreatedFrom = clntDateCreatedFrom;
    }

    public RichInputDate getClntDateCreatedFrom() {
        return this.clntDateCreatedFrom;
    }

    public void setClntDateCreatedTo(RichInputDate clntDateCreatedTo) {
        this.clntDateCreatedTo = clntDateCreatedTo;
    }

    public RichInputDate getClntDateCreatedTo() {
        return this.clntDateCreatedTo;
    }

    public void setPinNumber(RichInputText pinNumber) {
        this.pinNumber = pinNumber;
    }

    public RichInputText getPinNumber() {
        return this.pinNumber;
    }

    public void setRbtnSearchAccountNo(RichSelectBooleanRadio rbtnSearchAccountNo) {
        this.rbtnSearchAccountNo = rbtnSearchAccountNo;
    }

    public RichSelectBooleanRadio getRbtnSearchAccountNo() {
        return this.rbtnSearchAccountNo;
    }

    public void setRbtnPartOfAnyName(RichSelectBooleanRadio rbtnPartOfAnyName) {
        this.rbtnPartOfAnyName = rbtnPartOfAnyName;
    }

    public RichSelectBooleanRadio getRbtnPartOfAnyName() {
        return this.rbtnPartOfAnyName;
    }

    public void criteriaValueChangeListener(ValueChangeEvent valueChangeEvent) {
        if (valueChangeEvent.getNewValue() != valueChangeEvent.getOldValue()) {
            System.out.println("This is the one");
            if (this.rbtnSearchAccountNo.isSelected()) {
                System.out.println("This is the one 5345");
                this.txtAccountNo.setDisabled(false);
                this.txtSearchShortDesc.setDisabled(true);
                this.txtSearchName.setDisabled(true);
                this.txtSearchPhysical.setDisabled(true);
                this.txtSrchSectorName.setDisabled(true);
                this.btnSectorLov.setDisabled(true);
                this.txtSearchStatus.setDisabled(true);
                this.clntDateCreatedFrom.setDisabled(true);
                this.clntDateCreatedTo.setDisabled(true);
                this.pinNumber.setDisabled(true);
            } else if (this.rbtnPartOfAnyName.isSelected()) {
                this.txtAccountNo.setDisabled(true);
                this.txtSearchShortDesc.setDisabled(true);
                this.txtSearchName.setDisabled(true);
                this.txtSearchPhysical.setDisabled(true);
                this.txtSrchSectorName.setDisabled(true);
                this.btnSectorLov.setDisabled(true);
                this.txtSearchStatus.setDisabled(true);
                this.clntDateCreatedFrom.setDisabled(true);
                this.clntDateCreatedTo.setDisabled(true);
                this.pinNumber.setDisabled(true);
                this.txtSearchName.setDisabled(false);
            } else if (this.rbtnExactName.isSelected()) {
                this.txtAccountNo.setDisabled(true);
                this.txtSearchShortDesc.setDisabled(true);
                this.txtSearchName.setDisabled(true);
                this.txtSearchPhysical.setDisabled(true);
                this.txtSrchSectorName.setDisabled(true);
                this.btnSectorLov.setDisabled(true);
                this.txtSearchStatus.setDisabled(true);
                this.clntDateCreatedFrom.setDisabled(true);
                this.clntDateCreatedTo.setDisabled(true);
                this.pinNumber.setDisabled(true);
                this.txtSearchName.setDisabled(false);
                this.txtSearchPostal.setDisabled(true);
            } else if (this.rbtnSector.isSelected()) {
                this.txtAccountNo.setDisabled(true);
                this.txtSearchShortDesc.setDisabled(true);
                this.txtSearchName.setDisabled(true);
                this.txtSearchPhysical.setDisabled(true);
                this.txtSrchSectorName.setDisabled(true);
                this.btnSectorLov.setDisabled(true);
                this.txtSearchStatus.setDisabled(true);
                this.clntDateCreatedFrom.setDisabled(true);
                this.clntDateCreatedTo.setDisabled(true);
                this.pinNumber.setDisabled(true);
                this.txtSearchName.setDisabled(false);
                this.txtSearchPostal.setDisabled(true);
            } else if (this.rbtnSector.isSelected()) {
                this.txtAccountNo.setDisabled(true);
                this.txtSearchShortDesc.setDisabled(true);
                this.txtSearchName.setDisabled(true);
                this.txtSearchPhysical.setDisabled(true);
                this.txtSrchSectorName.setDisabled(true);
                this.btnSectorLov.setDisabled(false);
                this.txtSearchStatus.setDisabled(true);
                this.clntDateCreatedFrom.setDisabled(true);
                this.clntDateCreatedTo.setDisabled(true);
                this.pinNumber.setDisabled(true);
                this.txtSearchName.setDisabled(true);
                this.txtSearchPostal.setDisabled(true);
            } else if (this.rbtnStatus.isSelected()) {
                this.txtAccountNo.setDisabled(true);
                this.txtSearchShortDesc.setDisabled(true);
                this.txtSearchName.setDisabled(true);
                this.txtSearchPhysical.setDisabled(true);
                this.txtSrchSectorName.setDisabled(true);
                this.btnSectorLov.setDisabled(true);
                this.txtSearchStatus.setDisabled(false);
                this.clntDateCreatedFrom.setDisabled(true);
                this.clntDateCreatedTo.setDisabled(true);
                this.pinNumber.setDisabled(true);
                this.txtSearchName.setDisabled(true);
                this.txtSearchPostal.setDisabled(true);
            } else if (this.rbtnShortDesc.isSelected()) {
                this.txtAccountNo.setDisabled(true);
                this.txtSearchShortDesc.setDisabled(false);
                this.txtSearchName.setDisabled(true);
                this.txtSearchPhysical.setDisabled(true);
                this.txtSrchSectorName.setDisabled(true);
                this.btnSectorLov.setDisabled(true);
                this.txtSearchStatus.setDisabled(true);
                this.clntDateCreatedFrom.setDisabled(true);
                this.clntDateCreatedTo.setDisabled(true);
                this.pinNumber.setDisabled(true);
                this.txtSearchName.setDisabled(true);
                this.txtSearchPostal.setDisabled(true);
            } else if (this.rbtnDateCreated.isSelected()) {
                System.out.println("This is the one 5345566");
            } else if (this.rbtnPhySicalAddr.isSelected()) {
                this.txtAccountNo.setDisabled(true);
                this.txtSearchShortDesc.setDisabled(true);
                this.txtSearchName.setDisabled(true);
                this.txtSearchPhysical.setDisabled(false);
                this.txtSrchSectorName.setDisabled(true);
                this.btnSectorLov.setDisabled(true);
                this.txtSearchStatus.setDisabled(true);
                this.clntDateCreatedFrom.setDisabled(true);
                this.clntDateCreatedTo.setDisabled(true);
                this.pinNumber.setDisabled(true);
                this.txtSearchName.setDisabled(true);
                this.txtSearchPostal.setDisabled(true);
            } else if (this.rbtnPostalAddr.isSelected()) {
                this.txtAccountNo.setDisabled(true);
                this.txtSearchShortDesc.setDisabled(true);
                this.txtSearchName.setDisabled(true);
                this.txtSearchPhysical.setDisabled(false);
                this.txtSrchSectorName.setDisabled(true);
                this.btnSectorLov.setDisabled(true);
                this.txtSearchStatus.setDisabled(true);
                this.clntDateCreatedFrom.setDisabled(true);
                this.clntDateCreatedTo.setDisabled(true);
                this.pinNumber.setDisabled(true);
                this.txtSearchName.setDisabled(true);
                this.txtSearchPostal.setDisabled(true);
            } else if (this.txtPinNumber.isSelected()) {
                this.txtAccountNo.setDisabled(true);
                this.txtSearchShortDesc.setDisabled(true);
                this.txtSearchName.setDisabled(true);
                this.txtSearchPhysical.setDisabled(true);
                this.txtSrchSectorName.setDisabled(true);
                this.btnSectorLov.setDisabled(true);
                this.txtSearchStatus.setDisabled(true);
                this.clntDateCreatedFrom.setDisabled(true);
                this.clntDateCreatedTo.setDisabled(true);
                this.pinNumber.setDisabled(false);
                this.txtSearchName.setDisabled(true);
                this.txtSearchPostal.setDisabled(true);
            }
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAccountNo);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtSearchShortDesc);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtSearchName);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtSearchPhysical);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtSrchSectorName);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.btnSectorLov);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtSearchStatus);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.clntDateCreatedFrom);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.clntDateCreatedTo);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.pinNumber);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtSearchName);
            AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtSearchPostal);
        }
    }

    public void setRbtnExactName(RichSelectBooleanRadio rbtnExactName) {
        this.rbtnExactName = rbtnExactName;
    }

    public RichSelectBooleanRadio getRbtnExactName() {
        return this.rbtnExactName;
    }

    public void setRbtnStatus(RichSelectBooleanRadio rbtnStatus) {
        this.rbtnStatus = rbtnStatus;
    }

    public RichSelectBooleanRadio getRbtnStatus() {
        return this.rbtnStatus;
    }

    public void setRbtnShortDesc(RichSelectBooleanRadio rbtnShortDesc) {
        this.rbtnShortDesc = rbtnShortDesc;
    }

    public RichSelectBooleanRadio getRbtnShortDesc() {
        return this.rbtnShortDesc;
    }

    public void setRbtnShortDescLeg(RichSelectBooleanRadio rbtnShortDescLeg) {
        this.rbtnShortDescLeg = rbtnShortDescLeg;
    }

    public RichSelectBooleanRadio getRbtnShortDescLeg() {
        return this.rbtnShortDescLeg;
    }

    public void setRbtnPhySicalAddr(RichSelectBooleanRadio rbtnPhySicalAddr) {
        this.rbtnPhySicalAddr = rbtnPhySicalAddr;
    }

    public RichSelectBooleanRadio getRbtnPhySicalAddr() {
        return this.rbtnPhySicalAddr;
    }

    public void setRbtnPostalAddr(RichSelectBooleanRadio rbtnPostalAddr) {
        this.rbtnPostalAddr = rbtnPostalAddr;
    }

    public RichSelectBooleanRadio getRbtnPostalAddr() {
        return this.rbtnPostalAddr;
    }

    public void setRbtnCustomerId(RichSelectBooleanRadio rbtnCustomerId) {
        this.rbtnCustomerId = rbtnCustomerId;
    }

    public RichSelectBooleanRadio getRbtnCustomerId() {
        return this.rbtnCustomerId;
    }

    public void setRbtnOldNames(RichSelectBooleanRadio rbtnOldNames) {
        this.rbtnOldNames = rbtnOldNames;
    }

    public RichSelectBooleanRadio getRbtnOldNames() {
        return this.rbtnOldNames;
    }

    public void setTxtPinNumber(RichSelectBooleanRadio txtPinNumber) {
        this.txtPinNumber = txtPinNumber;
    }

    public RichSelectBooleanRadio getTxtPinNumber() {
        return this.txtPinNumber;
    }

    public String actionAcceptSearchCriteria() {
        return null;
    }

    public String actionResetSearch() {
        return null;
    }

    public void setPanelCollSearch(RichPanelCollection panelCollSearch) {
        this.panelCollSearch = panelCollSearch;
    }

    public RichPanelCollection getPanelCollSearch() {
        return this.panelCollSearch;
    }

    public void setRbtnSector(RichSelectBooleanRadio rbtnSector) {
        this.rbtnSector = rbtnSector;
    }

    public RichSelectBooleanRadio getRbtnSector() {
        return this.rbtnSector;
    }

    public void setRbtnDateCreated(RichSelectBooleanRadio rbtnDateCreated) {
        this.rbtnDateCreated = rbtnDateCreated;
    }

    public RichSelectBooleanRadio getRbtnDateCreated() {
        return this.rbtnDateCreated;
    }

    public void setRdoDateCreatedFrom(RichSelectBooleanRadio rdoDateCreatedFrom) {
        this.rdoDateCreatedFrom = rdoDateCreatedFrom;
    }

    public RichSelectBooleanRadio getRdoDateCreatedFrom() {
        return this.rdoDateCreatedFrom;
    }

    public String selectHoldingCompanies() {
        Object key = this.holdingCompaniesTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No Record selected");
            return null;
        }
        this.txtAgencyHoldingCompanyCode.setValue(r.getAttribute("CLNT_CODE"));
        this.txtAgencyHoldingCompanyName.setValue(r.getAttribute("CLNT_NAME"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgencyHoldingCompanyName);
        GlobalCC.dismissPopUp((String)"pt1", (String)"holdingCompanyPop");
        return null;
    }

    public void setHoldingCompaniesTbl(RichTable holdingCompaniesTbl) {
        this.holdingCompaniesTbl = holdingCompaniesTbl;
    }

    public RichTable getHoldingCompaniesTbl() {
        return this.holdingCompaniesTbl;
    }

    public String selectPrefix() {
        Object key = this.prefixTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No record Selected");
            return null;
        }
        this.session.setAttribute("mptpCode", r.getAttribute("mptpCode"));
        this.session.setAttribute("mptCode", r.getAttribute("mptCode"));
        this.txtSmsPrefix.setValue(r.getAttribute("prefix"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtSmsPrefix);
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:prefixPOP').hide(hints);");
        return null;
    }

    public String selectPrefix2() {
        Object key = this.prefixTbl2.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No record Selected");
            return null;
        }
        this.session.setAttribute("mptpCode", r.getAttribute("mptpCode"));
        this.session.setAttribute("mptCode", r.getAttribute("mptCode"));
        this.txtTelPayPrefix.setValue(r.getAttribute("prefix"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtTelPayPrefix);
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:prefixPOP2').hide(hints);");
        return null;
    }

    public void setTxtPrefixManager(RichInputText txtPrefixManager) {
        this.txtPrefixManager = txtPrefixManager;
    }

    public RichInputText getTxtPrefixManager() {
        return this.txtPrefixManager;
    }

    public void setPrefixPop(RichCommandButton prefixPop) {
        this.prefixPop = prefixPop;
    }

    public RichCommandButton getPrefixPop() {
        return this.prefixPop;
    }

    public void setTxtSmsPrefix(RichInputText txtSmsPrefix) {
        this.txtSmsPrefix = txtSmsPrefix;
    }

    public RichInputText getTxtSmsPrefix() {
        return this.txtSmsPrefix;
    }

    public void setTxtBouncedCheque(RichSelectOneChoice txtBouncedCheque) {
        this.txtBouncedCheque = txtBouncedCheque;
    }

    public RichSelectOneChoice getTxtBouncedCheque() {
        return this.txtBouncedCheque;
    }

    public void setTxtModeOfComm(RichSelectOneChoice txtModeOfComm) {
        this.txtModeOfComm = txtModeOfComm;
    }

    public RichSelectOneChoice getTxtModeOfComm() {
        return this.txtModeOfComm;
    }

    public void setTxtBussinessPersons(RichInputText txtBussinessPersons) {
        this.txtBussinessPersons = txtBussinessPersons;
    }

    public RichInputText getTxtBussinessPersons() {
        return this.txtBussinessPersons;
    }

    public void setBussinessPersonTbl(RichTable bussinessPersonTbl) {
        this.bussinessPersonTbl = bussinessPersonTbl;
    }

    public RichTable getBussinessPersonTbl() {
        return this.bussinessPersonTbl;
    }

    public String selectBussinessPerson() {
        Object key = this.bussinessPersonTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No record Selected");
            return null;
        }
        this.txtBussinessPersons.setValue(r.getAttribute("bpnName"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtBussinessPersons);
        this.session.setAttribute("bpnCode", r.getAttribute("bpnCode"));
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:bussinessPersonPop').hide(hints);");
        return null;
    }

    public void setTxtAgentType(RichInputText txtAgentType) {
        this.txtAgentType = txtAgentType;
    }

    public RichInputText getTxtAgentType() {
        return this.txtAgentType;
    }

    public void setTxtAgentGroup(RichInputText txtAgentGroup) {
        this.txtAgentGroup = txtAgentGroup;
    }

    public RichInputText getTxtAgentGroup() {
        return this.txtAgentGroup;
    }

    public String selectAgentType() {
        Object key = this.agentTypeTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No record selected");
            return null;
        }
        this.txtAgentType.setValue(r.getAttribute("type"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgentType);
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agentTypePop').hide(hints);");
        return null;
    }

    public void setAgentTypeTbl(RichTable agentTypeTbl) {
        this.agentTypeTbl = agentTypeTbl;
    }

    public RichTable getAgentTypeTbl() {
        return this.agentTypeTbl;
    }

    public void setAccountGroupsTbl(RichTable accountGroupsTbl) {
        this.accountGroupsTbl = accountGroupsTbl;
    }

    public RichTable getAccountGroupsTbl() {
        return this.accountGroupsTbl;
    }

    public String selectAccountGroup() {
        Object key = this.accountGroupsTbl.getSelectedRowData();
        JUCtrlValueBinding r = (JUCtrlValueBinding)key;
        if (r == null) {
            GlobalCC.INFORMATIONREPORTING((String)"No record selected");
            return null;
        }
        this.txtAgentGroup.setValue(r.getAttribute("accountGroups"));
        AdfFacesContext.getCurrentInstance().addPartialTarget((UIComponent)this.txtAgentGroup);
        ExtendedRenderKitService erkService = (ExtendedRenderKitService)Service.getService((Object)FacesContext.getCurrentInstance().getRenderKit(), (Class)ExtendedRenderKitService.class);
        erkService.addScript(FacesContext.getCurrentInstance(), "var hints = {autodismissNever:false}; AdfPage.PAGE.findComponent('pt1:agentGroupPop').hide(hints);");
        return null;
    }

    public void setTxtWithTax(RichSelectOneChoice txtWithTax) {
        this.txtWithTax = txtWithTax;
    }

    public RichSelectOneChoice getTxtWithTax() {
        return this.txtWithTax;
    }

    public void setTxtVatApp(RichSelectOneChoice txtVatApp) {
        this.txtVatApp = txtVatApp;
    }

    public RichSelectOneChoice getTxtVatApp() {
        return this.txtVatApp;
    }

    public void setUnAssignedProductsTbl(RichTable unAssignedProductsTbl) {
        this.unAssignedProductsTbl = unAssignedProductsTbl;
    }

    public RichTable getUnAssignedProductsTbl() {
        return this.unAssignedProductsTbl;
    }

    public void setAssignedProductsTbl(RichTable assignedProductsTbl) {
        this.assignedProductsTbl = assignedProductsTbl;
    }

    public RichTable getAssignedProductsTbl() {
        return this.assignedProductsTbl;
    }

    public void setChkAssignedProducts(RichSelectBooleanCheckbox chkAssignedProducts) {
        this.chkAssignedProducts = chkAssignedProducts;
    }

    public RichSelectBooleanCheckbox getChkAssignedProducts() {
        return this.chkAssignedProducts;
    }

    public void setChkUnAssignedProducts(RichSelectBooleanCheckbox chkUnAssignedProducts) {
        this.chkUnAssignedProducts = chkUnAssignedProducts;
    }

    public RichSelectBooleanCheckbox getChkUnAssignedProducts() {
        return this.chkUnAssignedProducts;
    }

    public void setTxtTelPay(RichInputText txtTelPay) {
        this.txtTelPay = txtTelPay;
    }

    public RichInputText getTxtTelPay() {
        return this.txtTelPay;
    }

    public void setTxtTelPayPrefix(RichInputText txtTelPayPrefix) {
        this.txtTelPayPrefix = txtTelPayPrefix;
    }

    public RichInputText getTxtTelPayPrefix() {
        return this.txtTelPayPrefix;
    }

    public void setPrefixTbl2(RichTable prefixTbl2) {
        this.prefixTbl2 = prefixTbl2;
    }

    public RichTable getPrefixTbl2() {
        return this.prefixTbl2;
    }

    public void setTxtFrequencyofPayment(RichSelectOneChoice txtFrequencyofPayment) {
        this.txtFrequencyofPayment = txtFrequencyofPayment;
    }

    public RichSelectOneChoice getTxtFrequencyofPayment() {
        return this.txtFrequencyofPayment;
    }

    public void setTxtModeofPayment(RichSelectOneChoice txtModeofPayment) {
        this.txtModeofPayment = txtModeofPayment;
    }

    public RichSelectOneChoice getTxtModeofPayment() {
        return this.txtModeofPayment;
    }

    public void pymtMode(ValueChangeEvent valueChangeEvent) {
        this.session.setAttribute("PM_MODE", valueChangeEvent.getNewValue());
        System.out.println("PM_MODE = " + valueChangeEvent.getNewValue());
    }

    public void setPaymentModes(List<SelectItem> paymentModes) {
        this.paymentModes = paymentModes;
    }

    public List<SelectItem> getPaymentModes() {
        if (this.paymentModes != null) {
            this.paymentModes.clear();
        }
        DBConnector connection = new DBConnector();
        OracleConnection conn = null;
        CallableStatement stmt = null;
        try {
            conn = connection.getDatabaseConnection();
            stmt = conn.prepareCall("begin ? := TQC_SETUPS_CURSOR.getclaimpaymodes(); end;");
            stmt.registerOutParameter(1, -10);
            stmt.execute();
            ResultSet rst = (ResultSet)stmt.getObject(1);
            while (rst.next()) {
                this.paymentModes.add(new SelectItem((Object)new BigDecimal(rst.getString(1)), rst.getString(2)));
            }
            rst.close();
            stmt.close();
            conn.close();
        }
        catch (SQLException ex) {
            GlobalCC.EXCEPTIONREPORTING((Exception)ex);
        }
        return this.paymentModes;
    }

    public void setTxtPmntDtlsValidated(RichSelectOneChoice txtPmntDtlsValidated) {
        this.txtPmntDtlsValidated = txtPmntDtlsValidated;
    }

    public RichSelectOneChoice getTxtPmntDtlsValidated() {
        return this.txtPmntDtlsValidated;
    }

    public void setTxtAgnDOB(RichInputDate txtAgnDOB) {
        this.txtAgnDOB = txtAgnDOB;
    }

    public RichInputDate getTxtAgnDOB() {
        return this.txtAgnDOB;
    }

    public void setTxtAgnMaritalStatus(RichSelectOneChoice txtAgnMaritalStatus) {
        this.txtAgnMaritalStatus = txtAgnMaritalStatus;
    }

    public RichSelectOneChoice getTxtAgnMaritalStatus() {
        return this.txtAgnMaritalStatus;
    }

    public void setTxtAgnIDNODocUsed(RichSelectOneChoice txtAgnIDNODocUsed) {
        this.txtAgnIDNODocUsed = txtAgnIDNODocUsed;
    }

    public RichSelectOneChoice getTxtAgnIDNODocUsed() {
        return this.txtAgnIDNODocUsed;
    }

    public void setTxtAgnQualification(RichSelectOneChoice txtAgnQualification) {
        this.txtAgnQualification = txtAgnQualification;
    }

    public RichSelectOneChoice getTxtAgnQualification() {
        return this.txtAgnQualification;
    }

    public void setTxtAgnBenStartDate(RichInputDate txtAgnBenStartDate) {
        this.txtAgnBenStartDate = txtAgnBenStartDate;
    }

    public RichInputDate getTxtAgnBenStartDate() {
        return this.txtAgnBenStartDate;
    }

    public void setTxtAgencySBUName(RichInputText txtAgencySBUName) {
        this.txtAgencySBUName = txtAgencySBUName;
    }

    public RichInputText getTxtAgencySBUName() {
        return this.txtAgencySBUName;
    }

    public void setTblAgencySBU(RichTable tblAgencySBU) {
        this.tblAgencySBU = tblAgencySBU;
    }

    public RichTable getTblAgencySBU() {
        return this.tblAgencySBU;
    }

    public void setTxtAgencySBUCode(RichInputText txtAgencySBUCode) {
        this.txtAgencySBUCode = txtAgencySBUCode;
    }

    public RichInputText getTxtAgencySBUCode() {
        return this.txtAgencySBUCode;
    }

    public void setTxtCommLevyApp(RichSelectOneChoice txtCommLevyApp) {
        this.txtCommLevyApp = txtCommLevyApp;
    }

    public RichSelectOneChoice getTxtCommLevyApp() {
        return this.txtCommLevyApp;
    }

    public void setTxtCommLevyRate(RichInputNumberSpinbox txtCommLevyRate) {
        this.txtCommLevyRate = txtCommLevyRate;
    }

    public RichInputNumberSpinbox getTxtCommLevyRate() {
        return this.txtCommLevyRate;
    }

    public void setTxtAgencyRegionName(RichInputText txtAgencyRegionName) {
        this.txtAgencyRegionName = txtAgencyRegionName;
    }

    public RichInputText getTxtAgencyRegionName() {
        return this.txtAgencyRegionName;
    }

    public void setTblRegion(RichTable tblRegion) {
        this.tblRegion = tblRegion;
    }

    public RichTable getTblRegion() {
        return this.tblRegion;
    }

    public void setTxtAgencyRegionCode(RichInputText txtAgencyRegionCode) {
        this.txtAgencyRegionCode = txtAgencyRegionCode;
    }

    public RichInputText getTxtAgencyRegionCode() {
        return this.txtAgencyRegionCode;
    }

    public void setBranchUnitPopUp(RichPopup branchUnitPopUp) {
        this.branchUnitPopUp = branchUnitPopUp;
    }

    public RichPopup getBranchUnitPopUp() {
        return this.branchUnitPopUp;
    }
}
